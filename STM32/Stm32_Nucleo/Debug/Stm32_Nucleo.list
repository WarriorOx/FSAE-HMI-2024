
Stm32_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005730  08005730  00006730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005774  08005774  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800577c  0800577c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005784  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000068  080057ec  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  080057ec  0000789c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012996  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e5  00000000  00000000  00019a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c59  00000000  00000000  0001d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d2f  00000000  00000000  0001df51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0e  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dea11  00000000  00000000  0005768e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013609f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a14  00000000  00000000  001360e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005718 	.word	0x08005718

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08005718 	.word	0x08005718

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_write>:
static void MX_ADC3_Init(void);
static void MX_I2C2_Init(void);
static void MX_CAN2_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here. This is
     used by puts and printf for example */
  int i=0;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffc7 	bl	80004f4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x16>
  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[32];

uint32_t TxMailbox[3];
uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,RxData) != HAL_OK){
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800058a:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800058c:	2100      	movs	r1, #0
 800058e:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000590:	f001 fc90 	bl	8001eb4 <HAL_CAN_GetRxMessage>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		printf("Error Rev \n");
 800059a:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800059c:	f004 fd28 	bl	8004ff0 <puts>
	}
	if ((RxHeader.StdId == 0x701)){
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f240 7201 	movw	r2, #1793	@ 0x701
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d102      	bne.n	80005b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		test = 1;
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
	}
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000724 	.word	0x20000724
 80005c0:	20000700 	.word	0x20000700
 80005c4:	20000114 	.word	0x20000114
 80005c8:	08005730 	.word	0x08005730
 80005cc:	200006e4 	.word	0x200006e4

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ff46 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f84c 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fa68 	bl	8000ab0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 fa0e 	bl	8000a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 fa36 	bl	8000a54 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80005e8:	f000 f954 	bl	8000894 <MX_CAN1_Init>
  MX_ADC2_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f0:	f000 f8fe 	bl	80007f0 <MX_ADC3_Init>
  MX_I2C2_Init();
 80005f4:	f000 f9d6 	bl	80009a4 <MX_I2C2_Init>
  MX_CAN2_Init();
 80005f8:	f000 f99e 	bl	8000938 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005fc:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x88>)
 80005fe:	f001 fc15 	bl	8001e2c <HAL_CAN_Start>

  // Activation of notification
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000602:	2102      	movs	r1, #2
 8000604:	4814      	ldr	r0, [pc, #80]	@ (8000658 <main+0x88>)
 8000606:	f001 fd77 	bl	80020f8 <HAL_CAN_ActivateNotification>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <main+0x46>
	  printf("Error REC \n");
 8000610:	4812      	ldr	r0, [pc, #72]	@ (800065c <main+0x8c>)
 8000612:	f004 fced 	bl	8004ff0 <puts>
  }

  TxHeader.DLC = 2; //Length of Data we going to send
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <main+0x90>)
 8000618:	2202      	movs	r2, #2
 800061a:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; // Basic Protocol keep 0
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <main+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Use Standard instead of Extended ID
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <main+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; //sending Data
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <main+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x00; // Sent to ID 00 = NMT Command/ Start up procedure
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <main+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <main+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x05; // Write Operational mode
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <main+0x94>)
 800063c:	2205      	movs	r2, #5
 800063e:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(test == 1){
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <main+0x98>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d103      	bne.n	8000650 <main+0x80>
		  printf("received \n");
 8000648:	4808      	ldr	r0, [pc, #32]	@ (800066c <main+0x9c>)
 800064a:	f004 fcd1 	bl	8004ff0 <puts>
 800064e:	e7f7      	b.n	8000640 <main+0x70>
	  }
	  else{
		  printf("Empty \n");
 8000650:	4807      	ldr	r0, [pc, #28]	@ (8000670 <main+0xa0>)
 8000652:	f004 fccd 	bl	8004ff0 <puts>
	  if(test == 1){
 8000656:	e7f3      	b.n	8000640 <main+0x70>
 8000658:	20000114 	.word	0x20000114
 800065c:	0800573c 	.word	0x0800573c
 8000660:	200006e8 	.word	0x200006e8
 8000664:	2000071c 	.word	0x2000071c
 8000668:	200006e4 	.word	0x200006e4
 800066c:	08005748 	.word	0x08005748
 8000670:	08005754 	.word	0x08005754

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fd94 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <SystemClock_Config+0xd0>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a22      	ldr	r2, [pc, #136]	@ (8000748 <SystemClock_Config+0xd4>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <SystemClock_Config+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e8:	23a8      	movs	r3, #168	@ 0xa8
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fb03 	bl	8003d08 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 faf6 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fc78 	bl	8003020 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000736:	f000 fadf 	bl	8000cf8 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <MX_ADC2_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000766:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_ADC2_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_ADC2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_ADC2_Init+0x98>)
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_ADC2_Init+0xa0>)
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_ADC2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_ADC2_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_ADC2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_ADC2_Init+0x98>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_ADC2_Init+0x98>)
 80007ae:	f000 feef 	bl	8001590 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 fa9e 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007bc:	2306      	movs	r3, #6
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_ADC2_Init+0x98>)
 80007ce:	f000 ff23 	bl	8001618 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fa8e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000084 	.word	0x20000084
 80007e8:	40012100 	.word	0x40012100
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <MX_ADC3_Init+0x9c>)
 8000806:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_ADC3_Init+0x98>)
 800080a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800080e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_ADC3_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_ADC3_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <MX_ADC3_Init+0xa0>)
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_ADC3_Init+0x98>)
 800083e:	2201      	movs	r2, #1
 8000840:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_ADC3_Init+0x98>)
 800084c:	2201      	movs	r2, #1
 800084e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000850:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000852:	f000 fe9d 	bl	8001590 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800085c:	f000 fa4c 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000860:	2304      	movs	r3, #4
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_ADC3_Init+0x98>)
 8000872:	f000 fed1 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 fa3c 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000cc 	.word	0x200000cc
 800088c:	40012200 	.word	0x40012200
 8000890:	0f000001 	.word	0x0f000001

08000894 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800089a:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <MX_CAN1_Init+0x9c>)
 800089c:	4a25      	ldr	r2, [pc, #148]	@ (8000934 <MX_CAN1_Init+0xa0>)
 800089e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008a2:	2206      	movs	r2, #6
 80008a4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008a6:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80008c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008e6:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_CAN1_Init+0x9c>)
 80008e8:	f001 f8c4 	bl	8001a74 <HAL_CAN_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fa01 	bl	8000cf8 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;


  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank =10; //Specify which filter bank you wish to use from 0 to SlaveStartFilter Bank
 80008fa:	230a      	movs	r3, #10
 80008fc:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000; // we shift 5 here to exclude the extended ID just in case we receiving extended ID.
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000; // We pick what bit will be compare between the Incoming Id Vs This device ID
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK; //2 type of filter here. Mask or Identity mode
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; // Specify what kind of mask
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13; //2 filter bank, you can chose how many filter for Can1<Master> and Can2<Slave>
 800091a:	230d      	movs	r3, #13
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  // If i put 13 here, that mean 13 filter out of 27 are allocated to Slave filter

  HAL_CAN_ConfigFilter(&hcan1,&canfilterconfig);
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4803      	ldr	r0, [pc, #12]	@ (8000930 <MX_CAN1_Init+0x9c>)
 8000924:	f001 f9a2 	bl	8001c6c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000114 	.word	0x20000114
 8000934:	40006400 	.word	0x40006400

08000938 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_CAN2_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	@ (80009a0 <MX_CAN2_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_CAN2_Init+0x64>)
 8000944:	2210      	movs	r2, #16
 8000946:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_CAN2_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_CAN2_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_CAN2_Init+0x64>)
 8000956:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800095a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_CAN2_Init+0x64>)
 800095e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000962:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_CAN2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_CAN2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <MX_CAN2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_CAN2_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <MX_CAN2_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_CAN2_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_CAN2_Init+0x64>)
 800098a:	f001 f873 	bl	8001a74 <HAL_CAN_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 f9b0 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000013c 	.word	0x2000013c
 80009a0:	40006800 	.word	0x40006800

080009a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009aa:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <MX_I2C2_Init+0x54>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009b0:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <MX_I2C2_Init+0x58>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_I2C2_Init+0x50>)
 80009e2:	f002 f89f 	bl	8002b24 <HAL_I2C_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 f984 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000164 	.word	0x20000164
 80009f8:	40005800 	.word	0x40005800
 80009fc:	000186a0 	.word	0x000186a0

08000a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <MX_USART3_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a38:	f003 fc04 	bl	8004244 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a42:	f000 f959 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001b8 	.word	0x200001b8
 8000a50:	40004800 	.word	0x40004800

08000a54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2206      	movs	r2, #6
 8000a64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	f002 f988 	bl	8002dac <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f929 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000200 	.word	0x20000200

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	4b84      	ldr	r3, [pc, #528]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a83      	ldr	r2, [pc, #524]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b81      	ldr	r3, [pc, #516]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a7c      	ldr	r2, [pc, #496]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b7a      	ldr	r3, [pc, #488]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b76      	ldr	r3, [pc, #472]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a75      	ldr	r2, [pc, #468]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b73      	ldr	r3, [pc, #460]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a6e      	ldr	r2, [pc, #440]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b68      	ldr	r3, [pc, #416]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a67      	ldr	r2, [pc, #412]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b65      	ldr	r3, [pc, #404]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b61      	ldr	r3, [pc, #388]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a60      	ldr	r2, [pc, #384]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b5e      	ldr	r3, [pc, #376]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b5a      	ldr	r3, [pc, #360]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a59      	ldr	r2, [pc, #356]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b57      	ldr	r3, [pc, #348]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b53      	ldr	r3, [pc, #332]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a52      	ldr	r2, [pc, #328]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b50      	ldr	r3, [pc, #320]	@ (8000cdc <MX_GPIO_Init+0x22c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|RELAY_04_Pin|RELAY_02_Pin|RELAY_01_Pin
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5171 	mov.w	r1, #15424	@ 0x3c40
 8000bac:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <MX_GPIO_Init+0x230>)
 8000bae:	f001 ff9f 	bl	8002af0 <HAL_GPIO_WritePin>
                          |RELAY_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_PinO1_Pin|Test_PinO2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000bb8:	484a      	ldr	r0, [pc, #296]	@ (8000ce4 <MX_GPIO_Init+0x234>)
 8000bba:	f001 ff99 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	4849      	ldr	r0, [pc, #292]	@ (8000ce8 <MX_GPIO_Init+0x238>)
 8000bc4:	f001 ff94 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GP16_Pin GP15_Pin GP18_Pin */
  GPIO_InitStruct.Pin = GP16_Pin|GP15_Pin|GP18_Pin;
 8000bc8:	2358      	movs	r3, #88	@ 0x58
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4844      	ldr	r0, [pc, #272]	@ (8000cec <MX_GPIO_Init+0x23c>)
 8000bdc:	f001 fdf4 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	483b      	ldr	r0, [pc, #236]	@ (8000ce4 <MX_GPIO_Init+0x234>)
 8000bf8:	f001 fde6 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP4_Pin GP7_Pin GP6_Pin GP5_Pin
                           GP1_Pin GP3_Pin */
  GPIO_InitStruct.Pin = GP4_Pin|GP7_Pin|GP6_Pin|GP5_Pin
 8000bfc:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GP1_Pin|GP3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4835      	ldr	r0, [pc, #212]	@ (8000ce8 <MX_GPIO_Init+0x238>)
 8000c12:	f001 fdd9 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP9_Pin GP8_Pin GP12_Pin GP11_Pin
                           GP13_Pin GP14_Pin GP17_Pin */
  GPIO_InitStruct.Pin = GP9_Pin|GP8_Pin|GP12_Pin|GP11_Pin
 8000c16:	f641 03f8 	movw	r3, #6392	@ 0x18f8
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GP13_Pin|GP14_Pin|GP17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4831      	ldr	r0, [pc, #196]	@ (8000cf0 <MX_GPIO_Init+0x240>)
 8000c2c:	f001 fdcc 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin RELAY_04_Pin RELAY_02_Pin RELAY_01_Pin
                           RELAY_03_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|RELAY_04_Pin|RELAY_02_Pin|RELAY_01_Pin
 8000c30:	f44f 5371 	mov.w	r3, #15424	@ 0x3c40
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
                          |RELAY_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4825      	ldr	r0, [pc, #148]	@ (8000ce0 <MX_GPIO_Init+0x230>)
 8000c4a:	f001 fdbd 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin GP19_Pin GP20_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|GP19_Pin|GP20_Pin;
 8000c4e:	f248 2380 	movw	r3, #33408	@ 0x8280
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	481f      	ldr	r0, [pc, #124]	@ (8000ce0 <MX_GPIO_Init+0x230>)
 8000c64:	f001 fdb0 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GP2_Pin */
  GPIO_InitStruct.Pin = GP2_Pin;
 8000c68:	2340      	movs	r3, #64	@ 0x40
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GP2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <MX_GPIO_Init+0x234>)
 8000c7c:	f001 fda4 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_PinO1_Pin Test_PinO2_Pin */
  GPIO_InitStruct.Pin = Test_PinO1_Pin|Test_PinO2_Pin;
 8000c80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <MX_GPIO_Init+0x234>)
 8000c9a:	f001 fd95 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <MX_GPIO_Init+0x244>)
 8000cb4:	f001 fd88 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_GPIO_Init+0x238>)
 8000cd0:	f001 fd7a 	bl	80027c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	@ 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	@ 0x40
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a62      	ldr	r2, [pc, #392]	@ (8000efc <HAL_ADC_MspInit+0x1a8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d15c      	bne.n	8000e30 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d7a:	4b61      	ldr	r3, [pc, #388]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a60      	ldr	r2, [pc, #384]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b5e      	ldr	r3, [pc, #376]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d96:	4b5a      	ldr	r3, [pc, #360]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a59      	ldr	r2, [pc, #356]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b57      	ldr	r3, [pc, #348]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	4b53      	ldr	r3, [pc, #332]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a52      	ldr	r2, [pc, #328]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b50      	ldr	r3, [pc, #320]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC2_IN7
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8000de6:	23c0      	movs	r3, #192	@ 0xc0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4842      	ldr	r0, [pc, #264]	@ (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000dfa:	f001 fce5 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|LV_BAT_Pin;
 8000dfe:	2330      	movs	r3, #48	@ 0x30
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483d      	ldr	r0, [pc, #244]	@ (8000f08 <HAL_ADC_MspInit+0x1b4>)
 8000e12:	f001 fcd9 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_Pin;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e26:	4619      	mov	r1, r3
 8000e28:	4838      	ldr	r0, [pc, #224]	@ (8000f0c <HAL_ADC_MspInit+0x1b8>)
 8000e2a:	f001 fccd 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e2e:	e061      	b.n	8000ef4 <HAL_ADC_MspInit+0x1a0>
  else if(hadc->Instance==ADC3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a36      	ldr	r2, [pc, #216]	@ (8000f10 <HAL_ADC_MspInit+0x1bc>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d15c      	bne.n	8000ef4 <HAL_ADC_MspInit+0x1a0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a2f      	ldr	r2, [pc, #188]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a28      	ldr	r2, [pc, #160]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a1a      	ldr	r2, [pc, #104]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC8_Pin|ADC6_Pin|ADC5_Pin|ADC15_Pin
 8000eaa:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <HAL_ADC_MspInit+0x1c0>)
 8000ec0:	f001 fc82 	bl	80027c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC11_Pin;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ADC11_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <HAL_ADC_MspInit+0x1b4>)
 8000ed8:	f001 fc76 	bl	80027c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC12_Pin;
 8000edc:	2303      	movs	r3, #3
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000ef0:	f001 fc6a 	bl	80027c8 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3740      	adds	r7, #64	@ 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40012100 	.word	0x40012100
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40012200 	.word	0x40012200
 8000f14:	40021400 	.word	0x40021400

08000f18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <HAL_CAN_MspInit+0x138>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d13d      	bne.n	8000fb6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f3a:	4b46      	ldr	r3, [pc, #280]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a44      	ldr	r2, [pc, #272]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000f42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f44:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d10d      	bne.n	8000f68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a40      	ldr	r2, [pc, #256]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a39      	ldr	r2, [pc, #228]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f84:	2303      	movs	r3, #3
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f94:	2309      	movs	r3, #9
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482f      	ldr	r0, [pc, #188]	@ (800105c <HAL_CAN_MspInit+0x144>)
 8000fa0:	f001 fc12 	bl	80027c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2014      	movs	r0, #20
 8000faa:	f001 fbd6 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fae:	2014      	movs	r0, #20
 8000fb0:	f001 fbef 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000fb4:	e047      	b.n	8001046 <HAL_CAN_MspInit+0x12e>
  else if(hcan->Instance==CAN2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <HAL_CAN_MspInit+0x148>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d142      	bne.n	8001046 <HAL_CAN_MspInit+0x12e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	4a23      	ldr	r2, [pc, #140]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000fca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000fe4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_CAN_MspInit+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10d      	bne.n	800100a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8000ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a11      	ldr	r2, [pc, #68]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_CAN_MspInit+0x140>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001026:	2360      	movs	r3, #96	@ 0x60
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001036:	2309      	movs	r3, #9
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4808      	ldr	r0, [pc, #32]	@ (8001064 <HAL_CAN_MspInit+0x14c>)
 8001042:	f001 fbc1 	bl	80027c8 <HAL_GPIO_Init>
}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40006400 	.word	0x40006400
 8001054:	20000744 	.word	0x20000744
 8001058:	40023800 	.word	0x40023800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40006800 	.word	0x40006800
 8001064:	40020400 	.word	0x40020400

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_I2C_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12b      	bne.n	80010e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a6:	2303      	movs	r3, #3
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010aa:	2312      	movs	r3, #18
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <HAL_I2C_MspInit+0x8c>)
 80010c2:	f001 fb81 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40005800 	.word	0x40005800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40021400 	.word	0x40021400

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	@ (800117c <HAL_UART_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_UART_MspInit+0x88>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_UART_MspInit+0x88>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_UART_MspInit+0x88>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_UART_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_UART_MspInit+0x88>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_UART_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001152:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001164:	2307      	movs	r3, #7
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <HAL_UART_MspInit+0x8c>)
 8001170:	f001 fb2a 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	@ 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40004800 	.word	0x40004800
 8001180:	40023800 	.word	0x40023800
 8001184:	40020c00 	.word	0x40020c00

08001188 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0a0      	sub	sp, #128	@ 0x80
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	225c      	movs	r2, #92	@ 0x5c
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f801 	bl	80051b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b6:	d14e      	bne.n	8001256 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011be:	2300      	movs	r3, #0
 80011c0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f844 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80011d2:	f7ff fd91 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a20      	ldr	r2, [pc, #128]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011f2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001204:	230a      	movs	r3, #10
 8001206:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800120c:	4619      	mov	r1, r3
 800120e:	4815      	ldr	r0, [pc, #84]	@ (8001264 <HAL_PCD_MspInit+0xdc>)
 8001210:	f001 fada 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001218:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001226:	4619      	mov	r1, r3
 8001228:	480e      	ldr	r0, [pc, #56]	@ (8001264 <HAL_PCD_MspInit+0xdc>)
 800122a:	f001 facd 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001238:	6353      	str	r3, [r2, #52]	@ 0x34
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_PCD_MspInit+0xd8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3780      	adds	r7, #128	@ 0x80
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f923 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <CAN1_RX0_IRQHandler+0x10>)
 80012ce:	f000 ff39 	bl	8002144 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000114 	.word	0x20000114

080012dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
  }

  return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133e:	605a      	str	r2, [r3, #4]
  return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_isatty>:

int _isatty(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f003 ff4c 	bl	800524c <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20020000 	.word	0x20020000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	20000748 	.word	0x20000748
 80013e8:	200008a0 	.word	0x200008a0

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001448 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001414:	f7ff ffea 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800143e:	f003 ff0b 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f8c5 	bl	80005d0 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001454:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 8001458:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800145c:	2000089c 	.word	0x2000089c

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f001 f959 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fc34 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 f971 	bl	80027ae <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f001 f939 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	2000074c 	.word	0x2000074c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000074c 	.word	0x2000074c

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e033      	b.n	800160e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fbd0 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f94a 	bl	800187c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fe:	e001      	b.n	8001604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1c>
 8001630:	2302      	movs	r3, #2
 8001632:	e113      	b.n	800185c <HAL_ADC_ConfigChannel+0x244>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b09      	cmp	r3, #9
 8001642:	d925      	bls.n	8001690 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	3b1e      	subs	r3, #30
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43da      	mvns	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	400a      	ands	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	4603      	mov	r3, r0
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4403      	add	r3, r0
 8001682:	3b1e      	subs	r3, #30
 8001684:	409a      	lsls	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	e022      	b.n	80016d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	2207      	movs	r2, #7
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4403      	add	r3, r0
 80016cc:	409a      	lsls	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d824      	bhi.n	8001728 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b05      	subs	r3, #5
 80016f0:	221f      	movs	r2, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	400a      	ands	r2, r1
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3b05      	subs	r3, #5
 800171a:	fa00 f203 	lsl.w	r2, r0, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34
 8001726:	e04c      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d824      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	@ 0x23
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b23      	subs	r3, #35	@ 0x23
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	631a      	str	r2, [r3, #48]	@ 0x30
 8001778:	e023      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b41      	subs	r3, #65	@ 0x41
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b41      	subs	r3, #65	@ 0x41
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c2:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <HAL_ADC_ConfigChannel+0x250>)
 80017c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a28      	ldr	r2, [pc, #160]	@ (800186c <HAL_ADC_ConfigChannel+0x254>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10f      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d8>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_ADC_ConfigChannel+0x254>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x23a>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001870 <HAL_ADC_ConfigChannel+0x258>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d003      	beq.n	800180c <HAL_ADC_ConfigChannel+0x1f4>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b11      	cmp	r3, #17
 800180a:	d122      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a11      	ldr	r2, [pc, #68]	@ (8001870 <HAL_ADC_ConfigChannel+0x258>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d111      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_ADC_ConfigChannel+0x25c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <HAL_ADC_ConfigChannel+0x260>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	0c9a      	lsrs	r2, r3, #18
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001844:	e002      	b.n	800184c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3b01      	subs	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f9      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40012300 	.word	0x40012300
 800186c:	40012000 	.word	0x40012000
 8001870:	10000012 	.word	0x10000012
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001884:	4b79      	ldr	r3, [pc, #484]	@ (8001a6c <ADC_Init+0x1f0>)
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <ADC_Init+0x1f4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6899      	ldr	r1, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e00f      	b.n	800197a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001978:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0202 	bic.w	r2, r2, #2
 8001988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
 8001994:	005a      	lsls	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01b      	beq.n	80019e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	3b01      	subs	r3, #1
 80019d4:	035a      	lsls	r2, r3, #13
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	e007      	b.n	80019f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	051a      	lsls	r2, r3, #20
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a32:	025a      	lsls	r2, r3, #9
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	029a      	lsls	r2, r3, #10
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	0f000001 	.word	0x0f000001

08001a74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0ed      	b.n	8001c62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fa40 	bl	8000f18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa8:	f7ff fd42 	bl	8001530 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aae:	e012      	b.n	8001ad6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab0:	f7ff fd3e 	bl	8001530 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d90b      	bls.n	8001ad6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2205      	movs	r2, #5
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0c5      	b.n	8001c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0e5      	beq.n	8001ab0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0202 	bic.w	r2, r2, #2
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af4:	f7ff fd1c 	bl	8001530 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001afa:	e012      	b.n	8001b22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001afc:	f7ff fd18 	bl	8001530 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d90b      	bls.n	8001b22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2205      	movs	r2, #5
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e09f      	b.n	8001c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e5      	bne.n	8001afc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7e1b      	ldrb	r3, [r3, #24]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7e5b      	ldrb	r3, [r3, #25]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e9b      	ldrb	r3, [r3, #26]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0220 	bic.w	r2, r2, #32
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7edb      	ldrb	r3, [r3, #27]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0210 	bic.w	r2, r2, #16
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0210 	orr.w	r2, r2, #16
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0208 	orr.w	r2, r2, #8
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7f5b      	ldrb	r3, [r3, #29]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0204 	orr.w	r2, r2, #4
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	ea42 0103 	orr.w	r1, r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <HAL_CAN_ConfigFilter+0x26>
 8001c8a:	7cfb      	ldrb	r3, [r7, #19]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 80be 	bne.w	8001e0e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c92:	4b65      	ldr	r3, [pc, #404]	@ (8001e28 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d123      	bne.n	8001d3c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3248      	adds	r2, #72	@ 0x48
 8001d1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	3348      	adds	r3, #72	@ 0x48
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d122      	bne.n	8001d8a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3248      	adds	r2, #72	@ 0x48
 8001d6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	3348      	adds	r3, #72	@ 0x48
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dd0:	e007      	b.n	8001de2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e00:	f023 0201 	bic.w	r2, r3, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e006      	b.n	8001e1c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40006400 	.word	0x40006400

08001e2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d12e      	bne.n	8001e9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff fb6a 	bl	8001530 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e5e:	e012      	b.n	8001e86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e60:	f7ff fb66 	bl	8001530 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d90b      	bls.n	8001e86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e012      	b.n	8001eac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e5      	bne.n	8001e60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d003      	beq.n	8001ed8 <HAL_CAN_GetRxMessage+0x24>
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	f040 8103 	bne.w	80020de <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d116      	bne.n	8001f1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0f7      	b.n	80020ec <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0e8      	b.n	80020ec <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	331b      	adds	r3, #27
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0204 	and.w	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10c      	bne.n	8001f52 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	331b      	adds	r3, #27
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0d5b      	lsrs	r3, r3, #21
 8001f48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e00b      	b.n	8001f6a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	331b      	adds	r3, #27
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	331b      	adds	r3, #27
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0202 	and.w	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	331b      	adds	r3, #27
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	331b      	adds	r3, #27
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	331b      	adds	r3, #27
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	331b      	adds	r3, #27
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0a1a      	lsrs	r2, r3, #8
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0c1a      	lsrs	r2, r3, #16
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3302      	adds	r3, #2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0e1a      	lsrs	r2, r3, #24
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3303      	adds	r3, #3
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3304      	adds	r3, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0a1a      	lsrs	r2, r3, #8
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3305      	adds	r3, #5
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0c1a      	lsrs	r2, r3, #16
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	3306      	adds	r3, #6
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e1a      	lsrs	r2, r3, #24
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	3307      	adds	r3, #7
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	e007      	b.n	80020da <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e006      	b.n	80020ec <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002108:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d002      	beq.n	8002116 <HAL_CAN_ActivateNotification+0x1e>
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d109      	bne.n	800212a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6959      	ldr	r1, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e006      	b.n	8002138 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07c      	beq.n	8002284 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f983 	bl	80024b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80021ac:	e016      	b.n	80021dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c0:	e00c      	b.n	80021dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d4:	e002      	b.n	80021dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f989 	bl	80024ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d024      	beq.n	8002230 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f963 	bl	80024c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002200:	e016      	b.n	8002230 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	e00c      	b.n	8002230 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	e002      	b.n	8002230 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f969 	bl	8002502 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d024      	beq.n	8002284 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002242:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f943 	bl	80024da <HAL_CAN_TxMailbox2CompleteCallback>
 8002254:	e016      	b.n	8002284 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
 8002268:	e00c      	b.n	8002284 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
 800227c:	e002      	b.n	8002284 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f949 	bl	8002516 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2208      	movs	r2, #8
 80022c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f930 	bl	800252a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f94c 	bl	8000580 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f912 	bl	8002552 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8f9 	bl	800253e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f8fc 	bl	8002566 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2208      	movs	r2, #8
 8002388:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8f5 	bl	800257a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d07b      	beq.n	8002492 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d072      	beq.n	800248a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d043      	beq.n	800248a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03e      	beq.n	800248a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002412:	2b60      	cmp	r3, #96	@ 0x60
 8002414:	d02b      	beq.n	800246e <HAL_CAN_IRQHandler+0x32a>
 8002416:	2b60      	cmp	r3, #96	@ 0x60
 8002418:	d82e      	bhi.n	8002478 <HAL_CAN_IRQHandler+0x334>
 800241a:	2b50      	cmp	r3, #80	@ 0x50
 800241c:	d022      	beq.n	8002464 <HAL_CAN_IRQHandler+0x320>
 800241e:	2b50      	cmp	r3, #80	@ 0x50
 8002420:	d82a      	bhi.n	8002478 <HAL_CAN_IRQHandler+0x334>
 8002422:	2b40      	cmp	r3, #64	@ 0x40
 8002424:	d019      	beq.n	800245a <HAL_CAN_IRQHandler+0x316>
 8002426:	2b40      	cmp	r3, #64	@ 0x40
 8002428:	d826      	bhi.n	8002478 <HAL_CAN_IRQHandler+0x334>
 800242a:	2b30      	cmp	r3, #48	@ 0x30
 800242c:	d010      	beq.n	8002450 <HAL_CAN_IRQHandler+0x30c>
 800242e:	2b30      	cmp	r3, #48	@ 0x30
 8002430:	d822      	bhi.n	8002478 <HAL_CAN_IRQHandler+0x334>
 8002432:	2b10      	cmp	r3, #16
 8002434:	d002      	beq.n	800243c <HAL_CAN_IRQHandler+0x2f8>
 8002436:	2b20      	cmp	r3, #32
 8002438:	d005      	beq.n	8002446 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800243a:	e01d      	b.n	8002478 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002444:	e019      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800244e:	e014      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002458:	e00f      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002462:	e00a      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246c:	e005      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002476:	e000      	b.n	800247a <HAL_CAN_IRQHandler+0x336>
            break;
 8002478:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002488:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2204      	movs	r2, #4
 8002490:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f872 	bl	800258e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	@ 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <__NVIC_SetPriorityGrouping>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	@ (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	@ (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	@ (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	@ (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e165      	b.n	8002ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8154 	bne.w	8002aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ae 	beq.w	8002aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_GPIO_Init+0x300>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac8 <HAL_GPIO_Init+0x300>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800295c:	6453      	str	r3, [r2, #68]	@ 0x44
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_GPIO_Init+0x300>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <HAL_GPIO_Init+0x304>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad0 <HAL_GPIO_Init+0x308>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad4 <HAL_GPIO_Init+0x30c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad8 <HAL_GPIO_Init+0x310>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	@ (8002adc <HAL_GPIO_Init+0x314>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae0 <HAL_GPIO_Init+0x318>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x206>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a49      	ldr	r2, [pc, #292]	@ (8002ae8 <HAL_GPIO_Init+0x320>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x202>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	@ (8002acc <HAL_GPIO_Init+0x304>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a31      	ldr	r2, [pc, #196]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_GPIO_Init+0x324>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae96 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e12b      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fa8c 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b88:	f000 fb3c 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a81      	ldr	r2, [pc, #516]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d807      	bhi.n	8002ba8 <HAL_I2C_Init+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a80      	ldr	r2, [pc, #512]	@ (8002d9c <HAL_I2C_Init+0x278>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	bf94      	ite	ls
 8002ba0:	2301      	movls	r3, #1
 8002ba2:	2300      	movhi	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e006      	b.n	8002bb6 <HAL_I2C_Init+0x92>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a7d      	ldr	r2, [pc, #500]	@ (8002da0 <HAL_I2C_Init+0x27c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0e7      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	@ (8002da4 <HAL_I2C_Init+0x280>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d802      	bhi.n	8002bf8 <HAL_I2C_Init+0xd4>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	e009      	b.n	8002c0c <HAL_I2C_Init+0xe8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a69      	ldr	r2, [pc, #420]	@ (8002da8 <HAL_I2C_Init+0x284>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	495c      	ldr	r1, [pc, #368]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	d819      	bhi.n	8002c60 <HAL_I2C_Init+0x13c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e59      	subs	r1, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c40:	400b      	ands	r3, r1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_I2C_Init+0x138>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e59      	subs	r1, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	e051      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e04f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_I2C_Init+0x168>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e012      	b.n	8002cb2 <HAL_I2C_Init+0x18e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x196>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e022      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_I2C_Init+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e58      	subs	r0, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	440b      	add	r3, r1
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6809      	ldr	r1, [r1, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6911      	ldr	r1, [r2, #16]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	000186a0 	.word	0x000186a0
 8002d9c:	001e847f 	.word	0x001e847f
 8002da0:	003d08ff 	.word	0x003d08ff
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e108      	b.n	8002fd0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe f9d5 	bl	8001188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dec:	d102      	bne.n	8002df4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 fd4b 	bl	8004894 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7c1a      	ldrb	r2, [r3, #16]
 8002e06:	f88d 2000 	strb.w	r2, [sp]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e0e:	f001 fcdd 	bl	80047cc <USB_CoreInit>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0d5      	b.n	8002fd0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fd43 	bl	80048b6 <USB_SetCurrentMode>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0c6      	b.n	8002fd0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e04a      	b.n	8002ede <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3315      	adds	r3, #21
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	b298      	uxth	r0, r3
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	332e      	adds	r3, #46	@ 0x2e
 8002e84:	4602      	mov	r2, r0
 8002e86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3318      	adds	r3, #24
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331c      	adds	r3, #28
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3320      	adds	r3, #32
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3324      	adds	r3, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	3301      	adds	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3af      	bcc.n	8002e48 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e044      	b.n	8002f78 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	3301      	adds	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	791b      	ldrb	r3, [r3, #4]
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3b5      	bcc.n	8002eee <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7c1a      	ldrb	r2, [r3, #16]
 8002f8a:	f88d 2000 	strb.w	r2, [sp]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f92:	f001 fcdd 	bl	8004950 <USB_DevInit>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e013      	b.n	8002fd0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7b1b      	ldrb	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f80a 	bl	8002fd8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fe98 	bl	8004cfe <USB_DevDisconnect>

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300a:	f043 0303 	orr.w	r3, r3, #3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cc      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b68      	ldr	r3, [pc, #416]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d90c      	bls.n	800305c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b65      	ldr	r3, [pc, #404]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d044      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e067      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b37      	ldr	r3, [pc, #220]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4934      	ldr	r1, [pc, #208]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe fa0e 	bl	8001530 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fa0a 	bl	8001530 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 fb7f 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe f96e 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800575c 	.word	0x0800575c
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff0 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	0800576c 	.word	0x0800576c

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffdc 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0b5b      	lsrs	r3, r3, #13
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	@ (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	0800576c 	.word	0x0800576c

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08c      	sub	sp, #48	@ 0x30
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800328c:	4b6f      	ldr	r3, [pc, #444]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800328e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003292:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	496c      	ldr	r1, [pc, #432]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80032aa:	2301      	movs	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032ba:	4b64      	ldr	r3, [pc, #400]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	4960      	ldr	r1, [pc, #384]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e8:	4b58      	ldr	r3, [pc, #352]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4955      	ldr	r1, [pc, #340]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003306:	d101      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003308:	2301      	movs	r3, #1
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003324:	4b49      	ldr	r3, [pc, #292]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	4946      	ldr	r1, [pc, #280]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003342:	d101      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003344:	2301      	movs	r3, #1
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003350:	2301      	movs	r3, #1
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 808a 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	4a38      	ldr	r2, [pc, #224]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	@ 0x40
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a33      	ldr	r2, [pc, #204]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800338a:	f7fe f8d1 	bl	8001530 <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fe f8cd 	bl	8001530 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e278      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b0:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d028      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ce:	4b1f      	ldr	r3, [pc, #124]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033e4:	4a19      	ldr	r2, [pc, #100]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033ea:	4b18      	ldr	r3, [pc, #96]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d114      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe f89b 	bl	8001530 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe f897 	bl	8001530 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e240      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342c:	d114      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800343e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003442:	4902      	ldr	r1, [pc, #8]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
 8003448:	e00c      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	42470e40 	.word	0x42470e40
 8003458:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a49      	ldr	r2, [pc, #292]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800345e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003462:	6093      	str	r3, [r2, #8]
 8003464:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003466:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	4944      	ldr	r1, [pc, #272]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003472:	4313      	orrs	r3, r2
 8003474:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003488:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800348a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003498:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	4937      	ldr	r1, [pc, #220]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ba:	4b32      	ldr	r3, [pc, #200]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	492e      	ldr	r1, [pc, #184]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d011      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034dc:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	4926      	ldr	r1, [pc, #152]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034fa:	d101      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80034fc:	2301      	movs	r3, #1
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003512:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	491a      	ldr	r1, [pc, #104]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003534:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	4911      	ldr	r1, [pc, #68]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800354e:	2301      	movs	r3, #1
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d005      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003560:	f040 80ff 	bne.w	8003762 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800356a:	f7fd ffe1 	bl	8001530 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003570:	e00e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003572:	f7fd ffdd 	bl	8001530 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d907      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e188      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003584:	40023800 	.word	0x40023800
 8003588:	424711e0 	.word	0x424711e0
 800358c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003590:	4b7e      	ldr	r3, [pc, #504]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ea      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d028      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d124      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035c4:	4b71      	ldr	r3, [pc, #452]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	3301      	adds	r3, #1
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d6:	4b6d      	ldr	r3, [pc, #436]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035dc:	0e1b      	lsrs	r3, r3, #24
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	431a      	orrs	r2, r3
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	4961      	ldr	r1, [pc, #388]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	d035      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003638:	d130      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800363a:	4b54      	ldr	r3, [pc, #336]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800364c:	4b4f      	ldr	r3, [pc, #316]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003652:	0f1b      	lsrs	r3, r3, #28
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	019b      	lsls	r3, r3, #6
 8003664:	431a      	orrs	r2, r3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	071b      	lsls	r3, r3, #28
 800367c:	4943      	ldr	r1, [pc, #268]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003684:	4b41      	ldr	r3, [pc, #260]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800368a:	f023 021f 	bic.w	r2, r3, #31
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	493d      	ldr	r1, [pc, #244]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d029      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b0:	d124      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036b2:	4b36      	ldr	r3, [pc, #216]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036c4:	4b31      	ldr	r3, [pc, #196]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ca:	0f1b      	lsrs	r3, r3, #28
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	019b      	lsls	r3, r3, #6
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	431a      	orrs	r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	431a      	orrs	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	071b      	lsls	r3, r3, #28
 80036f4:	4925      	ldr	r1, [pc, #148]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	4917      	ldr	r1, [pc, #92]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800373c:	f7fd fef8 	bl	8001530 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003744:	f7fd fef4 	bl	8001530 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e09f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003756:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 8095 	bne.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800376a:	4b0a      	ldr	r3, [pc, #40]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003770:	f7fd fede 	bl	8001530 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003776:	e00f      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003778:	f7fd feda 	bl	8001530 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d908      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e085      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	42470068 	.word	0x42470068
 8003794:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003798:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a4:	d0e8      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x566>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d127      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037ce:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	431a      	orrs	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	4928      	ldr	r1, [pc, #160]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003804:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800380a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	3b01      	subs	r3, #1
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	4922      	ldr	r1, [pc, #136]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01d      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003832:	d118      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	0e1b      	lsrs	r3, r3, #24
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	019b      	lsls	r3, r3, #6
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	4910      	ldr	r1, [pc, #64]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003866:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd fe60 	bl	8001530 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003874:	f7fd fe5c 	bl	8001530 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e007      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800388e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003892:	d1ef      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3730      	adds	r7, #48	@ 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470070 	.word	0x42470070

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b0ae      	sub	sp, #184	@ 0xb8
 80038ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ce:	4bcb      	ldr	r3, [pc, #812]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	f200 8206 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003ce9 	.word	0x08003ce9
 80038ec:	08003ce9 	.word	0x08003ce9
 80038f0:	08003ce9 	.word	0x08003ce9
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003ce9 	.word	0x08003ce9
 80038fc:	08003ce9 	.word	0x08003ce9
 8003900:	08003ce9 	.word	0x08003ce9
 8003904:	08003929 	.word	0x08003929
 8003908:	08003ce9 	.word	0x08003ce9
 800390c:	08003ce9 	.word	0x08003ce9
 8003910:	08003ce9 	.word	0x08003ce9
 8003914:	08003b19 	.word	0x08003b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4bb9      	ldr	r3, [pc, #740]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800391e:	e1e7      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003920:	4bb8      	ldr	r3, [pc, #736]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003926:	e1e3      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4bb4      	ldr	r3, [pc, #720]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003934:	4bb1      	ldr	r3, [pc, #708]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d071      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003940:	4bae      	ldr	r3, [pc, #696]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003978:	0150      	lsls	r0, r2, #5
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4621      	mov	r1, r4
 8003980:	1a51      	subs	r1, r2, r1
 8003982:	6439      	str	r1, [r7, #64]	@ 0x40
 8003984:	4629      	mov	r1, r5
 8003986:	eb63 0301 	sbc.w	r3, r3, r1
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003998:	4649      	mov	r1, r9
 800399a:	018b      	lsls	r3, r1, #6
 800399c:	4641      	mov	r1, r8
 800399e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a2:	4641      	mov	r1, r8
 80039a4:	018a      	lsls	r2, r1, #6
 80039a6:	4641      	mov	r1, r8
 80039a8:	1a51      	subs	r1, r2, r1
 80039aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039ac:	4649      	mov	r1, r9
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039c0:	4649      	mov	r1, r9
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4641      	mov	r1, r8
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4622      	mov	r2, r4
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039da:	462b      	mov	r3, r5
 80039dc:	460a      	mov	r2, r1
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039f0:	4629      	mov	r1, r5
 80039f2:	024b      	lsls	r3, r1, #9
 80039f4:	4621      	mov	r1, r4
 80039f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fa:	4621      	mov	r1, r4
 80039fc:	024a      	lsls	r2, r1, #9
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a14:	f7fc fbf6 	bl	8000204 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a22:	e067      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3e:	2300      	movs	r3, #0
 8003a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	0159      	lsls	r1, r3, #5
 8003a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a58:	0150      	lsls	r0, r2, #5
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4621      	mov	r1, r4
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a78:	4649      	mov	r1, r9
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a82:	4641      	mov	r1, r8
 8003a84:	018a      	lsls	r2, r1, #6
 8003a86:	4641      	mov	r1, r8
 8003a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	4692      	mov	sl, r2
 8003aa8:	469b      	mov	fp, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ae6:	f7fc fb8d 	bl	8000204 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af4:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b16:	e0eb      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b38      	ldr	r3, [pc, #224]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06b      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b44:	2300      	movs	r3, #0
 8003b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	462b      	mov	r3, r5
 8003b50:	f04f 0000 	mov.w	r0, #0
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	0159      	lsls	r1, r3, #5
 8003b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5e:	0150      	lsls	r0, r2, #5
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4621      	mov	r1, r4
 8003b66:	1a51      	subs	r1, r2, r1
 8003b68:	61b9      	str	r1, [r7, #24]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b7e:	4659      	mov	r1, fp
 8003b80:	018b      	lsls	r3, r1, #6
 8003b82:	4651      	mov	r1, sl
 8003b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b88:	4651      	mov	r1, sl
 8003b8a:	018a      	lsls	r2, r1, #6
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b92:	4659      	mov	r1, fp
 8003b94:	eb63 0901 	sbc.w	r9, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bac:	4690      	mov	r8, r2
 8003bae:	4699      	mov	r9, r3
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	eb18 0303 	adds.w	r3, r8, r3
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	462b      	mov	r3, r5
 8003bba:	eb49 0303 	adc.w	r3, r9, r3
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bcc:	4629      	mov	r1, r5
 8003bce:	024b      	lsls	r3, r1, #9
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	024a      	lsls	r2, r1, #9
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003be2:	2200      	movs	r2, #0
 8003be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bec:	f7fc fb0a 	bl	8000204 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bfa:	e065      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4b3d      	ldr	r3, [pc, #244]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	4611      	mov	r1, r2
 8003c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c22:	4642      	mov	r2, r8
 8003c24:	464b      	mov	r3, r9
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	4649      	mov	r1, r9
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	1a54      	subs	r4, r2, r1
 8003c66:	4659      	mov	r1, fp
 8003c68:	eb63 0501 	sbc.w	r5, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cba:	f7fc faa3 	bl	8000204 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0f1b      	lsrs	r3, r3, #28
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	37b8      	adds	r7, #184	@ 0xb8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400

08003d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e28d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8083 	beq.w	8003e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d28:	4b94      	ldr	r3, [pc, #592]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d019      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d34:	4b91      	ldr	r3, [pc, #580]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d40:	4b8e      	ldr	r3, [pc, #568]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b84      	ldr	r3, [pc, #528]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x124>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e25a      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x90>
 8003d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xb4>
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fba8 	bl	8001530 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fba4 	bl	8001530 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e21f      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xdc>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fb94 	bl	8001530 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fb90 	bl	8001530 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e20b      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b57      	ldr	r3, [pc, #348]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x104>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d06f      	beq.n	8003f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e3a:	4b50      	ldr	r3, [pc, #320]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e46:	4b4d      	ldr	r3, [pc, #308]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b41      	ldr	r3, [pc, #260]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1d3      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4937      	ldr	r1, [pc, #220]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fb3d 	bl	8001530 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fd fb39 	bl	8001530 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1b4      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4925      	ldr	r1, [pc, #148]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fb1c 	bl	8001530 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fd fb18 	bl	8001530 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e193      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fd fafc 	bl	8001530 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fd faf8 	bl	8001530 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e173      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x234>
 8003f5a:	e01b      	b.n	8003f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fd fae5 	bl	8001530 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fae1 	bl	8001530 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d907      	bls.n	8003f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e15c      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470000 	.word	0x42470000
 8003f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b8a      	ldr	r3, [pc, #552]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8097 	beq.w	80040d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b83      	ldr	r3, [pc, #524]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd faa1 	bl	8001530 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd fa9d 	bl	8001530 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e118      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x31e>
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a65      	ldr	r2, [pc, #404]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x340>
 800402e:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a60      	ldr	r2, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70
 800403a:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	@ 0x70
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004048:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a59      	ldr	r2, [pc, #356]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
 8004054:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fa62 	bl	8001530 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fa5e 	bl	8001530 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0d7      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x368>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fa4c 	bl	8001530 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd fa48 	bl	8001530 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0c1      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	4b40      	ldr	r3, [pc, #256]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80ad 	beq.w	8004234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040da:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d060      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d145      	bne.n	800417a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fa1c 	bl	8001530 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fa18 	bl	8001530 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e093      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	491b      	ldr	r1, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd f9ed 	bl	8001530 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd f9e9 	bl	8001530 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e064      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x452>
 8004178:	e05c      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd f9d6 	bl	8001530 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd f9d2 	bl	8001530 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x480>
 80041a6:	e045      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e040      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <HAL_RCC_OscConfig+0x538>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d129      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d122      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d119      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d10f      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e042      	b.n	80042dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc ff44 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f82b 	bl	80042e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b0c0      	sub	sp, #256	@ 0x100
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800433c:	f021 010c 	bic.w	r1, r1, #12
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	ea40 0301 	orr.w	r3, r0, r1
 800436a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b8f      	ldr	r3, [pc, #572]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d005      	beq.n	8004384 <UART_SetConfig+0xa0>
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b8d      	ldr	r3, [pc, #564]	@ (80045b4 <UART_SetConfig+0x2d0>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d104      	bne.n	800438e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fe ff52 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004388:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800438c:	e003      	b.n	8004396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fe ff39 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004392:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a0:	f040 810c 	bne.w	80045bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043be:	415b      	adcs	r3, r3
 80043c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043c6:	4621      	mov	r1, r4
 80043c8:	eb12 0801 	adds.w	r8, r2, r1
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb43 0901 	adc.w	r9, r3, r1
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e6:	4690      	mov	r8, r2
 80043e8:	4699      	mov	r9, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	eb18 0303 	adds.w	r3, r8, r3
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043f4:	462b      	mov	r3, r5
 80043f6:	eb49 0303 	adc.w	r3, r9, r3
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800440a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800440e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004412:	460b      	mov	r3, r1
 8004414:	18db      	adds	r3, r3, r3
 8004416:	653b      	str	r3, [r7, #80]	@ 0x50
 8004418:	4613      	mov	r3, r2
 800441a:	eb42 0303 	adc.w	r3, r2, r3
 800441e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004428:	f7fb feec 	bl	8000204 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004432:	fba3 2302 	umull	r2, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	011c      	lsls	r4, r3, #4
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004444:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004454:	415b      	adcs	r3, r3
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800445c:	4641      	mov	r1, r8
 800445e:	eb12 0a01 	adds.w	sl, r2, r1
 8004462:	4649      	mov	r1, r9
 8004464:	eb43 0b01 	adc.w	fp, r3, r1
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447c:	4692      	mov	sl, r2
 800447e:	469b      	mov	fp, r3
 8004480:	4643      	mov	r3, r8
 8004482:	eb1a 0303 	adds.w	r3, sl, r3
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800448a:	464b      	mov	r3, r9
 800448c:	eb4b 0303 	adc.w	r3, fp, r3
 8004490:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044a8:	460b      	mov	r3, r1
 80044aa:	18db      	adds	r3, r3, r3
 80044ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ae:	4613      	mov	r3, r2
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044be:	f7fb fea1 	bl	8000204 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	4b3b      	ldr	r3, [pc, #236]	@ (80045b8 <UART_SetConfig+0x2d4>)
 80044ca:	fba3 2301 	umull	r2, r3, r3, r1
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2264      	movs	r2, #100	@ 0x64
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	1acb      	subs	r3, r1, r3
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044de:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 2302 	umull	r2, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044ec:	441c      	add	r4, r3
 80044ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	1891      	adds	r1, r2, r2
 8004506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004508:	415b      	adcs	r3, r3
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800450c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004510:	4641      	mov	r1, r8
 8004512:	1851      	adds	r1, r2, r1
 8004514:	6339      	str	r1, [r7, #48]	@ 0x30
 8004516:	4649      	mov	r1, r9
 8004518:	414b      	adcs	r3, r1
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004528:	4659      	mov	r1, fp
 800452a:	00cb      	lsls	r3, r1, #3
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004532:	4651      	mov	r1, sl
 8004534:	00ca      	lsls	r2, r1, #3
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	4603      	mov	r3, r0
 800453c:	4642      	mov	r2, r8
 800453e:	189b      	adds	r3, r3, r2
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004544:	464b      	mov	r3, r9
 8004546:	460a      	mov	r2, r1
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800455c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800457a:	f7fb fe43 	bl	8000204 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	@ 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	3332      	adds	r3, #50	@ 0x32
 8004596:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4422      	add	r2, r4
 80045aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ac:	e106      	b.n	80047bc <UART_SetConfig+0x4d8>
 80045ae:	bf00      	nop
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	6239      	str	r1, [r7, #32]
 80045d6:	415b      	adcs	r3, r3
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045de:	4641      	mov	r1, r8
 80045e0:	1854      	adds	r4, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb43 0501 	adc.w	r5, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	00eb      	lsls	r3, r5, #3
 80045f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	18e3      	adds	r3, r4, r3
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004604:	464b      	mov	r3, r9
 8004606:	eb45 0303 	adc.w	r3, r5, r3
 800460a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800461a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800462a:	4629      	mov	r1, r5
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004634:	4621      	mov	r1, r4
 8004636:	008a      	lsls	r2, r1, #2
 8004638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800463c:	f7fb fde2 	bl	8000204 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b60      	ldr	r3, [pc, #384]	@ (80047c8 <UART_SetConfig+0x4e4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800465c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	61b9      	str	r1, [r7, #24]
 8004668:	415b      	adcs	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004670:	4641      	mov	r1, r8
 8004672:	1851      	adds	r1, r2, r1
 8004674:	6139      	str	r1, [r7, #16]
 8004676:	4649      	mov	r1, r9
 8004678:	414b      	adcs	r3, r1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004688:	4659      	mov	r1, fp
 800468a:	00cb      	lsls	r3, r1, #3
 800468c:	4651      	mov	r1, sl
 800468e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004692:	4651      	mov	r1, sl
 8004694:	00ca      	lsls	r2, r1, #3
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	4603      	mov	r3, r0
 800469c:	4642      	mov	r2, r8
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046a4:	464b      	mov	r3, r9
 80046a6:	460a      	mov	r2, r1
 80046a8:	eb42 0303 	adc.w	r3, r2, r3
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046da:	f7fb fd93 	bl	8000204 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	4b38      	ldr	r3, [pc, #224]	@ (80047c8 <UART_SetConfig+0x4e4>)
 80046e6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2264      	movs	r2, #100	@ 0x64
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	@ 0x32
 80046f8:	4a33      	ldr	r2, [pc, #204]	@ (80047c8 <UART_SetConfig+0x4e4>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004704:	441c      	add	r4, r3
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	673b      	str	r3, [r7, #112]	@ 0x70
 800470e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	415b      	adcs	r3, r3
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004724:	4641      	mov	r1, r8
 8004726:	1851      	adds	r1, r2, r1
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	4649      	mov	r1, r9
 800472c:	414b      	adcs	r3, r1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800473c:	4659      	mov	r1, fp
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4651      	mov	r1, sl
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4642      	mov	r2, r8
 8004752:	189b      	adds	r3, r3, r2
 8004754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004756:	464b      	mov	r3, r9
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	663b      	str	r3, [r7, #96]	@ 0x60
 800476a:	667a      	str	r2, [r7, #100]	@ 0x64
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004778:	4649      	mov	r1, r9
 800477a:	008b      	lsls	r3, r1, #2
 800477c:	4641      	mov	r1, r8
 800477e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004782:	4641      	mov	r1, r8
 8004784:	008a      	lsls	r2, r1, #2
 8004786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800478a:	f7fb fd3b 	bl	8000204 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <UART_SetConfig+0x4e4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	@ 0x32
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <UART_SetConfig+0x4e4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4422      	add	r2, r4
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 001c 	add.w	r0, r7, #28
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d123      	bne.n	800482e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800480e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa9a 	bl	8004d5c <USB_CoreReset>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e01b      	b.n	8004866 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa8e 	bl	8004d5c <USB_CoreReset>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004844:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
 8004858:	e005      	b.n	8004866 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004866:	7fbb      	ldrb	r3, [r7, #30]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10b      	bne.n	8004884 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f043 0206 	orr.w	r2, r3, #6
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr

08004894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 0201 	bic.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d115      	bne.n	8004904 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048e4:	200a      	movs	r0, #10
 80048e6:	f7fc fe2f 	bl	8001548 <HAL_Delay>
      ms += 10U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	330a      	adds	r3, #10
 80048ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fa25 	bl	8004d40 <USB_GetMode>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d01e      	beq.n	800493a <USB_SetCurrentMode+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8004900:	d9f0      	bls.n	80048e4 <USB_SetCurrentMode+0x2e>
 8004902:	e01a      	b.n	800493a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d115      	bne.n	8004936 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004916:	200a      	movs	r0, #10
 8004918:	f7fc fe16 	bl	8001548 <HAL_Delay>
      ms += 10U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	330a      	adds	r3, #10
 8004920:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa0c 	bl	8004d40 <USB_GetMode>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <USB_SetCurrentMode+0x84>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2bc7      	cmp	r3, #199	@ 0xc7
 8004932:	d9f0      	bls.n	8004916 <USB_SetCurrentMode+0x60>
 8004934:	e001      	b.n	800493a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e005      	b.n	8004946 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2bc8      	cmp	r3, #200	@ 0xc8
 800493e:	d101      	bne.n	8004944 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004950:	b084      	sub	sp, #16
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800495e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e009      	b.n	8004984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3340      	adds	r3, #64	@ 0x40
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	2200      	movs	r2, #0
 800497c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b0e      	cmp	r3, #14
 8004988:	d9f2      	bls.n	8004970 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800498a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11c      	bne.n	80049cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a0:	f043 0302 	orr.w	r3, r3, #2
 80049a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e005      	b.n	80049d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049de:	461a      	mov	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10d      	bne.n	8004a08 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049f4:	2100      	movs	r1, #0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f968 	bl	8004ccc <USB_SetDevSpeed>
 80049fc:	e008      	b.n	8004a10 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049fe:	2101      	movs	r1, #1
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f963 	bl	8004ccc <USB_SetDevSpeed>
 8004a06:	e003      	b.n	8004a10 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a08:	2103      	movs	r1, #3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f95e 	bl	8004ccc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a10:	2110      	movs	r1, #16
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8fa 	bl	8004c0c <USB_FlushTxFifo>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f924 	bl	8004c70 <USB_FlushRxFifo>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a44:	461a      	mov	r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e043      	b.n	8004ae4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a72:	d118      	bne.n	8004aa6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e013      	b.n	8004ab8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e008      	b.n	8004ab8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004adc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ae8:	461a      	mov	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d3b5      	bcc.n	8004a5c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	e043      	b.n	8004b7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b0c:	d118      	bne.n	8004b40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	e013      	b.n	8004b52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e008      	b.n	8004b52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b82:	461a      	mov	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d3b5      	bcc.n	8004af6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004baa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f043 0210 	orr.w	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <USB_DevInit+0x2b8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f043 0208 	orr.w	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004be0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c04:	b004      	add	sp, #16
 8004c06:	4770      	bx	lr
 8004c08:	803c3800 	.word	0x803c3800

08004c0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c26:	d901      	bls.n	8004c2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e01b      	b.n	8004c64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	daf2      	bge.n	8004c1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	019b      	lsls	r3, r3, #6
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c50:	d901      	bls.n	8004c56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e006      	b.n	8004c64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d0f0      	beq.n	8004c44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c88:	d901      	bls.n	8004c8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e018      	b.n	8004cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	daf2      	bge.n	8004c7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cac:	d901      	bls.n	8004cb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e006      	b.n	8004cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d0f0      	beq.n	8004ca0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d74:	d901      	bls.n	8004d7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e01b      	b.n	8004db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	daf2      	bge.n	8004d68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d9e:	d901      	bls.n	8004da4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d0f0      	beq.n	8004d92 <USB_CoreReset+0x36>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <std>:
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dce:	6083      	str	r3, [r0, #8]
 8004dd0:	8181      	strh	r1, [r0, #12]
 8004dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dd4:	81c2      	strh	r2, [r0, #14]
 8004dd6:	6183      	str	r3, [r0, #24]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	2208      	movs	r2, #8
 8004ddc:	305c      	adds	r0, #92	@ 0x5c
 8004dde:	f000 f9e7 	bl	80051b0 <memset>
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <std+0x58>)
 8004de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <std+0x5c>)
 8004de8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <std+0x60>)
 8004dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <std+0x64>)
 8004df0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <std+0x68>)
 8004df4:	6224      	str	r4, [r4, #32]
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d006      	beq.n	8004e08 <std+0x48>
 8004dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dfe:	4294      	cmp	r4, r2
 8004e00:	d002      	beq.n	8004e08 <std+0x48>
 8004e02:	33d0      	adds	r3, #208	@ 0xd0
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d105      	bne.n	8004e14 <std+0x54>
 8004e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e10:	f000 ba46 	b.w	80052a0 <__retarget_lock_init_recursive>
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	bf00      	nop
 8004e18:	08005001 	.word	0x08005001
 8004e1c:	08005023 	.word	0x08005023
 8004e20:	0800505b 	.word	0x0800505b
 8004e24:	0800507f 	.word	0x0800507f
 8004e28:	20000750 	.word	0x20000750

08004e2c <stdio_exit_handler>:
 8004e2c:	4a02      	ldr	r2, [pc, #8]	@ (8004e38 <stdio_exit_handler+0xc>)
 8004e2e:	4903      	ldr	r1, [pc, #12]	@ (8004e3c <stdio_exit_handler+0x10>)
 8004e30:	4803      	ldr	r0, [pc, #12]	@ (8004e40 <stdio_exit_handler+0x14>)
 8004e32:	f000 b869 	b.w	8004f08 <_fwalk_sglue>
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	080055a1 	.word	0x080055a1
 8004e40:	2000001c 	.word	0x2000001c

08004e44 <cleanup_stdio>:
 8004e44:	6841      	ldr	r1, [r0, #4]
 8004e46:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <cleanup_stdio+0x34>)
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	d001      	beq.n	8004e54 <cleanup_stdio+0x10>
 8004e50:	f000 fba6 	bl	80055a0 <_fflush_r>
 8004e54:	68a1      	ldr	r1, [r4, #8]
 8004e56:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <cleanup_stdio+0x38>)
 8004e58:	4299      	cmp	r1, r3
 8004e5a:	d002      	beq.n	8004e62 <cleanup_stdio+0x1e>
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 fb9f 	bl	80055a0 <_fflush_r>
 8004e62:	68e1      	ldr	r1, [r4, #12]
 8004e64:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <cleanup_stdio+0x3c>)
 8004e66:	4299      	cmp	r1, r3
 8004e68:	d004      	beq.n	8004e74 <cleanup_stdio+0x30>
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e70:	f000 bb96 	b.w	80055a0 <_fflush_r>
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	20000750 	.word	0x20000750
 8004e7c:	200007b8 	.word	0x200007b8
 8004e80:	20000820 	.word	0x20000820

08004e84 <global_stdio_init.part.0>:
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <global_stdio_init.part.0+0x30>)
 8004e88:	4c0b      	ldr	r4, [pc, #44]	@ (8004eb8 <global_stdio_init.part.0+0x34>)
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <global_stdio_init.part.0+0x38>)
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	2200      	movs	r2, #0
 8004e92:	2104      	movs	r1, #4
 8004e94:	f7ff ff94 	bl	8004dc0 <std>
 8004e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2109      	movs	r1, #9
 8004ea0:	f7ff ff8e 	bl	8004dc0 <std>
 8004ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eae:	2112      	movs	r1, #18
 8004eb0:	f7ff bf86 	b.w	8004dc0 <std>
 8004eb4:	20000888 	.word	0x20000888
 8004eb8:	20000750 	.word	0x20000750
 8004ebc:	08004e2d 	.word	0x08004e2d

08004ec0 <__sfp_lock_acquire>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	@ (8004ec8 <__sfp_lock_acquire+0x8>)
 8004ec2:	f000 b9ee 	b.w	80052a2 <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20000891 	.word	0x20000891

08004ecc <__sfp_lock_release>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	@ (8004ed4 <__sfp_lock_release+0x8>)
 8004ece:	f000 b9e9 	b.w	80052a4 <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000891 	.word	0x20000891

08004ed8 <__sinit>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4604      	mov	r4, r0
 8004edc:	f7ff fff0 	bl	8004ec0 <__sfp_lock_acquire>
 8004ee0:	6a23      	ldr	r3, [r4, #32]
 8004ee2:	b11b      	cbz	r3, 8004eec <__sinit+0x14>
 8004ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee8:	f7ff bff0 	b.w	8004ecc <__sfp_lock_release>
 8004eec:	4b04      	ldr	r3, [pc, #16]	@ (8004f00 <__sinit+0x28>)
 8004eee:	6223      	str	r3, [r4, #32]
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <__sinit+0x2c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f5      	bne.n	8004ee4 <__sinit+0xc>
 8004ef8:	f7ff ffc4 	bl	8004e84 <global_stdio_init.part.0>
 8004efc:	e7f2      	b.n	8004ee4 <__sinit+0xc>
 8004efe:	bf00      	nop
 8004f00:	08004e45 	.word	0x08004e45
 8004f04:	20000888 	.word	0x20000888

08004f08 <_fwalk_sglue>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	4688      	mov	r8, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	2600      	movs	r6, #0
 8004f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f18:	f1b9 0901 	subs.w	r9, r9, #1
 8004f1c:	d505      	bpl.n	8004f2a <_fwalk_sglue+0x22>
 8004f1e:	6824      	ldr	r4, [r4, #0]
 8004f20:	2c00      	cmp	r4, #0
 8004f22:	d1f7      	bne.n	8004f14 <_fwalk_sglue+0xc>
 8004f24:	4630      	mov	r0, r6
 8004f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d907      	bls.n	8004f40 <_fwalk_sglue+0x38>
 8004f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f34:	3301      	adds	r3, #1
 8004f36:	d003      	beq.n	8004f40 <_fwalk_sglue+0x38>
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c0      	blx	r8
 8004f3e:	4306      	orrs	r6, r0
 8004f40:	3568      	adds	r5, #104	@ 0x68
 8004f42:	e7e9      	b.n	8004f18 <_fwalk_sglue+0x10>

08004f44 <_puts_r>:
 8004f44:	6a03      	ldr	r3, [r0, #32]
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	6884      	ldr	r4, [r0, #8]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	b90b      	cbnz	r3, 8004f54 <_puts_r+0x10>
 8004f50:	f7ff ffc2 	bl	8004ed8 <__sinit>
 8004f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d405      	bmi.n	8004f66 <_puts_r+0x22>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	0598      	lsls	r0, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_puts_r+0x22>
 8004f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f62:	f000 f99e 	bl	80052a2 <__retarget_lock_acquire_recursive>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	0719      	lsls	r1, r3, #28
 8004f6a:	d502      	bpl.n	8004f72 <_puts_r+0x2e>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d135      	bne.n	8004fde <_puts_r+0x9a>
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f8c5 	bl	8005104 <__swsetup_r>
 8004f7a:	b380      	cbz	r0, 8004fde <_puts_r+0x9a>
 8004f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f82:	07da      	lsls	r2, r3, #31
 8004f84:	d405      	bmi.n	8004f92 <_puts_r+0x4e>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	059b      	lsls	r3, r3, #22
 8004f8a:	d402      	bmi.n	8004f92 <_puts_r+0x4e>
 8004f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8e:	f000 f989 	bl	80052a4 <__retarget_lock_release_recursive>
 8004f92:	4628      	mov	r0, r5
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da04      	bge.n	8004fa4 <_puts_r+0x60>
 8004f9a:	69a2      	ldr	r2, [r4, #24]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	dc17      	bgt.n	8004fd0 <_puts_r+0x8c>
 8004fa0:	290a      	cmp	r1, #10
 8004fa2:	d015      	beq.n	8004fd0 <_puts_r+0x8c>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	7019      	strb	r1, [r3, #0]
 8004fac:	68a3      	ldr	r3, [r4, #8]
 8004fae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	60a3      	str	r3, [r4, #8]
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d1ed      	bne.n	8004f96 <_puts_r+0x52>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da11      	bge.n	8004fe2 <_puts_r+0x9e>
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	210a      	movs	r1, #10
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f85f 	bl	8005086 <__swbuf_r>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d0d7      	beq.n	8004f7c <_puts_r+0x38>
 8004fcc:	250a      	movs	r5, #10
 8004fce:	e7d7      	b.n	8004f80 <_puts_r+0x3c>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f857 	bl	8005086 <__swbuf_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d1e7      	bne.n	8004fac <_puts_r+0x68>
 8004fdc:	e7ce      	b.n	8004f7c <_puts_r+0x38>
 8004fde:	3e01      	subs	r6, #1
 8004fe0:	e7e4      	b.n	8004fac <_puts_r+0x68>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	220a      	movs	r2, #10
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e7ee      	b.n	8004fcc <_puts_r+0x88>
	...

08004ff0 <puts>:
 8004ff0:	4b02      	ldr	r3, [pc, #8]	@ (8004ffc <puts+0xc>)
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f7ff bfa5 	b.w	8004f44 <_puts_r>
 8004ffa:	bf00      	nop
 8004ffc:	20000018 	.word	0x20000018

08005000 <__sread>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	f000 f8fc 	bl	8005204 <_read_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	bfab      	itete	ge
 8005010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005012:	89a3      	ldrhlt	r3, [r4, #12]
 8005014:	181b      	addge	r3, r3, r0
 8005016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501a:	bfac      	ite	ge
 800501c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800501e:	81a3      	strhlt	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__swrite>:
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	461f      	mov	r7, r3
 8005028:	898b      	ldrh	r3, [r1, #12]
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	4605      	mov	r5, r0
 800502e:	460c      	mov	r4, r1
 8005030:	4616      	mov	r6, r2
 8005032:	d505      	bpl.n	8005040 <__swrite+0x1e>
 8005034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005038:	2302      	movs	r3, #2
 800503a:	2200      	movs	r2, #0
 800503c:	f000 f8d0 	bl	80051e0 <_lseek_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	4628      	mov	r0, r5
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f000 b8e7 	b.w	8005228 <_write_r>

0800505a <__sseek>:
 800505a:	b510      	push	{r4, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 f8bd 	bl	80051e0 <_lseek_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	bf15      	itete	ne
 800506c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800506e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005076:	81a3      	strheq	r3, [r4, #12]
 8005078:	bf18      	it	ne
 800507a:	81a3      	strhne	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__sclose>:
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 b89d 	b.w	80051c0 <_close_r>

08005086 <__swbuf_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	460e      	mov	r6, r1
 800508a:	4614      	mov	r4, r2
 800508c:	4605      	mov	r5, r0
 800508e:	b118      	cbz	r0, 8005098 <__swbuf_r+0x12>
 8005090:	6a03      	ldr	r3, [r0, #32]
 8005092:	b90b      	cbnz	r3, 8005098 <__swbuf_r+0x12>
 8005094:	f7ff ff20 	bl	8004ed8 <__sinit>
 8005098:	69a3      	ldr	r3, [r4, #24]
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	071a      	lsls	r2, r3, #28
 80050a0:	d501      	bpl.n	80050a6 <__swbuf_r+0x20>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	b943      	cbnz	r3, 80050b8 <__swbuf_r+0x32>
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f82b 	bl	8005104 <__swsetup_r>
 80050ae:	b118      	cbz	r0, 80050b8 <__swbuf_r+0x32>
 80050b0:	f04f 37ff 	mov.w	r7, #4294967295
 80050b4:	4638      	mov	r0, r7
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	6922      	ldr	r2, [r4, #16]
 80050bc:	1a98      	subs	r0, r3, r2
 80050be:	6963      	ldr	r3, [r4, #20]
 80050c0:	b2f6      	uxtb	r6, r6
 80050c2:	4283      	cmp	r3, r0
 80050c4:	4637      	mov	r7, r6
 80050c6:	dc05      	bgt.n	80050d4 <__swbuf_r+0x4e>
 80050c8:	4621      	mov	r1, r4
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 fa68 	bl	80055a0 <_fflush_r>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1ed      	bne.n	80050b0 <__swbuf_r+0x2a>
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60a3      	str	r3, [r4, #8]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	6022      	str	r2, [r4, #0]
 80050e0:	701e      	strb	r6, [r3, #0]
 80050e2:	6962      	ldr	r2, [r4, #20]
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d004      	beq.n	80050f4 <__swbuf_r+0x6e>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	07db      	lsls	r3, r3, #31
 80050ee:	d5e1      	bpl.n	80050b4 <__swbuf_r+0x2e>
 80050f0:	2e0a      	cmp	r6, #10
 80050f2:	d1df      	bne.n	80050b4 <__swbuf_r+0x2e>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fa52 	bl	80055a0 <_fflush_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d0d9      	beq.n	80050b4 <__swbuf_r+0x2e>
 8005100:	e7d6      	b.n	80050b0 <__swbuf_r+0x2a>
	...

08005104 <__swsetup_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4b29      	ldr	r3, [pc, #164]	@ (80051ac <__swsetup_r+0xa8>)
 8005108:	4605      	mov	r5, r0
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	460c      	mov	r4, r1
 800510e:	b118      	cbz	r0, 8005118 <__swsetup_r+0x14>
 8005110:	6a03      	ldr	r3, [r0, #32]
 8005112:	b90b      	cbnz	r3, 8005118 <__swsetup_r+0x14>
 8005114:	f7ff fee0 	bl	8004ed8 <__sinit>
 8005118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511c:	0719      	lsls	r1, r3, #28
 800511e:	d422      	bmi.n	8005166 <__swsetup_r+0x62>
 8005120:	06da      	lsls	r2, r3, #27
 8005122:	d407      	bmi.n	8005134 <__swsetup_r+0x30>
 8005124:	2209      	movs	r2, #9
 8005126:	602a      	str	r2, [r5, #0]
 8005128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	f04f 30ff 	mov.w	r0, #4294967295
 8005132:	e033      	b.n	800519c <__swsetup_r+0x98>
 8005134:	0758      	lsls	r0, r3, #29
 8005136:	d512      	bpl.n	800515e <__swsetup_r+0x5a>
 8005138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800513a:	b141      	cbz	r1, 800514e <__swsetup_r+0x4a>
 800513c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005140:	4299      	cmp	r1, r3
 8005142:	d002      	beq.n	800514a <__swsetup_r+0x46>
 8005144:	4628      	mov	r0, r5
 8005146:	f000 f8af 	bl	80052a8 <_free_r>
 800514a:	2300      	movs	r3, #0
 800514c:	6363      	str	r3, [r4, #52]	@ 0x34
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	2300      	movs	r3, #0
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	b94b      	cbnz	r3, 800517e <__swsetup_r+0x7a>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d003      	beq.n	800517e <__swsetup_r+0x7a>
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 fa5f 	bl	800563c <__smakebuf_r>
 800517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005182:	f013 0201 	ands.w	r2, r3, #1
 8005186:	d00a      	beq.n	800519e <__swsetup_r+0x9a>
 8005188:	2200      	movs	r2, #0
 800518a:	60a2      	str	r2, [r4, #8]
 800518c:	6962      	ldr	r2, [r4, #20]
 800518e:	4252      	negs	r2, r2
 8005190:	61a2      	str	r2, [r4, #24]
 8005192:	6922      	ldr	r2, [r4, #16]
 8005194:	b942      	cbnz	r2, 80051a8 <__swsetup_r+0xa4>
 8005196:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800519a:	d1c5      	bne.n	8005128 <__swsetup_r+0x24>
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	0799      	lsls	r1, r3, #30
 80051a0:	bf58      	it	pl
 80051a2:	6962      	ldrpl	r2, [r4, #20]
 80051a4:	60a2      	str	r2, [r4, #8]
 80051a6:	e7f4      	b.n	8005192 <__swsetup_r+0x8e>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e7f7      	b.n	800519c <__swsetup_r+0x98>
 80051ac:	20000018 	.word	0x20000018

080051b0 <memset>:
 80051b0:	4402      	add	r2, r0
 80051b2:	4603      	mov	r3, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <_close_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d06      	ldr	r5, [pc, #24]	@ (80051dc <_close_r+0x1c>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7fc f8a3 	bl	8001316 <_close>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_close_r+0x1a>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_close_r+0x1a>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	2000088c 	.word	0x2000088c

080051e0 <_lseek_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	@ (8005200 <_lseek_r+0x20>)
 80051e4:	4604      	mov	r4, r0
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	602a      	str	r2, [r5, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fc f8b8 	bl	8001364 <_lseek>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_lseek_r+0x1e>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_lseek_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	2000088c 	.word	0x2000088c

08005204 <_read_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	@ (8005224 <_read_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fc f862 	bl	80012dc <_read>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_read_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_read_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	2000088c 	.word	0x2000088c

08005228 <_write_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	@ (8005248 <_write_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fb f983 	bl	8000542 <_write>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_write_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_write_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	2000088c 	.word	0x2000088c

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	@ (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000018 	.word	0x20000018

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	@ (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	@ (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	@ (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	@ (800529c <__libc_init_array+0x44>)
 800526c:	f000 fa54 	bl	8005718 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	0800577c 	.word	0x0800577c
 8005294:	0800577c 	.word	0x0800577c
 8005298:	0800577c 	.word	0x0800577c
 800529c:	08005780 	.word	0x08005780

080052a0 <__retarget_lock_init_recursive>:
 80052a0:	4770      	bx	lr

080052a2 <__retarget_lock_acquire_recursive>:
 80052a2:	4770      	bx	lr

080052a4 <__retarget_lock_release_recursive>:
 80052a4:	4770      	bx	lr
	...

080052a8 <_free_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d041      	beq.n	8005334 <_free_r+0x8c>
 80052b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b4:	1f0c      	subs	r4, r1, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	18e4      	addlt	r4, r4, r3
 80052bc:	f000 f8e0 	bl	8005480 <__malloc_lock>
 80052c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <_free_r+0x90>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	b933      	cbnz	r3, 80052d4 <_free_r+0x2c>
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	4628      	mov	r0, r5
 80052cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d0:	f000 b8dc 	b.w	800548c <__malloc_unlock>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d908      	bls.n	80052ea <_free_r+0x42>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	1821      	adds	r1, r4, r0
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	e7ed      	b.n	80052c6 <_free_r+0x1e>
 80052ea:	461a      	mov	r2, r3
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b10b      	cbz	r3, 80052f4 <_free_r+0x4c>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d9fa      	bls.n	80052ea <_free_r+0x42>
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	1850      	adds	r0, r2, r1
 80052f8:	42a0      	cmp	r0, r4
 80052fa:	d10b      	bne.n	8005314 <_free_r+0x6c>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	4401      	add	r1, r0
 8005300:	1850      	adds	r0, r2, r1
 8005302:	4283      	cmp	r3, r0
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	d1e0      	bne.n	80052ca <_free_r+0x22>
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	4408      	add	r0, r1
 8005310:	6010      	str	r0, [r2, #0]
 8005312:	e7da      	b.n	80052ca <_free_r+0x22>
 8005314:	d902      	bls.n	800531c <_free_r+0x74>
 8005316:	230c      	movs	r3, #12
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	e7d6      	b.n	80052ca <_free_r+0x22>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf04      	itt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	bf04      	itt	eq
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6054      	str	r4, [r2, #4]
 8005332:	e7ca      	b.n	80052ca <_free_r+0x22>
 8005334:	bd38      	pop	{r3, r4, r5, pc}
 8005336:	bf00      	nop
 8005338:	20000898 	.word	0x20000898

0800533c <sbrk_aligned>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0f      	ldr	r6, [pc, #60]	@ (800537c <sbrk_aligned+0x40>)
 8005340:	460c      	mov	r4, r1
 8005342:	6831      	ldr	r1, [r6, #0]
 8005344:	4605      	mov	r5, r0
 8005346:	b911      	cbnz	r1, 800534e <sbrk_aligned+0x12>
 8005348:	f000 f9d6 	bl	80056f8 <_sbrk_r>
 800534c:	6030      	str	r0, [r6, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 f9d1 	bl	80056f8 <_sbrk_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d103      	bne.n	8005362 <sbrk_aligned+0x26>
 800535a:	f04f 34ff 	mov.w	r4, #4294967295
 800535e:	4620      	mov	r0, r4
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	1cc4      	adds	r4, r0, #3
 8005364:	f024 0403 	bic.w	r4, r4, #3
 8005368:	42a0      	cmp	r0, r4
 800536a:	d0f8      	beq.n	800535e <sbrk_aligned+0x22>
 800536c:	1a21      	subs	r1, r4, r0
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f9c2 	bl	80056f8 <_sbrk_r>
 8005374:	3001      	adds	r0, #1
 8005376:	d1f2      	bne.n	800535e <sbrk_aligned+0x22>
 8005378:	e7ef      	b.n	800535a <sbrk_aligned+0x1e>
 800537a:	bf00      	nop
 800537c:	20000894 	.word	0x20000894

08005380 <_malloc_r>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	1ccd      	adds	r5, r1, #3
 8005386:	f025 0503 	bic.w	r5, r5, #3
 800538a:	3508      	adds	r5, #8
 800538c:	2d0c      	cmp	r5, #12
 800538e:	bf38      	it	cc
 8005390:	250c      	movcc	r5, #12
 8005392:	2d00      	cmp	r5, #0
 8005394:	4606      	mov	r6, r0
 8005396:	db01      	blt.n	800539c <_malloc_r+0x1c>
 8005398:	42a9      	cmp	r1, r5
 800539a:	d904      	bls.n	80053a6 <_malloc_r+0x26>
 800539c:	230c      	movs	r3, #12
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	2000      	movs	r0, #0
 80053a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800547c <_malloc_r+0xfc>
 80053aa:	f000 f869 	bl	8005480 <__malloc_lock>
 80053ae:	f8d8 3000 	ldr.w	r3, [r8]
 80053b2:	461c      	mov	r4, r3
 80053b4:	bb44      	cbnz	r4, 8005408 <_malloc_r+0x88>
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff ffbf 	bl	800533c <sbrk_aligned>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	4604      	mov	r4, r0
 80053c2:	d158      	bne.n	8005476 <_malloc_r+0xf6>
 80053c4:	f8d8 4000 	ldr.w	r4, [r8]
 80053c8:	4627      	mov	r7, r4
 80053ca:	2f00      	cmp	r7, #0
 80053cc:	d143      	bne.n	8005456 <_malloc_r+0xd6>
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d04b      	beq.n	800546a <_malloc_r+0xea>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	4639      	mov	r1, r7
 80053d6:	4630      	mov	r0, r6
 80053d8:	eb04 0903 	add.w	r9, r4, r3
 80053dc:	f000 f98c 	bl	80056f8 <_sbrk_r>
 80053e0:	4581      	cmp	r9, r0
 80053e2:	d142      	bne.n	800546a <_malloc_r+0xea>
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	1a6d      	subs	r5, r5, r1
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff ffa6 	bl	800533c <sbrk_aligned>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d03a      	beq.n	800546a <_malloc_r+0xea>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	442b      	add	r3, r5
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	f8d8 3000 	ldr.w	r3, [r8]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	bb62      	cbnz	r2, 800545c <_malloc_r+0xdc>
 8005402:	f8c8 7000 	str.w	r7, [r8]
 8005406:	e00f      	b.n	8005428 <_malloc_r+0xa8>
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	1b52      	subs	r2, r2, r5
 800540c:	d420      	bmi.n	8005450 <_malloc_r+0xd0>
 800540e:	2a0b      	cmp	r2, #11
 8005410:	d917      	bls.n	8005442 <_malloc_r+0xc2>
 8005412:	1961      	adds	r1, r4, r5
 8005414:	42a3      	cmp	r3, r4
 8005416:	6025      	str	r5, [r4, #0]
 8005418:	bf18      	it	ne
 800541a:	6059      	strne	r1, [r3, #4]
 800541c:	6863      	ldr	r3, [r4, #4]
 800541e:	bf08      	it	eq
 8005420:	f8c8 1000 	streq.w	r1, [r8]
 8005424:	5162      	str	r2, [r4, r5]
 8005426:	604b      	str	r3, [r1, #4]
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f82f 	bl	800548c <__malloc_unlock>
 800542e:	f104 000b 	add.w	r0, r4, #11
 8005432:	1d23      	adds	r3, r4, #4
 8005434:	f020 0007 	bic.w	r0, r0, #7
 8005438:	1ac2      	subs	r2, r0, r3
 800543a:	bf1c      	itt	ne
 800543c:	1a1b      	subne	r3, r3, r0
 800543e:	50a3      	strne	r3, [r4, r2]
 8005440:	e7af      	b.n	80053a2 <_malloc_r+0x22>
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	42a3      	cmp	r3, r4
 8005446:	bf0c      	ite	eq
 8005448:	f8c8 2000 	streq.w	r2, [r8]
 800544c:	605a      	strne	r2, [r3, #4]
 800544e:	e7eb      	b.n	8005428 <_malloc_r+0xa8>
 8005450:	4623      	mov	r3, r4
 8005452:	6864      	ldr	r4, [r4, #4]
 8005454:	e7ae      	b.n	80053b4 <_malloc_r+0x34>
 8005456:	463c      	mov	r4, r7
 8005458:	687f      	ldr	r7, [r7, #4]
 800545a:	e7b6      	b.n	80053ca <_malloc_r+0x4a>
 800545c:	461a      	mov	r2, r3
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	42a3      	cmp	r3, r4
 8005462:	d1fb      	bne.n	800545c <_malloc_r+0xdc>
 8005464:	2300      	movs	r3, #0
 8005466:	6053      	str	r3, [r2, #4]
 8005468:	e7de      	b.n	8005428 <_malloc_r+0xa8>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	4630      	mov	r0, r6
 8005470:	f000 f80c 	bl	800548c <__malloc_unlock>
 8005474:	e794      	b.n	80053a0 <_malloc_r+0x20>
 8005476:	6005      	str	r5, [r0, #0]
 8005478:	e7d6      	b.n	8005428 <_malloc_r+0xa8>
 800547a:	bf00      	nop
 800547c:	20000898 	.word	0x20000898

08005480 <__malloc_lock>:
 8005480:	4801      	ldr	r0, [pc, #4]	@ (8005488 <__malloc_lock+0x8>)
 8005482:	f7ff bf0e 	b.w	80052a2 <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	20000890 	.word	0x20000890

0800548c <__malloc_unlock>:
 800548c:	4801      	ldr	r0, [pc, #4]	@ (8005494 <__malloc_unlock+0x8>)
 800548e:	f7ff bf09 	b.w	80052a4 <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	20000890 	.word	0x20000890

08005498 <__sflush_r>:
 8005498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	0716      	lsls	r6, r2, #28
 80054a2:	4605      	mov	r5, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	d454      	bmi.n	8005552 <__sflush_r+0xba>
 80054a8:	684b      	ldr	r3, [r1, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dc02      	bgt.n	80054b4 <__sflush_r+0x1c>
 80054ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dd48      	ble.n	8005546 <__sflush_r+0xae>
 80054b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	d045      	beq.n	8005546 <__sflush_r+0xae>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054c0:	682f      	ldr	r7, [r5, #0]
 80054c2:	6a21      	ldr	r1, [r4, #32]
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	d030      	beq.n	800552a <__sflush_r+0x92>
 80054c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	0759      	lsls	r1, r3, #29
 80054ce:	d505      	bpl.n	80054dc <__sflush_r+0x44>
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054d6:	b10b      	cbz	r3, 80054dc <__sflush_r+0x44>
 80054d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054e0:	6a21      	ldr	r1, [r4, #32]
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b0      	blx	r6
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	d106      	bne.n	80054fa <__sflush_r+0x62>
 80054ec:	6829      	ldr	r1, [r5, #0]
 80054ee:	291d      	cmp	r1, #29
 80054f0:	d82b      	bhi.n	800554a <__sflush_r+0xb2>
 80054f2:	4a2a      	ldr	r2, [pc, #168]	@ (800559c <__sflush_r+0x104>)
 80054f4:	410a      	asrs	r2, r1
 80054f6:	07d6      	lsls	r6, r2, #31
 80054f8:	d427      	bmi.n	800554a <__sflush_r+0xb2>
 80054fa:	2200      	movs	r2, #0
 80054fc:	6062      	str	r2, [r4, #4]
 80054fe:	04d9      	lsls	r1, r3, #19
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	d504      	bpl.n	8005510 <__sflush_r+0x78>
 8005506:	1c42      	adds	r2, r0, #1
 8005508:	d101      	bne.n	800550e <__sflush_r+0x76>
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	b903      	cbnz	r3, 8005510 <__sflush_r+0x78>
 800550e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005512:	602f      	str	r7, [r5, #0]
 8005514:	b1b9      	cbz	r1, 8005546 <__sflush_r+0xae>
 8005516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800551a:	4299      	cmp	r1, r3
 800551c:	d002      	beq.n	8005524 <__sflush_r+0x8c>
 800551e:	4628      	mov	r0, r5
 8005520:	f7ff fec2 	bl	80052a8 <_free_r>
 8005524:	2300      	movs	r3, #0
 8005526:	6363      	str	r3, [r4, #52]	@ 0x34
 8005528:	e00d      	b.n	8005546 <__sflush_r+0xae>
 800552a:	2301      	movs	r3, #1
 800552c:	4628      	mov	r0, r5
 800552e:	47b0      	blx	r6
 8005530:	4602      	mov	r2, r0
 8005532:	1c50      	adds	r0, r2, #1
 8005534:	d1c9      	bne.n	80054ca <__sflush_r+0x32>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0c6      	beq.n	80054ca <__sflush_r+0x32>
 800553c:	2b1d      	cmp	r3, #29
 800553e:	d001      	beq.n	8005544 <__sflush_r+0xac>
 8005540:	2b16      	cmp	r3, #22
 8005542:	d11e      	bne.n	8005582 <__sflush_r+0xea>
 8005544:	602f      	str	r7, [r5, #0]
 8005546:	2000      	movs	r0, #0
 8005548:	e022      	b.n	8005590 <__sflush_r+0xf8>
 800554a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800554e:	b21b      	sxth	r3, r3
 8005550:	e01b      	b.n	800558a <__sflush_r+0xf2>
 8005552:	690f      	ldr	r7, [r1, #16]
 8005554:	2f00      	cmp	r7, #0
 8005556:	d0f6      	beq.n	8005546 <__sflush_r+0xae>
 8005558:	0793      	lsls	r3, r2, #30
 800555a:	680e      	ldr	r6, [r1, #0]
 800555c:	bf08      	it	eq
 800555e:	694b      	ldreq	r3, [r1, #20]
 8005560:	600f      	str	r7, [r1, #0]
 8005562:	bf18      	it	ne
 8005564:	2300      	movne	r3, #0
 8005566:	eba6 0807 	sub.w	r8, r6, r7
 800556a:	608b      	str	r3, [r1, #8]
 800556c:	f1b8 0f00 	cmp.w	r8, #0
 8005570:	dde9      	ble.n	8005546 <__sflush_r+0xae>
 8005572:	6a21      	ldr	r1, [r4, #32]
 8005574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005576:	4643      	mov	r3, r8
 8005578:	463a      	mov	r2, r7
 800557a:	4628      	mov	r0, r5
 800557c:	47b0      	blx	r6
 800557e:	2800      	cmp	r0, #0
 8005580:	dc08      	bgt.n	8005594 <__sflush_r+0xfc>
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005594:	4407      	add	r7, r0
 8005596:	eba8 0800 	sub.w	r8, r8, r0
 800559a:	e7e7      	b.n	800556c <__sflush_r+0xd4>
 800559c:	dfbffffe 	.word	0xdfbffffe

080055a0 <_fflush_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	690b      	ldr	r3, [r1, #16]
 80055a4:	4605      	mov	r5, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	b913      	cbnz	r3, 80055b0 <_fflush_r+0x10>
 80055aa:	2500      	movs	r5, #0
 80055ac:	4628      	mov	r0, r5
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	b118      	cbz	r0, 80055ba <_fflush_r+0x1a>
 80055b2:	6a03      	ldr	r3, [r0, #32]
 80055b4:	b90b      	cbnz	r3, 80055ba <_fflush_r+0x1a>
 80055b6:	f7ff fc8f 	bl	8004ed8 <__sinit>
 80055ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f3      	beq.n	80055aa <_fflush_r+0xa>
 80055c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055c4:	07d0      	lsls	r0, r2, #31
 80055c6:	d404      	bmi.n	80055d2 <_fflush_r+0x32>
 80055c8:	0599      	lsls	r1, r3, #22
 80055ca:	d402      	bmi.n	80055d2 <_fflush_r+0x32>
 80055cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ce:	f7ff fe68 	bl	80052a2 <__retarget_lock_acquire_recursive>
 80055d2:	4628      	mov	r0, r5
 80055d4:	4621      	mov	r1, r4
 80055d6:	f7ff ff5f 	bl	8005498 <__sflush_r>
 80055da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055dc:	07da      	lsls	r2, r3, #31
 80055de:	4605      	mov	r5, r0
 80055e0:	d4e4      	bmi.n	80055ac <_fflush_r+0xc>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	059b      	lsls	r3, r3, #22
 80055e6:	d4e1      	bmi.n	80055ac <_fflush_r+0xc>
 80055e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ea:	f7ff fe5b 	bl	80052a4 <__retarget_lock_release_recursive>
 80055ee:	e7dd      	b.n	80055ac <_fflush_r+0xc>

080055f0 <__swhatbuf_r>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f8:	2900      	cmp	r1, #0
 80055fa:	b096      	sub	sp, #88	@ 0x58
 80055fc:	4615      	mov	r5, r2
 80055fe:	461e      	mov	r6, r3
 8005600:	da0d      	bge.n	800561e <__swhatbuf_r+0x2e>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	bf14      	ite	ne
 800560e:	2340      	movne	r3, #64	@ 0x40
 8005610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005614:	2000      	movs	r0, #0
 8005616:	6031      	str	r1, [r6, #0]
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	b016      	add	sp, #88	@ 0x58
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	466a      	mov	r2, sp
 8005620:	f000 f848 	bl	80056b4 <_fstat_r>
 8005624:	2800      	cmp	r0, #0
 8005626:	dbec      	blt.n	8005602 <__swhatbuf_r+0x12>
 8005628:	9901      	ldr	r1, [sp, #4]
 800562a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800562e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005632:	4259      	negs	r1, r3
 8005634:	4159      	adcs	r1, r3
 8005636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563a:	e7eb      	b.n	8005614 <__swhatbuf_r+0x24>

0800563c <__smakebuf_r>:
 800563c:	898b      	ldrh	r3, [r1, #12]
 800563e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005640:	079d      	lsls	r5, r3, #30
 8005642:	4606      	mov	r6, r0
 8005644:	460c      	mov	r4, r1
 8005646:	d507      	bpl.n	8005658 <__smakebuf_r+0x1c>
 8005648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	2301      	movs	r3, #1
 8005652:	6163      	str	r3, [r4, #20]
 8005654:	b003      	add	sp, #12
 8005656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005658:	ab01      	add	r3, sp, #4
 800565a:	466a      	mov	r2, sp
 800565c:	f7ff ffc8 	bl	80055f0 <__swhatbuf_r>
 8005660:	9f00      	ldr	r7, [sp, #0]
 8005662:	4605      	mov	r5, r0
 8005664:	4639      	mov	r1, r7
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff fe8a 	bl	8005380 <_malloc_r>
 800566c:	b948      	cbnz	r0, 8005682 <__smakebuf_r+0x46>
 800566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005672:	059a      	lsls	r2, r3, #22
 8005674:	d4ee      	bmi.n	8005654 <__smakebuf_r+0x18>
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	f043 0302 	orr.w	r3, r3, #2
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	e7e2      	b.n	8005648 <__smakebuf_r+0xc>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	6020      	str	r0, [r4, #0]
 8005686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	9b01      	ldr	r3, [sp, #4]
 800568e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005692:	b15b      	cbz	r3, 80056ac <__smakebuf_r+0x70>
 8005694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005698:	4630      	mov	r0, r6
 800569a:	f000 f81d 	bl	80056d8 <_isatty_r>
 800569e:	b128      	cbz	r0, 80056ac <__smakebuf_r+0x70>
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	431d      	orrs	r5, r3
 80056b0:	81a5      	strh	r5, [r4, #12]
 80056b2:	e7cf      	b.n	8005654 <__smakebuf_r+0x18>

080056b4 <_fstat_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d07      	ldr	r5, [pc, #28]	@ (80056d4 <_fstat_r+0x20>)
 80056b8:	2300      	movs	r3, #0
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	f7fb fe34 	bl	800132e <_fstat>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d102      	bne.n	80056d0 <_fstat_r+0x1c>
 80056ca:	682b      	ldr	r3, [r5, #0]
 80056cc:	b103      	cbz	r3, 80056d0 <_fstat_r+0x1c>
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	bd38      	pop	{r3, r4, r5, pc}
 80056d2:	bf00      	nop
 80056d4:	2000088c 	.word	0x2000088c

080056d8 <_isatty_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d06      	ldr	r5, [pc, #24]	@ (80056f4 <_isatty_r+0x1c>)
 80056dc:	2300      	movs	r3, #0
 80056de:	4604      	mov	r4, r0
 80056e0:	4608      	mov	r0, r1
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	f7fb fe33 	bl	800134e <_isatty>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_isatty_r+0x1a>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_isatty_r+0x1a>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	2000088c 	.word	0x2000088c

080056f8 <_sbrk_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	@ (8005714 <_sbrk_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fb fe3c 	bl	8001380 <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_sbrk_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_sbrk_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	2000088c 	.word	0x2000088c

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
