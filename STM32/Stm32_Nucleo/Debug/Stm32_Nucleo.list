
Stm32_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  2000000c  080046d4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  080046d4  000066b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011824  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a3  00000000  00000000  00017860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00019d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbb  00000000  00000000  0001ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bd8  00000000  00000000  0001b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a62  00000000  00000000  0003f39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc89e  00000000  00000000  00052dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f69b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  0012f6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013375c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004688 	.word	0x08004688

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004688 	.word	0x08004688

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fe9a 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f83e 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa56 	bl	80009b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f9fc 	bl	8000900 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 fa24 	bl	8000954 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800050c:	f000 f946 	bl	800079c <MX_CAN1_Init>
  MX_ADC2_Init();
 8000510:	f000 f8a0 	bl	8000654 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000514:	f000 f8f0 	bl	80006f8 <MX_ADC3_Init>
  MX_I2C2_Init();
 8000518:	f000 f9c4 	bl	80008a4 <MX_I2C2_Init>
  MX_CAN2_Init();
 800051c:	f000 f98c 	bl	8000838 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000520:	4812      	ldr	r0, [pc, #72]	@ (800056c <main+0x78>)
 8000522:	f001 fb69 	bl	8001bf8 <HAL_CAN_Start>

  // Activation of notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <main+0x78>)
 800052a:	f001 fc79 	bl	8001e20 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1; //Length of Data we going to send
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <main+0x7c>)
 8000530:	2201      	movs	r2, #1
 8000532:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; // Basic Protocol keep 0
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <main+0x7c>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Use Standard instead of Extended ID
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <main+0x7c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; //sending Data
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <main+0x7c>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103; // This Device ID
 8000546:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <main+0x7c>)
 8000548:	f240 1203 	movw	r2, #259	@ 0x103
 800054c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <main+0x7c>)
 8000550:	2200      	movs	r2, #0
 8000552:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0xf3;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <main+0x80>)
 8000556:	22f3      	movs	r2, #243	@ 0xf3
 8000558:	701a      	strb	r2, [r3, #0]

  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <main+0x84>)
 800055c:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <main+0x80>)
 800055e:	4904      	ldr	r1, [pc, #16]	@ (8000570 <main+0x7c>)
 8000560:	4802      	ldr	r0, [pc, #8]	@ (800056c <main+0x78>)
 8000562:	f001 fb8d 	bl	8001c80 <HAL_CAN_AddTxMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <main+0x72>
 800056a:	bf00      	nop
 800056c:	200000b8 	.word	0x200000b8
 8000570:	20000688 	.word	0x20000688
 8000574:	200006a0 	.word	0x200006a0
 8000578:	200006a8 	.word	0x200006a8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	@ 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f84f 	bl	800462e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b29      	ldr	r3, [pc, #164]	@ (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	@ (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <SystemClock_Config+0xd4>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	@ 0xa8
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ffb7 	bl	8003578 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 faf2 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2105      	movs	r1, #5
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f92c 	bl	8002890 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 fadb 	bl	8000bf8 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	@ 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <MX_ADC2_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <MX_ADC2_Init+0x98>)
 800066e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000672:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <MX_ADC2_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_ADC2_Init+0x98>)
 8000696:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <MX_ADC2_Init+0xa0>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_ADC2_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_ADC2_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_ADC2_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_ADC2_Init+0x98>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <MX_ADC2_Init+0x98>)
 80006b6:	f000 fe51 	bl	800135c <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 fa9a 	bl	8000bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c4:	2306      	movs	r3, #6
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_ADC2_Init+0x98>)
 80006d6:	f000 fe85 	bl	80013e4 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fa8a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40012100 	.word	0x40012100
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC3_Init+0x98>)
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <MX_ADC3_Init+0x9c>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000712:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000716:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC3_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC3_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_ADC3_Init+0x98>)
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <MX_ADC3_Init+0xa0>)
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_ADC3_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_ADC3_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_ADC3_Init+0x98>)
 800075a:	f000 fdff 	bl	800135c <HAL_ADC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 fa48 	bl	8000bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000768:	2304      	movs	r3, #4
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_ADC3_Init+0x98>)
 800077a:	f000 fe33 	bl	80013e4 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000784:	f000 fa38 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000070 	.word	0x20000070
 8000794:	40012200 	.word	0x40012200
 8000798:	0f000001 	.word	0x0f000001

0800079c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a2:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007a4:	4a23      	ldr	r2, [pc, #140]	@ (8000834 <MX_CAN1_Init+0x98>)
 80007a6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007aa:	2210      	movs	r2, #16
 80007ac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ee:	4810      	ldr	r0, [pc, #64]	@ (8000830 <MX_CAN1_Init+0x94>)
 80007f0:	f001 f826 	bl	8001840 <HAL_CAN_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007fa:	f000 f9fd 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank =10;
 8000802:	230a      	movs	r3, #10
 8000804:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1,&canfilterconfig);
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4803      	ldr	r0, [pc, #12]	@ (8000830 <MX_CAN1_Init+0x94>)
 8000824:	f001 f908 	bl	8001a38 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000b8 	.word	0x200000b8
 8000834:	40006400 	.word	0x40006400

08000838 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_CAN2_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <MX_CAN2_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_CAN2_Init+0x64>)
 8000844:	2210      	movs	r2, #16
 8000846:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_CAN2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_CAN2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_CAN2_Init+0x64>)
 8000856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800085a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_CAN2_Init+0x64>)
 800085e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000862:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <MX_CAN2_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_CAN2_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_CAN2_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_CAN2_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_CAN2_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_CAN2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_CAN2_Init+0x64>)
 800088a:	f000 ffd9 	bl	8001840 <HAL_CAN_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f9b0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	40006800 	.word	0x40006800

080008a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	@ (80008f8 <MX_I2C2_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_I2C2_Init+0x58>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_I2C2_Init+0x50>)
 80008e2:	f001 fd57 	bl	8002394 <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f984 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000108 	.word	0x20000108
 80008f8:	40005800 	.word	0x40005800
 80008fc:	000186a0 	.word	0x000186a0

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <MX_USART3_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART3_UART_Init+0x4c>)
 8000938:	f003 f8bc 	bl	8003ab4 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f959 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000015c 	.word	0x2000015c
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2206      	movs	r2, #6
 8000964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2202      	movs	r2, #2
 8000976:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2201      	movs	r2, #1
 800097c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2201      	movs	r2, #1
 800098e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	f001 fe40 	bl	800261c <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f929 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001a4 	.word	0x200001a4

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	@ 0x38
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
 80009ca:	4b84      	ldr	r3, [pc, #528]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a83      	ldr	r2, [pc, #524]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b81      	ldr	r3, [pc, #516]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	4b7d      	ldr	r3, [pc, #500]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a7c      	ldr	r2, [pc, #496]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b7a      	ldr	r3, [pc, #488]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	4b76      	ldr	r3, [pc, #472]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a75      	ldr	r2, [pc, #468]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b73      	ldr	r3, [pc, #460]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a6e      	ldr	r2, [pc, #440]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b68      	ldr	r3, [pc, #416]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a67      	ldr	r2, [pc, #412]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b65      	ldr	r3, [pc, #404]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b61      	ldr	r3, [pc, #388]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a60      	ldr	r2, [pc, #384]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b5e      	ldr	r3, [pc, #376]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b5a      	ldr	r3, [pc, #360]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a59      	ldr	r2, [pc, #356]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b57      	ldr	r3, [pc, #348]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b53      	ldr	r3, [pc, #332]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a52      	ldr	r2, [pc, #328]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|RELAY_04_Pin|RELAY_02_Pin|RELAY_01_Pin
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5171 	mov.w	r1, #15424	@ 0x3c40
 8000aac:	484c      	ldr	r0, [pc, #304]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000aae:	f001 fc57 	bl	8002360 <HAL_GPIO_WritePin>
                          |RELAY_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_PinO1_Pin|Test_PinO2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ab8:	484a      	ldr	r0, [pc, #296]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000aba:	f001 fc51 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	4849      	ldr	r0, [pc, #292]	@ (8000be8 <MX_GPIO_Init+0x238>)
 8000ac4:	f001 fc4c 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GP16_Pin GP15_Pin GP18_Pin */
  GPIO_InitStruct.Pin = GP16_Pin|GP15_Pin|GP18_Pin;
 8000ac8:	2358      	movs	r3, #88	@ 0x58
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4844      	ldr	r0, [pc, #272]	@ (8000bec <MX_GPIO_Init+0x23c>)
 8000adc:	f001 faac 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	483b      	ldr	r0, [pc, #236]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000af8:	f001 fa9e 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP4_Pin GP7_Pin GP6_Pin GP5_Pin
                           GP1_Pin GP3_Pin */
  GPIO_InitStruct.Pin = GP4_Pin|GP7_Pin|GP6_Pin|GP5_Pin
 8000afc:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GP1_Pin|GP3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4835      	ldr	r0, [pc, #212]	@ (8000be8 <MX_GPIO_Init+0x238>)
 8000b12:	f001 fa91 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP9_Pin GP8_Pin GP12_Pin GP11_Pin
                           GP13_Pin GP14_Pin GP17_Pin */
  GPIO_InitStruct.Pin = GP9_Pin|GP8_Pin|GP12_Pin|GP11_Pin
 8000b16:	f641 03f8 	movw	r3, #6392	@ 0x18f8
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GP13_Pin|GP14_Pin|GP17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4831      	ldr	r0, [pc, #196]	@ (8000bf0 <MX_GPIO_Init+0x240>)
 8000b2c:	f001 fa84 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin RELAY_04_Pin RELAY_02_Pin RELAY_01_Pin
                           RELAY_03_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|RELAY_04_Pin|RELAY_02_Pin|RELAY_01_Pin
 8000b30:	f44f 5371 	mov.w	r3, #15424	@ 0x3c40
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
                          |RELAY_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4825      	ldr	r0, [pc, #148]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000b4a:	f001 fa75 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin GP19_Pin GP20_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|GP19_Pin|GP20_Pin;
 8000b4e:	f248 2380 	movw	r3, #33408	@ 0x8280
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	481f      	ldr	r0, [pc, #124]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000b64:	f001 fa68 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : GP2_Pin */
  GPIO_InitStruct.Pin = GP2_Pin;
 8000b68:	2340      	movs	r3, #64	@ 0x40
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GP2_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481a      	ldr	r0, [pc, #104]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000b7c:	f001 fa5c 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_PinO1_Pin Test_PinO2_Pin */
  GPIO_InitStruct.Pin = Test_PinO1_Pin|Test_PinO2_Pin;
 8000b80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000b9a:	f001 fa4d 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4810      	ldr	r0, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x244>)
 8000bb4:	f001 fa40 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_GPIO_Init+0x238>)
 8000bd0:	f001 fa32 	bl	8002038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3738      	adds	r7, #56	@ 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40021800 	.word	0x40021800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40020c00 	.word	0x40020c00
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	@ 0x40
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a62      	ldr	r2, [pc, #392]	@ (8000dfc <HAL_ADC_MspInit+0x1a8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d15c      	bne.n	8000d30 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c7a:	4b61      	ldr	r3, [pc, #388]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a60      	ldr	r2, [pc, #384]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000c80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c86:	4b5e      	ldr	r3, [pc, #376]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c96:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a59      	ldr	r2, [pc, #356]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b57      	ldr	r3, [pc, #348]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
 8000cb2:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a52      	ldr	r2, [pc, #328]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b50      	ldr	r3, [pc, #320]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC2_IN7
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8000ce6:	23c0      	movs	r3, #192	@ 0xc0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4842      	ldr	r0, [pc, #264]	@ (8000e04 <HAL_ADC_MspInit+0x1b0>)
 8000cfa:	f001 f99d 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|LV_BAT_Pin;
 8000cfe:	2330      	movs	r3, #48	@ 0x30
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d02:	2303      	movs	r3, #3
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	483d      	ldr	r0, [pc, #244]	@ (8000e08 <HAL_ADC_MspInit+0x1b4>)
 8000d12:	f001 f991 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_Pin;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4838      	ldr	r0, [pc, #224]	@ (8000e0c <HAL_ADC_MspInit+0x1b8>)
 8000d2a:	f001 f985 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d2e:	e061      	b.n	8000df4 <HAL_ADC_MspInit+0x1a0>
  else if(hadc->Instance==ADC3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a36      	ldr	r2, [pc, #216]	@ (8000e10 <HAL_ADC_MspInit+0x1bc>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d15c      	bne.n	8000df4 <HAL_ADC_MspInit+0x1a0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a2f      	ldr	r2, [pc, #188]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a21      	ldr	r2, [pc, #132]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a1a      	ldr	r2, [pc, #104]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_ADC_MspInit+0x1ac>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC8_Pin|ADC6_Pin|ADC5_Pin|ADC15_Pin
 8000daa:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <HAL_ADC_MspInit+0x1c0>)
 8000dc0:	f001 f93a 	bl	8002038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC11_Pin;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ADC11_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_ADC_MspInit+0x1b4>)
 8000dd8:	f001 f92e 	bl	8002038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC12_Pin;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <HAL_ADC_MspInit+0x1b0>)
 8000df0:	f001 f922 	bl	8002038 <HAL_GPIO_Init>
}
 8000df4:	bf00      	nop
 8000df6:	3740      	adds	r7, #64	@ 0x40
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40012100 	.word	0x40012100
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40012200 	.word	0x40012200
 8000e14:	40021400 	.word	0x40021400

08000e18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <HAL_CAN_MspInit+0x128>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d135      	bne.n	8000ea6 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e3a:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a40      	ldr	r2, [pc, #256]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e44:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10d      	bne.n	8000e68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	4b3d      	ldr	r3, [pc, #244]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a3c      	ldr	r2, [pc, #240]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	4a35      	ldr	r2, [pc, #212]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e78:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e84:	2303      	movs	r3, #3
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e94:	2309      	movs	r3, #9
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482b      	ldr	r0, [pc, #172]	@ (8000f4c <HAL_CAN_MspInit+0x134>)
 8000ea0:	f001 f8ca 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ea4:	e047      	b.n	8000f36 <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <HAL_CAN_MspInit+0x138>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d142      	bne.n	8000f36 <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000ed4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <HAL_CAN_MspInit+0x12c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_CAN_MspInit+0x130>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f26:	2309      	movs	r3, #9
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <HAL_CAN_MspInit+0x13c>)
 8000f32:	f001 f881 	bl	8002038 <HAL_GPIO_Init>
}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	@ 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40006400 	.word	0x40006400
 8000f44:	200006ac 	.word	0x200006ac
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40006800 	.word	0x40006800
 8000f54:	40020400 	.word	0x40020400

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a19      	ldr	r2, [pc, #100]	@ (8000fdc <HAL_I2C_MspInit+0x84>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12b      	bne.n	8000fd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f96:	2303      	movs	r3, #3
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9a:	2312      	movs	r3, #18
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <HAL_I2C_MspInit+0x8c>)
 8000fb2:	f001 f841 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40021400 	.word	0x40021400

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_UART_MspInit+0x88>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_UART_MspInit+0x88>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <HAL_UART_MspInit+0x88>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_UART_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001042:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <HAL_UART_MspInit+0x8c>)
 8001060:	f000 ffea 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004800 	.word	0x40004800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020c00 	.word	0x40020c00

08001078 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0a0      	sub	sp, #128	@ 0x80
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	225c      	movs	r2, #92	@ 0x5c
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fac8 	bl	800462e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a6:	d14e      	bne.n	8001146 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80010ae:	2300      	movs	r3, #0
 80010b0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fd04 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80010c2:	f7ff fd99 	bl	8000bf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010e2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f4:	230a      	movs	r3, #10
 80010f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010fc:	4619      	mov	r1, r3
 80010fe:	4815      	ldr	r0, [pc, #84]	@ (8001154 <HAL_PCD_MspInit+0xdc>)
 8001100:	f000 ff9a 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001108:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001116:	4619      	mov	r1, r3
 8001118:	480e      	ldr	r0, [pc, #56]	@ (8001154 <HAL_PCD_MspInit+0xdc>)
 800111a:	f000 ff8d 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 8001120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6353      	str	r3, [r2, #52]	@ 0x34
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_PCD_MspInit+0xd8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3780      	adds	r7, #128	@ 0x80
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f891 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001214 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800120a:	f003 fa19 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff f971 	bl	80004f4 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001220:	080046c8 	.word	0x080046c8
  ldr r2, =_sbss
 8001224:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001228:	200006b4 	.word	0x200006b4

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	@ (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 feb9 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fcce 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fec3 	bl	800201e <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 fe99 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	@ (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200006b0 	.word	0x200006b0

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200006b0 	.word	0x200006b0

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e033      	b.n	80013da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fc6a 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013a2:	f023 0302 	bic.w	r3, r3, #2
 80013a6:	f043 0202 	orr.w	r2, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f94a 	bl	8001648 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ca:	e001      	b.n	80013d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e113      	b.n	8001628 <HAL_ADC_ConfigChannel+0x244>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d925      	bls.n	800145c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68d9      	ldr	r1, [r3, #12]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	3b1e      	subs	r3, #30
 8001426:	2207      	movs	r2, #7
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68d9      	ldr	r1, [r3, #12]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	4603      	mov	r3, r0
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4403      	add	r3, r0
 800144e:	3b1e      	subs	r3, #30
 8001450:	409a      	lsls	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	e022      	b.n	80014a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6919      	ldr	r1, [r3, #16]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	2207      	movs	r2, #7
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	4603      	mov	r3, r0
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4403      	add	r3, r0
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d824      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b05      	subs	r3, #5
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b05      	subs	r3, #5
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014f2:	e04c      	b.n	800158e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d824      	bhi.n	8001546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3b23      	subs	r3, #35	@ 0x23
 800150e:	221f      	movs	r2, #31
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43da      	mvns	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	400a      	ands	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b23      	subs	r3, #35	@ 0x23
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
 8001544:	e023      	b.n	800158e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b41      	subs	r3, #65	@ 0x41
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b41      	subs	r3, #65	@ 0x41
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_ADC_ConfigChannel+0x250>)
 8001590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a28      	ldr	r2, [pc, #160]	@ (8001638 <HAL_ADC_ConfigChannel+0x254>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d10f      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1d8>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b12      	cmp	r3, #18
 80015a2:	d10b      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_ADC_ConfigChannel+0x254>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_ADC_ConfigChannel+0x23a>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_ADC_ConfigChannel+0x258>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d003      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x1f4>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b11      	cmp	r3, #17
 80015d6:	d122      	bne.n	800161e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_ADC_ConfigChannel+0x258>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d111      	bne.n	800161e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_ADC_ConfigChannel+0x25c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_ADC_ConfigChannel+0x260>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	0c9a      	lsrs	r2, r3, #18
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001610:	e002      	b.n	8001618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40012300 	.word	0x40012300
 8001638:	40012000 	.word	0x40012000
 800163c:	10000012 	.word	0x10000012
 8001640:	20000000 	.word	0x20000000
 8001644:	431bde83 	.word	0x431bde83

08001648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001650:	4b79      	ldr	r3, [pc, #484]	@ (8001838 <ADC_Init+0x1f0>)
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	431a      	orrs	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800167c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016da:	4a58      	ldr	r2, [pc, #352]	@ (800183c <ADC_Init+0x1f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d022      	beq.n	8001726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00f      	b.n	8001746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001744:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0202 	bic.w	r2, r2, #2
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e1b      	ldrb	r3, [r3, #24]
 8001760:	005a      	lsls	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01b      	beq.n	80017ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001782:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	3b01      	subs	r3, #1
 80017a0:	035a      	lsls	r2, r3, #13
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	e007      	b.n	80017bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	051a      	lsls	r2, r3, #20
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017fe:	025a      	lsls	r2, r3, #9
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	029a      	lsls	r2, r3, #10
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40012300 	.word	0x40012300
 800183c:	0f000001 	.word	0x0f000001

08001840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0ed      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fada 	bl	8000e18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001874:	f7ff fd42 	bl	80012fc <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800187a:	e012      	b.n	80018a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800187c:	f7ff fd3e 	bl	80012fc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d90b      	bls.n	80018a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0c5      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0e5      	beq.n	800187c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0202 	bic.w	r2, r2, #2
 80018be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff fd1c 	bl	80012fc <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c6:	e012      	b.n	80018ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c8:	f7ff fd18 	bl	80012fc <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d90b      	bls.n	80018ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e09f      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e5      	bne.n	80018c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7e5b      	ldrb	r3, [r3, #25]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e9b      	ldrb	r3, [r3, #26]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e007      	b.n	800197a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0220 	bic.w	r2, r2, #32
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7edb      	ldrb	r3, [r3, #27]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0210 	bic.w	r2, r2, #16
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e007      	b.n	80019a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0210 	orr.w	r2, r2, #16
 80019a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7f1b      	ldrb	r3, [r3, #28]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0208 	orr.w	r2, r2, #8
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0208 	bic.w	r2, r2, #8
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7f5b      	ldrb	r3, [r3, #29]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0204 	orr.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0204 	bic.w	r2, r2, #4
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	ea42 0103 	orr.w	r1, r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d003      	beq.n	8001a5e <HAL_CAN_ConfigFilter+0x26>
 8001a56:	7cfb      	ldrb	r3, [r7, #19]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	f040 80be 	bne.w	8001bda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a5e:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d123      	bne.n	8001b08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3248      	adds	r2, #72	@ 0x48
 8001ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001afe:	6979      	ldr	r1, [r7, #20]
 8001b00:	3348      	adds	r3, #72	@ 0x48
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d122      	bne.n	8001b56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3248      	adds	r2, #72	@ 0x48
 8001b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	3348      	adds	r3, #72	@ 0x48
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bcc:	f023 0201 	bic.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40006400 	.word	0x40006400

08001bf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d12e      	bne.n	8001c6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff fb6a 	bl	80012fc <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c2a:	e012      	b.n	8001c52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c2c:	f7ff fb66 	bl	80012fc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d90b      	bls.n	8001c52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e012      	b.n	8001c78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e5      	bne.n	8001c2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e006      	b.n	8001c78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d003      	beq.n	8001cac <HAL_CAN_AddTxMessage+0x2c>
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f040 80ad 	bne.w	8001e06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8095 	beq.w	8001df6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	0e1b      	lsrs	r3, r3, #24
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	6809      	ldr	r1, [r1, #0]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3318      	adds	r3, #24
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e00f      	b.n	8001d24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d14:	68f9      	ldr	r1, [r7, #12]
 8001d16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	440b      	add	r3, r1
 8001d22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6819      	ldr	r1, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3318      	adds	r3, #24
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	440b      	add	r3, r1
 8001d34:	3304      	adds	r3, #4
 8001d36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	7d1b      	ldrb	r3, [r3, #20]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d111      	bne.n	8001d64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3318      	adds	r3, #24
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6811      	ldr	r1, [r2, #0]
 8001d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	440b      	add	r3, r1
 8001d60:	3304      	adds	r3, #4
 8001d62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3307      	adds	r3, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	061a      	lsls	r2, r3, #24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3306      	adds	r3, #6
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3305      	adds	r3, #5
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	3204      	adds	r2, #4
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	4610      	mov	r0, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	6811      	ldr	r1, [r2, #0]
 8001d8c:	ea43 0200 	orr.w	r2, r3, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	061a      	lsls	r2, r3, #24
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3301      	adds	r3, #1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	4313      	orrs	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	6811      	ldr	r1, [r2, #0]
 8001dc2:	ea43 0200 	orr.w	r2, r3, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001dd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3318      	adds	r3, #24
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e00e      	b.n	8001e14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e006      	b.n	8001e14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3724      	adds	r7, #36	@ 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d002      	beq.n	8001e3e <HAL_CAN_ActivateNotification+0x1e>
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d109      	bne.n	8001e52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6959      	ldr	r1, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e006      	b.n	8001e60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff5c 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffb0 	bl	8001f8c <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	@ (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	@ (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	@ (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	@ (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	@ (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	@ (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	@ (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_GPIO_Init+0x324>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e12b      	b.n	80025fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fdcc 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	@ 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f8:	f000 fb3c 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a81      	ldr	r2, [pc, #516]	@ (8002608 <HAL_I2C_Init+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d807      	bhi.n	8002418 <HAL_I2C_Init+0x84>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a80      	ldr	r2, [pc, #512]	@ (800260c <HAL_I2C_Init+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e006      	b.n	8002426 <HAL_I2C_Init+0x92>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7d      	ldr	r2, [pc, #500]	@ (8002610 <HAL_I2C_Init+0x27c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e7      	b.n	80025fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a78      	ldr	r2, [pc, #480]	@ (8002614 <HAL_I2C_Init+0x280>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a6a      	ldr	r2, [pc, #424]	@ (8002608 <HAL_I2C_Init+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d802      	bhi.n	8002468 <HAL_I2C_Init+0xd4>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	e009      	b.n	800247c <HAL_I2C_Init+0xe8>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	4a69      	ldr	r2, [pc, #420]	@ (8002618 <HAL_I2C_Init+0x284>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800248e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	@ (8002608 <HAL_I2C_Init+0x274>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d819      	bhi.n	80024d0 <HAL_I2C_Init+0x13c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e59      	subs	r1, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024b0:	400b      	ands	r3, r1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_I2C_Init+0x138>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e59      	subs	r1, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	e051      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e04f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_I2C_Init+0x168>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e012      	b.n	8002522 <HAL_I2C_Init+0x18e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x196>
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_I2C_Init+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e58      	subs	r0, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	440b      	add	r3, r1
 8002540:	fbb0 f3f3 	udiv	r3, r0, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800259e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6911      	ldr	r1, [r2, #16]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	003d08ff 	.word	0x003d08ff
 8002614:	431bde83 	.word	0x431bde83
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e108      	b.n	8002840 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe fd15 	bl	8001078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800265c:	d102      	bne.n	8002664 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fd4b 	bl	8004104 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7c1a      	ldrb	r2, [r3, #16]
 8002676:	f88d 2000 	strb.w	r2, [sp]
 800267a:	3304      	adds	r3, #4
 800267c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267e:	f001 fcdd 	bl	800403c <USB_CoreInit>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d5      	b.n	8002840 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fd43 	bl	8004126 <USB_SetCurrentMode>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0c6      	b.n	8002840 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e04a      	b.n	800274e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3315      	adds	r3, #21
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3314      	adds	r3, #20
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	b298      	uxth	r0, r3
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	332e      	adds	r3, #46	@ 0x2e
 80026f4:	4602      	mov	r2, r0
 80026f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3318      	adds	r3, #24
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	331c      	adds	r3, #28
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3320      	adds	r3, #32
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3324      	adds	r3, #36	@ 0x24
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	429a      	cmp	r2, r3
 8002756:	d3af      	bcc.n	80026b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e044      	b.n	80027e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	3301      	adds	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d3b5      	bcc.n	800275e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7c1a      	ldrb	r2, [r3, #16]
 80027fa:	f88d 2000 	strb.w	r2, [sp]
 80027fe:	3304      	adds	r3, #4
 8002800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002802:	f001 fcdd 	bl	80041c0 <USB_DevInit>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e013      	b.n	8002840 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7b1b      	ldrb	r3, [r3, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f80a 	bl	8002848 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fe98 	bl	800456e <USB_DevDisconnect>

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287a:	f043 0303 	orr.w	r3, r3, #3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0cc      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b68      	ldr	r3, [pc, #416]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d90c      	bls.n	80028cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b65      	ldr	r3, [pc, #404]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b63      	ldr	r3, [pc, #396]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0b8      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a52      	ldr	r2, [pc, #328]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	494d      	ldr	r1, [pc, #308]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d044      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d119      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e07f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e06f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e067      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4934      	ldr	r1, [pc, #208]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7fe fcbc 	bl	80012fc <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fcb8 	bl	80012fc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e04f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d20c      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e032      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e4:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4916      	ldr	r1, [pc, #88]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a16:	f000 fb7f 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	490a      	ldr	r1, [pc, #40]	@ (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	5ccb      	ldrb	r3, [r1, r3]
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	4a09      	ldr	r2, [pc, #36]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fc1c 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023c00 	.word	0x40023c00
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	080046a0 	.word	0x080046a0
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000004 	.word	0x20000004

08002a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a78:	f7ff fff0 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0a9b      	lsrs	r3, r3, #10
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	@ (8002a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	080046b0 	.word	0x080046b0

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa0:	f7ff ffdc 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0b5b      	lsrs	r3, r3, #13
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080046b0 	.word	0x080046b0

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002afc:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b02:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	496c      	ldr	r1, [pc, #432]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b2a:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b30:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	4960      	ldr	r1, [pc, #384]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b58:	4b58      	ldr	r3, [pc, #352]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4955      	ldr	r1, [pc, #340]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b76:	d101      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b94:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	4946      	ldr	r1, [pc, #280]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 808a 	beq.w	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a38      	ldr	r2, [pc, #224]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bee:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a33      	ldr	r2, [pc, #204]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fb7f 	bl	80012fc <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fb7b 	bl	80012fc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e278      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c14:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c28:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02f      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c46:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c54:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d114      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe fb49 	bl	80012fc <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fb45 	bl	80012fc <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e240      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c9c:	d114      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb2:	4902      	ldr	r1, [pc, #8]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e00c      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42470e40 	.word	0x42470e40
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	4944      	ldr	r1, [pc, #272]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002cfa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002d08:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	4937      	ldr	r1, [pc, #220]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d2a:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d30:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	492e      	ldr	r1, [pc, #184]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d011      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	491a      	ldr	r1, [pc, #104]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d011      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dac:	4911      	ldr	r1, [pc, #68]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd0:	f040 80ff 	bne.w	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dda:	f7fe fa8f 	bl	80012fc <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002de2:	f7fe fa8b 	bl	80012fc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e188      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	424711e0 	.word	0x424711e0
 8002dfc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e00:	4b7e      	ldr	r3, [pc, #504]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d028      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d124      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e34:	4b71      	ldr	r3, [pc, #452]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e46:	4b6d      	ldr	r3, [pc, #436]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4c:	0e1b      	lsrs	r3, r3, #24
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	4961      	ldr	r1, [pc, #388]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d035      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea8:	d130      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002eaa:	4b54      	ldr	r3, [pc, #336]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec2:	0f1b      	lsrs	r3, r3, #28
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	019b      	lsls	r3, r3, #6
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	071b      	lsls	r3, r3, #28
 8002eec:	4943      	ldr	r1, [pc, #268]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ef4:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efa:	f023 021f 	bic.w	r2, r3, #31
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	493d      	ldr	r1, [pc, #244]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d029      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f20:	d124      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f22:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3a:	0f1b      	lsrs	r3, r3, #28
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	071b      	lsls	r3, r3, #28
 8002f64:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d016      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	4917      	ldr	r1, [pc, #92]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fa6:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe f9a6 	bl	80012fc <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fb4:	f7fe f9a2 	bl	80012fc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09f      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	f040 8095 	bne.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fda:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f98c 	bl	80012fc <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fe6:	e00f      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fe8:	f7fe f988 	bl	80012fc <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d908      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e085      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470068 	.word	0x42470068
 8003004:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003008:	4b41      	ldr	r3, [pc, #260]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003014:	d0e8      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d02b      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d127      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800303e:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	431a      	orrs	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	4928      	ldr	r1, [pc, #160]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003074:	4b26      	ldr	r3, [pc, #152]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800307a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	3b01      	subs	r3, #1
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	4922      	ldr	r1, [pc, #136]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a2:	d118      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	019b      	lsls	r3, r3, #6
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4910      	ldr	r1, [pc, #64]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fe f90e 	bl	80012fc <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030e4:	f7fe f90a 	bl	80012fc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e007      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003102:	d1ef      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	@ 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	42470070 	.word	0x42470070

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b0ae      	sub	sp, #184	@ 0xb8
 800311e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313e:	4bcb      	ldr	r3, [pc, #812]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b0c      	cmp	r3, #12
 8003148:	f200 8206 	bhi.w	8003558 <HAL_RCC_GetSysClockFreq+0x440>
 800314c:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <HAL_RCC_GetSysClockFreq+0x3c>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003189 	.word	0x08003189
 8003158:	08003559 	.word	0x08003559
 800315c:	08003559 	.word	0x08003559
 8003160:	08003559 	.word	0x08003559
 8003164:	08003191 	.word	0x08003191
 8003168:	08003559 	.word	0x08003559
 800316c:	08003559 	.word	0x08003559
 8003170:	08003559 	.word	0x08003559
 8003174:	08003199 	.word	0x08003199
 8003178:	08003559 	.word	0x08003559
 800317c:	08003559 	.word	0x08003559
 8003180:	08003559 	.word	0x08003559
 8003184:	08003389 	.word	0x08003389
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4bb9      	ldr	r3, [pc, #740]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x358>)
 800318a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800318e:	e1e7      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4bb8      	ldr	r3, [pc, #736]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003196:	e1e3      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003198:	4bb4      	ldr	r3, [pc, #720]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a4:	4bb1      	ldr	r3, [pc, #708]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d071      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b0:	4bae      	ldr	r3, [pc, #696]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e8:	0150      	lsls	r0, r2, #5
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4621      	mov	r1, r4
 80031f0:	1a51      	subs	r1, r2, r1
 80031f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80031f4:	4629      	mov	r1, r5
 80031f6:	eb63 0301 	sbc.w	r3, r3, r1
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003208:	4649      	mov	r1, r9
 800320a:	018b      	lsls	r3, r1, #6
 800320c:	4641      	mov	r1, r8
 800320e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003212:	4641      	mov	r1, r8
 8003214:	018a      	lsls	r2, r1, #6
 8003216:	4641      	mov	r1, r8
 8003218:	1a51      	subs	r1, r2, r1
 800321a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800321c:	4649      	mov	r1, r9
 800321e:	eb63 0301 	sbc.w	r3, r3, r1
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003230:	4649      	mov	r1, r9
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4641      	mov	r1, r8
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4622      	mov	r2, r4
 8003246:	189b      	adds	r3, r3, r2
 8003248:	633b      	str	r3, [r7, #48]	@ 0x30
 800324a:	462b      	mov	r3, r5
 800324c:	460a      	mov	r2, r1
 800324e:	eb42 0303 	adc.w	r3, r2, r3
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003260:	4629      	mov	r1, r5
 8003262:	024b      	lsls	r3, r1, #9
 8003264:	4621      	mov	r1, r4
 8003266:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800326a:	4621      	mov	r1, r4
 800326c:	024a      	lsls	r2, r1, #9
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800327c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003280:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003284:	f7fc ffbe 	bl	8000204 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003292:	e067      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4b75      	ldr	r3, [pc, #468]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80032a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ae:	2300      	movs	r3, #0
 80032b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	0159      	lsls	r1, r3, #5
 80032c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c8:	0150      	lsls	r0, r2, #5
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4621      	mov	r1, r4
 80032d0:	1a51      	subs	r1, r2, r1
 80032d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032d4:	4629      	mov	r1, r5
 80032d6:	eb63 0301 	sbc.w	r3, r3, r1
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032e8:	4649      	mov	r1, r9
 80032ea:	018b      	lsls	r3, r1, #6
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f2:	4641      	mov	r1, r8
 80032f4:	018a      	lsls	r2, r1, #6
 80032f6:	4641      	mov	r1, r8
 80032f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032fc:	4649      	mov	r1, r9
 80032fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800330e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003316:	4692      	mov	sl, r2
 8003318:	469b      	mov	fp, r3
 800331a:	4623      	mov	r3, r4
 800331c:	eb1a 0303 	adds.w	r3, sl, r3
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	462b      	mov	r3, r5
 8003324:	eb4b 0303 	adc.w	r3, fp, r3
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003336:	4629      	mov	r1, r5
 8003338:	028b      	lsls	r3, r1, #10
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003340:	4621      	mov	r1, r4
 8003342:	028a      	lsls	r2, r1, #10
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800334c:	2200      	movs	r2, #0
 800334e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003350:	677a      	str	r2, [r7, #116]	@ 0x74
 8003352:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003356:	f7fc ff55 	bl	8000204 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4613      	mov	r3, r2
 8003360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800337a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003386:	e0eb      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003394:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06b      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <HAL_RCC_GetSysClockFreq+0x354>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033b4:	2300      	movs	r3, #0
 80033b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033bc:	4622      	mov	r2, r4
 80033be:	462b      	mov	r3, r5
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4621      	mov	r1, r4
 80033d6:	1a51      	subs	r1, r2, r1
 80033d8:	61b9      	str	r1, [r7, #24]
 80033da:	4629      	mov	r1, r5
 80033dc:	eb63 0301 	sbc.w	r3, r3, r1
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033ee:	4659      	mov	r1, fp
 80033f0:	018b      	lsls	r3, r1, #6
 80033f2:	4651      	mov	r1, sl
 80033f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f8:	4651      	mov	r1, sl
 80033fa:	018a      	lsls	r2, r1, #6
 80033fc:	4651      	mov	r1, sl
 80033fe:	ebb2 0801 	subs.w	r8, r2, r1
 8003402:	4659      	mov	r1, fp
 8003404:	eb63 0901 	sbc.w	r9, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003414:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003418:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341c:	4690      	mov	r8, r2
 800341e:	4699      	mov	r9, r3
 8003420:	4623      	mov	r3, r4
 8003422:	eb18 0303 	adds.w	r3, r8, r3
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	462b      	mov	r3, r5
 800342a:	eb49 0303 	adc.w	r3, r9, r3
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	024b      	lsls	r3, r1, #9
 8003440:	4621      	mov	r1, r4
 8003442:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003446:	4621      	mov	r1, r4
 8003448:	024a      	lsls	r2, r1, #9
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003452:	2200      	movs	r2, #0
 8003454:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003456:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003458:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800345c:	f7fc fed2 	bl	8000204 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800346a:	e065      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x420>
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003478:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x458>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	2200      	movs	r2, #0
 8003480:	4618      	mov	r0, r3
 8003482:	4611      	mov	r1, r2
 8003484:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003488:	653b      	str	r3, [r7, #80]	@ 0x50
 800348a:	2300      	movs	r3, #0
 800348c:	657b      	str	r3, [r7, #84]	@ 0x54
 800348e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003492:	4642      	mov	r2, r8
 8003494:	464b      	mov	r3, r9
 8003496:	f04f 0000 	mov.w	r0, #0
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a4:	0150      	lsls	r0, r2, #5
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4641      	mov	r1, r8
 80034ac:	1a51      	subs	r1, r2, r1
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	4649      	mov	r1, r9
 80034b2:	eb63 0301 	sbc.w	r3, r3, r1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034c4:	4659      	mov	r1, fp
 80034c6:	018b      	lsls	r3, r1, #6
 80034c8:	4651      	mov	r1, sl
 80034ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ce:	4651      	mov	r1, sl
 80034d0:	018a      	lsls	r2, r1, #6
 80034d2:	4651      	mov	r1, sl
 80034d4:	1a54      	subs	r4, r2, r1
 80034d6:	4659      	mov	r1, fp
 80034d8:	eb63 0501 	sbc.w	r5, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003520:	2200      	movs	r2, #0
 8003522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003524:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003526:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800352a:	f7fc fe6b 	bl	8000204 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4613      	mov	r3, r2
 8003534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003538:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x458>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0f1b      	lsrs	r3, r3, #28
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800354a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003556:	e003      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x45c>)
 800355a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800355e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003564:	4618      	mov	r0, r3
 8003566:	37b8      	adds	r7, #184	@ 0xb8
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400

08003578 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e28d      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8083 	beq.w	800369e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003598:	4b94      	ldr	r3, [pc, #592]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d019      	beq.n	80035d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035a4:	4b91      	ldr	r3, [pc, #580]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b0:	4b8e      	ldr	r3, [pc, #568]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035bc:	d00c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b8b      	ldr	r3, [pc, #556]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d112      	bne.n	80035f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	4b84      	ldr	r3, [pc, #528]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05b      	beq.n	800369c <HAL_RCC_OscConfig+0x124>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d157      	bne.n	800369c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e25a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x90>
 80035fa:	4b7c      	ldr	r3, [pc, #496]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7b      	ldr	r2, [pc, #492]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e01d      	b.n	8003644 <HAL_RCC_OscConfig+0xcc>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0xb4>
 8003612:	4b76      	ldr	r3, [pc, #472]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a75      	ldr	r2, [pc, #468]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b73      	ldr	r3, [pc, #460]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a72      	ldr	r2, [pc, #456]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0xcc>
 800362c:	4b6f      	ldr	r3, [pc, #444]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6e      	ldr	r2, [pc, #440]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b6c      	ldr	r3, [pc, #432]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6b      	ldr	r2, [pc, #428]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800363e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd fe56 	bl	80012fc <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003654:	f7fd fe52 	bl	80012fc <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	@ 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e21f      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b61      	ldr	r3, [pc, #388]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0xdc>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fe42 	bl	80012fc <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367c:	f7fd fe3e 	bl	80012fc <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e20b      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	4b57      	ldr	r3, [pc, #348]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x104>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d06f      	beq.n	800378a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036aa:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d017      	beq.n	80036e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036b6:	4b4d      	ldr	r3, [pc, #308]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c2:	4b4a      	ldr	r3, [pc, #296]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d11c      	bne.n	8003714 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036da:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x186>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1d3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4937      	ldr	r1, [pc, #220]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	e03a      	b.n	800378a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b34      	ldr	r3, [pc, #208]	@ (80037f0 <HAL_RCC_OscConfig+0x278>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fdeb 	bl	80012fc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd fde7 	bl	80012fc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1b4      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4925      	ldr	r1, [pc, #148]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <HAL_RCC_OscConfig+0x278>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fdca 	bl	80012fc <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd fdc6 	bl	80012fc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e193      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d036      	beq.n	8003804 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379e:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fd fdaa 	bl	80012fc <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fd fda6 	bl	80012fc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e173      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_OscConfig+0x274>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x234>
 80037ca:	e01b      	b.n	8003804 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fd fd93 	bl	80012fc <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	e00e      	b.n	80037f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037da:	f7fd fd8f 	bl	80012fc <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d907      	bls.n	80037f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e15c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470000 	.word	0x42470000
 80037f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ea      	bne.n	80037da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8097 	beq.w	8003940 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4b83      	ldr	r3, [pc, #524]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b7f      	ldr	r3, [pc, #508]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b7c      	ldr	r3, [pc, #496]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b79      	ldr	r3, [pc, #484]	@ (8003a28 <HAL_RCC_OscConfig+0x4b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d118      	bne.n	8003880 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384e:	4b76      	ldr	r3, [pc, #472]	@ (8003a28 <HAL_RCC_OscConfig+0x4b0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a75      	ldr	r2, [pc, #468]	@ (8003a28 <HAL_RCC_OscConfig+0x4b0>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385a:	f7fd fd4f 	bl	80012fc <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003862:	f7fd fd4b 	bl	80012fc <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e118      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <HAL_RCC_OscConfig+0x4b0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x31e>
 8003888:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a65      	ldr	r2, [pc, #404]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	e01c      	b.n	80038d0 <HAL_RCC_OscConfig+0x358>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x340>
 800389e:	4b61      	ldr	r3, [pc, #388]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	4a60      	ldr	r2, [pc, #384]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0x358>
 80038b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a59      	ldr	r2, [pc, #356]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c4:	4b57      	ldr	r3, [pc, #348]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c8:	4a56      	ldr	r2, [pc, #344]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d015      	beq.n	8003904 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fd fd10 	bl	80012fc <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fd fd0c 	bl	80012fc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0d7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ee      	beq.n	80038e0 <HAL_RCC_OscConfig+0x368>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fcfa 	bl	80012fc <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd fcf6 	bl	80012fc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0c1      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003922:	4b40      	ldr	r3, [pc, #256]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ee      	bne.n	800390c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	4a3a      	ldr	r2, [pc, #232]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80ad 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800394a:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b08      	cmp	r3, #8
 8003954:	d060      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d145      	bne.n	80039ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b33      	ldr	r3, [pc, #204]	@ (8003a2c <HAL_RCC_OscConfig+0x4b4>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fcca 	bl	80012fc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fcc6 	bl	80012fc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e093      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	491b      	ldr	r1, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x4b4>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd fc9b 	bl	80012fc <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fd fc97 	bl	80012fc <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e064      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x452>
 80039e8:	e05c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_RCC_OscConfig+0x4b4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fc84 	bl	80012fc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd fc80 	bl	80012fc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e04d      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x480>
 8003a16:	e045      	b.n	8003aa4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e040      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a30:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab0 <HAL_RCC_OscConfig+0x538>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d030      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d129      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d122      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d119      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fa84 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f82b 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b0c0      	sub	sp, #256	@ 0x100
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	68d9      	ldr	r1, [r3, #12]
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	ea40 0301 	orr.w	r3, r0, r1
 8003b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bac:	f021 010c 	bic.w	r1, r1, #12
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	6999      	ldr	r1, [r3, #24]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	ea40 0301 	orr.w	r3, r0, r1
 8003bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0xa0>
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <UART_SetConfig+0x2d0>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d104      	bne.n	8003bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe ff52 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8003bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bfc:	e003      	b.n	8003c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bfe:	f7fe ff39 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003c02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c10:	f040 810c 	bne.w	8003e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c36:	4621      	mov	r1, r4
 8003c38:	eb12 0801 	adds.w	r8, r2, r1
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb43 0901 	adc.w	r9, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb18 0303 	adds.w	r3, r8, r3
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c64:	462b      	mov	r3, r5
 8003c66:	eb49 0303 	adc.w	r3, r9, r3
 8003c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c82:	460b      	mov	r3, r1
 8003c84:	18db      	adds	r3, r3, r3
 8003c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c88:	4613      	mov	r3, r2
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c98:	f7fc fab4 	bl	8000204 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011c      	lsls	r4, r3, #4
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ccc:	4641      	mov	r1, r8
 8003cce:	eb12 0a01 	adds.w	sl, r2, r1
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cec:	4692      	mov	sl, r2
 8003cee:	469b      	mov	fp, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	18db      	adds	r3, r3, r3
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d1e:	4613      	mov	r3, r2
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d2e:	f7fc fa69 	bl	8000204 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2264      	movs	r2, #100	@ 0x64
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	1acb      	subs	r3, r1, r3
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d4e:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d50:	fba3 2302 	umull	r2, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d5c:	441c      	add	r4, r3
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	1891      	adds	r1, r2, r2
 8003d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d78:	415b      	adcs	r3, r3
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d80:	4641      	mov	r1, r8
 8003d82:	1851      	adds	r1, r2, r1
 8003d84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d86:	4649      	mov	r1, r9
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d98:	4659      	mov	r1, fp
 8003d9a:	00cb      	lsls	r3, r1, #3
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da2:	4651      	mov	r1, sl
 8003da4:	00ca      	lsls	r2, r1, #3
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	4642      	mov	r2, r8
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dea:	f7fc fa0b 	bl	8000204 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 0207 	and.w	r2, r3, #7
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e1c:	e106      	b.n	800402c <UART_SetConfig+0x4d8>
 8003e1e:	bf00      	nop
 8003e20:	40011000 	.word	0x40011000
 8003e24:	40011400 	.word	0x40011400
 8003e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e3e:	4642      	mov	r2, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	6239      	str	r1, [r7, #32]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1854      	adds	r4, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb43 0501 	adc.w	r5, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	00eb      	lsls	r3, r5, #3
 8003e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e66:	00e2      	lsls	r2, r4, #3
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	18e3      	adds	r3, r4, r3
 8003e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e74:	464b      	mov	r3, r9
 8003e76:	eb45 0303 	adc.w	r3, r5, r3
 8003e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	008b      	lsls	r3, r1, #2
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	008a      	lsls	r2, r1, #2
 8003ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eac:	f7fc f9aa 	bl	8000204 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4b60      	ldr	r3, [pc, #384]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	011c      	lsls	r4, r3, #4
 8003ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	61b9      	str	r1, [r7, #24]
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	1851      	adds	r1, r2, r1
 8003ee4:	6139      	str	r1, [r7, #16]
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef8:	4659      	mov	r1, fp
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4651      	mov	r1, sl
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f38:	4649      	mov	r1, r9
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f42:	4641      	mov	r1, r8
 8003f44:	008a      	lsls	r2, r1, #2
 8003f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f4a:	f7fc f95b 	bl	8000204 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2264      	movs	r2, #100	@ 0x64
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	@ 0x32
 8003f68:	4a33      	ldr	r2, [pc, #204]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	441c      	add	r4, r3
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	4641      	mov	r1, r8
 8003f96:	1851      	adds	r1, r2, r1
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	414b      	adcs	r3, r1
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fac:	4659      	mov	r1, fp
 8003fae:	00cb      	lsls	r3, r1, #3
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	00ca      	lsls	r2, r1, #3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	460a      	mov	r2, r1
 8003fca:	eb42 0303 	adc.w	r3, r2, r3
 8003fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fe8:	4649      	mov	r1, r9
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	4641      	mov	r1, r8
 8003fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	008a      	lsls	r2, r1, #2
 8003ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ffa:	f7fc f903 	bl	8000204 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	@ 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	@ 0x32
 8004016:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4422      	add	r2, r4
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004032:	46bd      	mov	sp, r7
 8004034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800403c:	b084      	sub	sp, #16
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	f107 001c 	add.w	r0, r7, #28
 800404a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800404e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004052:	2b01      	cmp	r3, #1
 8004054:	d123      	bne.n	800409e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800406a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800407e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa9a 	bl	80045cc <USB_CoreReset>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e01b      	b.n	80040d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fa8e 	bl	80045cc <USB_CoreReset>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80040c8:	e005      	b.n	80040d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040d6:	7fbb      	ldrb	r3, [r7, #30]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10b      	bne.n	80040f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f043 0206 	orr.w	r2, r3, #6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004100:	b004      	add	sp, #16
 8004102:	4770      	bx	lr

08004104 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d115      	bne.n	8004174 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004154:	200a      	movs	r0, #10
 8004156:	f7fd f8dd 	bl	8001314 <HAL_Delay>
      ms += 10U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	330a      	adds	r3, #10
 800415e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fa25 	bl	80045b0 <USB_GetMode>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d01e      	beq.n	80041aa <USB_SetCurrentMode+0x84>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004170:	d9f0      	bls.n	8004154 <USB_SetCurrentMode+0x2e>
 8004172:	e01a      	b.n	80041aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d115      	bne.n	80041a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004186:	200a      	movs	r0, #10
 8004188:	f7fd f8c4 	bl	8001314 <HAL_Delay>
      ms += 10U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	330a      	adds	r3, #10
 8004190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa0c 	bl	80045b0 <USB_GetMode>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <USB_SetCurrentMode+0x84>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80041a2:	d9f0      	bls.n	8004186 <USB_SetCurrentMode+0x60>
 80041a4:	e001      	b.n	80041aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e005      	b.n	80041b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80041ae:	d101      	bne.n	80041b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e009      	b.n	80041f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3340      	adds	r3, #64	@ 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b0e      	cmp	r3, #14
 80041f8:	d9f2      	bls.n	80041e0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11c      	bne.n	800423c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e005      	b.n	8004248 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004254:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800425c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004264:	2100      	movs	r1, #0
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f968 	bl	800453c <USB_SetDevSpeed>
 800426c:	e008      	b.n	8004280 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800426e:	2101      	movs	r1, #1
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f963 	bl	800453c <USB_SetDevSpeed>
 8004276:	e003      	b.n	8004280 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004278:	2103      	movs	r1, #3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f95e 	bl	800453c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004280:	2110      	movs	r1, #16
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8fa 	bl	800447c <USB_FlushTxFifo>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f924 	bl	80044e0 <USB_FlushRxFifo>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e043      	b.n	8004354 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042e2:	d118      	bne.n	8004316 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f6:	461a      	mov	r2, r3
 80042f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e013      	b.n	8004328 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e008      	b.n	8004328 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2300      	movs	r3, #0
 8004338:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800434c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3301      	adds	r3, #1
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004358:	461a      	mov	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4293      	cmp	r3, r2
 800435e:	d3b5      	bcc.n	80042cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	e043      	b.n	80043ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800437c:	d118      	bne.n	80043b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e013      	b.n	80043c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e008      	b.n	80043c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3301      	adds	r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043f2:	461a      	mov	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d3b5      	bcc.n	8004366 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800440c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800441a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800441c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f043 0210 	orr.w	r2, r3, #16
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <USB_DevInit+0x2b8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800443c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f043 0208 	orr.w	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004450:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004474:	b004      	add	sp, #16
 8004476:	4770      	bx	lr
 8004478:	803c3800 	.word	0x803c3800

0800447c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004496:	d901      	bls.n	800449c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e01b      	b.n	80044d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	daf2      	bge.n	800448a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	019b      	lsls	r3, r3, #6
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044c0:	d901      	bls.n	80044c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e006      	b.n	80044d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d0f0      	beq.n	80044b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044f8:	d901      	bls.n	80044fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e018      	b.n	8004530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	daf2      	bge.n	80044ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2210      	movs	r2, #16
 800450e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800451c:	d901      	bls.n	8004522 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e006      	b.n	8004530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d0f0      	beq.n	8004510 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004588:	f023 0303 	bic.w	r3, r3, #3
 800458c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0301 	and.w	r3, r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045e4:	d901      	bls.n	80045ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e01b      	b.n	8004622 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	daf2      	bge.n	80045d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800460e:	d901      	bls.n	8004614 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e006      	b.n	8004622 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d0f0      	beq.n	8004602 <USB_CoreReset+0x36>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <memset>:
 800462e:	4402      	add	r2, r0
 8004630:	4603      	mov	r3, r0
 8004632:	4293      	cmp	r3, r2
 8004634:	d100      	bne.n	8004638 <memset+0xa>
 8004636:	4770      	bx	lr
 8004638:	f803 1b01 	strb.w	r1, [r3], #1
 800463c:	e7f9      	b.n	8004632 <memset+0x4>
	...

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	@ (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	@ (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	@ (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	@ (8004684 <__libc_init_array+0x44>)
 8004654:	f000 f818 	bl	8004688 <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	080046c0 	.word	0x080046c0
 800467c:	080046c0 	.word	0x080046c0
 8004680:	080046c0 	.word	0x080046c0
 8004684:	080046c4 	.word	0x080046c4

08004688 <_init>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr

08004694 <_fini>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr
