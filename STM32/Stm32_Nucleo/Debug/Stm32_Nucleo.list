
Stm32_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f8  080059f8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080059f8  080059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a00  08005a00  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  2000005c  08005a64  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08005a64  00007770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103e0  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002310  00000000  00000000  0001746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00019780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aef  00000000  00000000  0001a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022731  00000000  00000000  0001b077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001260b  00000000  00000000  0003d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfce4  00000000  00000000  0004fdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fa97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  0011fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00123cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800597c 	.word	0x0800597c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800597c 	.word	0x0800597c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b96a 	b.w	8000c18 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	460c      	mov	r4, r1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d14e      	bne.n	8000a06 <__udivmoddi4+0xaa>
 8000968:	4694      	mov	ip, r2
 800096a:	458c      	cmp	ip, r1
 800096c:	4686      	mov	lr, r0
 800096e:	fab2 f282 	clz	r2, r2
 8000972:	d962      	bls.n	8000a3a <__udivmoddi4+0xde>
 8000974:	b14a      	cbz	r2, 800098a <__udivmoddi4+0x2e>
 8000976:	f1c2 0320 	rsb	r3, r2, #32
 800097a:	4091      	lsls	r1, r2
 800097c:	fa20 f303 	lsr.w	r3, r0, r3
 8000980:	fa0c fc02 	lsl.w	ip, ip, r2
 8000984:	4319      	orrs	r1, r3
 8000986:	fa00 fe02 	lsl.w	lr, r0, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f f68c 	uxth.w	r6, ip
 8000992:	fbb1 f4f7 	udiv	r4, r1, r7
 8000996:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099a:	fb07 1114 	mls	r1, r7, r4, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb04 f106 	mul.w	r1, r4, r6
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80009b2:	f080 8112 	bcs.w	8000bda <__udivmoddi4+0x27e>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 810f 	bls.w	8000bda <__udivmoddi4+0x27e>
 80009bc:	3c02      	subs	r4, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a59      	subs	r1, r3, r1
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ca:	fb07 1110 	mls	r1, r7, r0, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb00 f606 	mul.w	r6, r0, r6
 80009d6:	429e      	cmp	r6, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x94>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e2:	f080 80fc 	bcs.w	8000bde <__udivmoddi4+0x282>
 80009e6:	429e      	cmp	r6, r3
 80009e8:	f240 80f9 	bls.w	8000bde <__udivmoddi4+0x282>
 80009ec:	4463      	add	r3, ip
 80009ee:	3802      	subs	r0, #2
 80009f0:	1b9b      	subs	r3, r3, r6
 80009f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009f6:	2100      	movs	r1, #0
 80009f8:	b11d      	cbz	r5, 8000a02 <__udivmoddi4+0xa6>
 80009fa:	40d3      	lsrs	r3, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d905      	bls.n	8000a16 <__udivmoddi4+0xba>
 8000a0a:	b10d      	cbz	r5, 8000a10 <__udivmoddi4+0xb4>
 8000a0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a10:	2100      	movs	r1, #0
 8000a12:	4608      	mov	r0, r1
 8000a14:	e7f5      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a16:	fab3 f183 	clz	r1, r3
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d146      	bne.n	8000aac <__udivmoddi4+0x150>
 8000a1e:	42a3      	cmp	r3, r4
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xcc>
 8000a22:	4290      	cmp	r0, r2
 8000a24:	f0c0 80f0 	bcc.w	8000c08 <__udivmoddi4+0x2ac>
 8000a28:	1a86      	subs	r6, r0, r2
 8000a2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0e6      	beq.n	8000a02 <__udivmoddi4+0xa6>
 8000a34:	e9c5 6300 	strd	r6, r3, [r5]
 8000a38:	e7e3      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	f040 8090 	bne.w	8000b60 <__udivmoddi4+0x204>
 8000a40:	eba1 040c 	sub.w	r4, r1, ip
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa1f f78c 	uxth.w	r7, ip
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a56:	fb08 4416 	mls	r4, r8, r6, r4
 8000a5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5e:	fb07 f006 	mul.w	r0, r7, r6
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x11c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x11a>
 8000a70:	4298      	cmp	r0, r3
 8000a72:	f200 80cd 	bhi.w	8000c10 <__udivmoddi4+0x2b4>
 8000a76:	4626      	mov	r6, r4
 8000a78:	1a1c      	subs	r4, r3, r0
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a82:	fb08 4410 	mls	r4, r8, r0, r4
 8000a86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8a:	fb00 f707 	mul.w	r7, r0, r7
 8000a8e:	429f      	cmp	r7, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x148>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9a:	d202      	bcs.n	8000aa2 <__udivmoddi4+0x146>
 8000a9c:	429f      	cmp	r7, r3
 8000a9e:	f200 80b0 	bhi.w	8000c02 <__udivmoddi4+0x2a6>
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	1bdb      	subs	r3, r3, r7
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	e7a5      	b.n	80009f8 <__udivmoddi4+0x9c>
 8000aac:	f1c1 0620 	rsb	r6, r1, #32
 8000ab0:	408b      	lsls	r3, r1
 8000ab2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000abc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ac0:	ea43 030c 	orr.w	r3, r3, ip
 8000ac4:	40f4      	lsrs	r4, r6
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	0c38      	lsrs	r0, r7, #16
 8000acc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ad0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	fb00 441e 	mls	r4, r0, lr, r4
 8000adc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ae4:	45a1      	cmp	r9, r4
 8000ae6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aea:	d90a      	bls.n	8000b02 <__udivmoddi4+0x1a6>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000af2:	f080 8084 	bcs.w	8000bfe <__udivmoddi4+0x2a2>
 8000af6:	45a1      	cmp	r9, r4
 8000af8:	f240 8081 	bls.w	8000bfe <__udivmoddi4+0x2a2>
 8000afc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b00:	443c      	add	r4, r7
 8000b02:	eba4 0409 	sub.w	r4, r4, r9
 8000b06:	fa1f f983 	uxth.w	r9, r3
 8000b0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d907      	bls.n	8000b2e <__udivmoddi4+0x1d2>
 8000b1e:	193c      	adds	r4, r7, r4
 8000b20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b24:	d267      	bcs.n	8000bf6 <__udivmoddi4+0x29a>
 8000b26:	45a4      	cmp	ip, r4
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0x29a>
 8000b2a:	3b02      	subs	r3, #2
 8000b2c:	443c      	add	r4, r7
 8000b2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b32:	fba0 9302 	umull	r9, r3, r0, r2
 8000b36:	eba4 040c 	sub.w	r4, r4, ip
 8000b3a:	429c      	cmp	r4, r3
 8000b3c:	46ce      	mov	lr, r9
 8000b3e:	469c      	mov	ip, r3
 8000b40:	d351      	bcc.n	8000be6 <__udivmoddi4+0x28a>
 8000b42:	d04e      	beq.n	8000be2 <__udivmoddi4+0x286>
 8000b44:	b155      	cbz	r5, 8000b5c <__udivmoddi4+0x200>
 8000b46:	ebb8 030e 	subs.w	r3, r8, lr
 8000b4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b52:	40cb      	lsrs	r3, r1
 8000b54:	431e      	orrs	r6, r3
 8000b56:	40cc      	lsrs	r4, r1
 8000b58:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e750      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000b60:	f1c2 0320 	rsb	r3, r2, #32
 8000b64:	fa20 f103 	lsr.w	r1, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	430c      	orrs	r4, r1
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3110 	mls	r1, r8, r0, r3
 8000b88:	0c23      	lsrs	r3, r4, #16
 8000b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8e:	fb00 f107 	mul.w	r1, r0, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x24c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b9e:	d22c      	bcs.n	8000bfa <__udivmoddi4+0x29e>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d92a      	bls.n	8000bfa <__udivmoddi4+0x29e>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb01 f307 	mul.w	r3, r1, r7
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x276>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bc8:	d213      	bcs.n	8000bf2 <__udivmoddi4+0x296>
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	d911      	bls.n	8000bf2 <__udivmoddi4+0x296>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4464      	add	r4, ip
 8000bd2:	1ae4      	subs	r4, r4, r3
 8000bd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bd8:	e739      	b.n	8000a4e <__udivmoddi4+0xf2>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	e6f0      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e706      	b.n	80009f0 <__udivmoddi4+0x94>
 8000be2:	45c8      	cmp	r8, r9
 8000be4:	d2ae      	bcs.n	8000b44 <__udivmoddi4+0x1e8>
 8000be6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7a8      	b.n	8000b44 <__udivmoddi4+0x1e8>
 8000bf2:	4631      	mov	r1, r6
 8000bf4:	e7ed      	b.n	8000bd2 <__udivmoddi4+0x276>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e799      	b.n	8000b2e <__udivmoddi4+0x1d2>
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	e7d4      	b.n	8000ba8 <__udivmoddi4+0x24c>
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	e77f      	b.n	8000b02 <__udivmoddi4+0x1a6>
 8000c02:	4463      	add	r3, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	e74d      	b.n	8000aa4 <__udivmoddi4+0x148>
 8000c08:	4606      	mov	r6, r0
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e70f      	b.n	8000a30 <__udivmoddi4+0xd4>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	e730      	b.n	8000a78 <__udivmoddi4+0x11c>
 8000c16:	bf00      	nop

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	@ 0x30
 8000c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fc99 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f8a9 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f9cf 	bl	8000fcc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c2e:	f000 f975 	bl	8000f1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c32:	f000 f99d 	bl	8000f70 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000c36:	f000 f90d 	bl	8000e54 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000c3a:	f000 f941 	bl	8000ec0 <MX_I2C1_Init>
    /* USER CODE END WHILE */
	  //all below Function and calculation can be found in the Sensor Reference Manual


	  // Tell Sensor that we want to read from the temp register (object to change)
	  buf[0] = REG_TEMP;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	703b      	strb	r3, [r7, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, Sensor_ADDR,buf,1,HAL_MAX_DELAY);
 8000c42:	2390      	movs	r3, #144	@ 0x90
 8000c44:	4619      	mov	r1, r3
 8000c46:	463a      	mov	r2, r7
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4843      	ldr	r0, [pc, #268]	@ (8000d60 <main+0x144>)
 8000c52:	f001 f9eb 	bl	800202c <HAL_I2C_Master_Transmit>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  if ( ret != HAL_OK){
 8000c5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d008      	beq.n	8000c76 <main+0x5a>
		  strcpy((char*)buf,"Error Tx\r\n");
 8000c64:	463b      	mov	r3, r7
 8000c66:	4a3f      	ldr	r2, [pc, #252]	@ (8000d64 <main+0x148>)
 8000c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6a:	c303      	stmia	r3!, {r0, r1}
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	0c12      	lsrs	r2, r2, #16
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e7e3      	b.n	8000c3e <main+0x22>
	  }else{

		  //Read 2 bytes from the temp Reg
		  ret = HAL_I2C_Master_Receive(&hi2c1, Sensor_ADDR,buf, 2, HAL_MAX_DELAY);
 8000c76:	2390      	movs	r3, #144	@ 0x90
 8000c78:	4619      	mov	r1, r3
 8000c7a:	463a      	mov	r2, r7
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2302      	movs	r3, #2
 8000c84:	4836      	ldr	r0, [pc, #216]	@ (8000d60 <main+0x144>)
 8000c86:	f001 facf 	bl	8002228 <HAL_I2C_Master_Receive>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		  if ( ret != HAL_OK){
 8000c90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d008      	beq.n	8000caa <main+0x8e>
		  		  strcpy((char*)buf,"Error Tx\r\n");
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4a32      	ldr	r2, [pc, #200]	@ (8000d64 <main+0x148>)
 8000c9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9e:	c303      	stmia	r3!, {r0, r1}
 8000ca0:	801a      	strh	r2, [r3, #0]
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	0c12      	lsrs	r2, r2, #16
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e049      	b.n	8000d3e <main+0x122>
	  } else {

		//Combine the bytes
		val =  ((int16_t)buf[0] <<4) | (buf[1] >>4);
 8000caa:	783b      	ldrb	r3, [r7, #0]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	787b      	ldrb	r3, [r7, #1]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	84fb      	strh	r3, [r7, #38]	@ 0x26
		// Convert to 2's Complement, Since the temp can be negative
				if (val> 0x7FF){
 8000cbc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cc4:	db05      	blt.n	8000cd2 <main+0xb6>
					val |= 0xF000;
 8000cc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000cc8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000ccc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000cd0:	84fb      	strh	r3, [r7, #38]	@ 0x26
				}

		//convert to float temp value (Celsius)
		temp_c = val *0.0625;
 8000cd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd6e 	bl	80007b8 <__aeabi_i2d>
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <main+0x14c>)
 8000ce2:	f7ff faed 	bl	80002c0 <__aeabi_dmul>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4610      	mov	r0, r2
 8000cec:	4619      	mov	r1, r3
 8000cee:	f7ff fdcd 	bl	800088c <__aeabi_d2f>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	623b      	str	r3, [r7, #32]

		// Convert temp to Decimal Format
		temp_c *= 100; // this to seperate decimal and interger part
 8000cf6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cfa:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000d6c <main+0x150>
 8000cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d02:	edc7 7a08 	vstr	s15, [r7, #32]
		sprintf((char*)buf,
				"%u.%02u C\r\n",
				((unsigned int) temp_c / 100),
 8000d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0e:	ee17 2a90 	vmov	r2, s15
		sprintf((char*)buf,
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <main+0x154>)
 8000d14:	fba3 2302 	umull	r2, r3, r3, r2
 8000d18:	095a      	lsrs	r2, r3, #5
				((unsigned int) temp_c % 100));
 8000d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d22:	ee17 1a90 	vmov	r1, s15
		sprintf((char*)buf,
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <main+0x154>)
 8000d28:	fba3 0301 	umull	r0, r3, r3, r1
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	2064      	movs	r0, #100	@ 0x64
 8000d30:	fb00 f303 	mul.w	r3, r0, r3
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	4638      	mov	r0, r7
 8000d38:	490e      	ldr	r1, [pc, #56]	@ (8000d74 <main+0x158>)
 8000d3a:	f004 f97f 	bl	800503c <siprintf>
	  }

	  //strcpy((char*)buf,"Hello World\r\n");

	//Send out buffer (temp or error message)
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf),HAL_MAX_DELAY);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa65 	bl	8000210 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <main+0x15c>)
 8000d52:	f003 fabd 	bl	80042d0 <HAL_UART_Transmit>
	  //wait
	  HAL_Delay(500);
 8000d56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d5a:	f000 fc6f 	bl	800163c <HAL_Delay>
	  buf[0] = REG_TEMP;
 8000d5e:	e76e      	b.n	8000c3e <main+0x22>
 8000d60:	200000a0 	.word	0x200000a0
 8000d64:	08005994 	.word	0x08005994
 8000d68:	3fb00000 	.word	0x3fb00000
 8000d6c:	42c80000 	.word	0x42c80000
 8000d70:	51eb851f 	.word	0x51eb851f
 8000d74:	080059a0 	.word	0x080059a0
 8000d78:	200000f4 	.word	0x200000f4

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	@ 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2234      	movs	r2, #52	@ 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 f976 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	4a28      	ldr	r2, [pc, #160]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db0:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <SystemClock_Config+0xd4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <SystemClock_Config+0xd4>)
 8000dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <SystemClock_Config+0xd4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ddc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000de0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000df0:	23a8      	movs	r3, #168	@ 0xa8
 8000df2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 ff75 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e10:	f000 f98a 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2105      	movs	r1, #5
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 f8ea 	bl	800300c <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e3e:	f000 f973 	bl	8001128 <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	@ 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <MX_CAN1_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e60:	2210      	movs	r2, #16
 8000e62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e7e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <MX_CAN1_Init+0x64>)
 8000ea6:	f000 fbed 	bl	8001684 <HAL_CAN_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000eb0:	f000 f93a 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000078 	.word	0x20000078
 8000ebc:	40006400 	.word	0x40006400

08000ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <MX_I2C1_Init+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_I2C1_Init+0x58>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000efe:	f000 ff51 	bl	8001da4 <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f90e 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000a0 	.word	0x200000a0
 8000f14:	40005400 	.word	0x40005400
 8000f18:	000186a0 	.word	0x000186a0

08000f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_USART3_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f54:	f003 f96c 	bl	8004230 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f8e3 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000f4 	.word	0x200000f4
 8000f6c:	40004800 	.word	0x40004800

08000f70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2206      	movs	r2, #6
 8000f80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	f001 fef0 	bl	8002d98 <HAL_PCD_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f8b3 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000013c 	.word	0x2000013c

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a4b      	ldr	r2, [pc, #300]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a44      	ldr	r2, [pc, #272]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b42      	ldr	r3, [pc, #264]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a3d      	ldr	r2, [pc, #244]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a36      	ldr	r2, [pc, #216]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a2f      	ldr	r2, [pc, #188]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001090:	4822      	ldr	r0, [pc, #136]	@ (800111c <MX_GPIO_Init+0x150>)
 8001092:	f000 fe6d 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2140      	movs	r1, #64	@ 0x40
 800109a:	4821      	ldr	r0, [pc, #132]	@ (8001120 <MX_GPIO_Init+0x154>)
 800109c:	f000 fe68 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481b      	ldr	r0, [pc, #108]	@ (8001124 <MX_GPIO_Init+0x158>)
 80010b8:	f000 fcc6 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010bc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_GPIO_Init+0x150>)
 80010d6:	f000 fcb7 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010da:	2340      	movs	r3, #64	@ 0x40
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <MX_GPIO_Init+0x154>)
 80010f2:	f000 fca9 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_GPIO_Init+0x154>)
 800110a:	f000 fc9d 	bl	8001a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400
 8001120:	40021800 	.word	0x40021800
 8001124:	40020800 	.word	0x40020800

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <Error_Handler+0x8>

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <HAL_MspInit+0x4c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <HAL_MspInit+0x4c>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_CAN_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_CAN_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011de:	2303      	movs	r3, #3
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011ee:	2309      	movs	r3, #9
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_CAN_MspInit+0x8c>)
 80011fa:	f000 fc25 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40006400 	.word	0x40006400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020c00 	.word	0x40020c00

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <HAL_I2C_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12c      	bne.n	8001290 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_I2C_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <HAL_I2C_MspInit+0x88>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_I2C_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001252:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001264:	2304      	movs	r3, #4
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <HAL_I2C_MspInit+0x8c>)
 8001270:	f000 fbea 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_I2C_MspInit+0x88>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_I2C_MspInit+0x88>)
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_I2C_MspInit+0x88>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	@ 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005400 	.word	0x40005400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <HAL_UART_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12c      	bne.n	8001320 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a17      	ldr	r2, [pc, #92]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_UART_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001310:	2307      	movs	r3, #7
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_UART_MspInit+0x8c>)
 800131c:	f000 fb94 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40004800 	.word	0x40004800
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0a0      	sub	sp, #128	@ 0x80
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	225c      	movs	r2, #92	@ 0x5c
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fe91 	bl	800507c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001362:	d14e      	bne.n	8001402 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001368:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800136a:	2300      	movs	r3, #0
 800136c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f001 ff64 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f7ff fed3 	bl	8001128 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a20      	ldr	r2, [pc, #128]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800139e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b0:	230a      	movs	r3, #10
 80013b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4815      	ldr	r0, [pc, #84]	@ (8001410 <HAL_PCD_MspInit+0xdc>)
 80013bc:	f000 fb44 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013d2:	4619      	mov	r1, r3
 80013d4:	480e      	ldr	r0, [pc, #56]	@ (8001410 <HAL_PCD_MspInit+0xdc>)
 80013d6:	f000 fb37 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_PCD_MspInit+0xd8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3780      	adds	r7, #128	@ 0x80
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 f8c7 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f003 fdf2 	bl	800508c <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000620 	.word	0x20000620
 80014dc:	20000770 	.word	0x20000770

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001508:	f7ff ffea 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	@ (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001532:	f003 fdb1 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fb71 	bl	8000c1c <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001548:	08005a08 	.word	0x08005a08
  ldr r2, =_sbss
 800154c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001550:	20000770 	.word	0x20000770

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 fa2d 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fdd2 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fa37 	bl	8001a2e <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 fa0d 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	20000624 	.word	0x20000624

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000624 	.word	0x20000624

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0ed      	b.n	8001872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd6e 	bl	8001184 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff ffb4 	bl	8001624 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff ffb0 	bl	8001624 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c5      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0e5      	beq.n	80016c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0202 	bic.w	r2, r2, #2
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff ff8e 	bl	8001624 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff ff8a 	bl	8001624 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e09f      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e5b      	ldrb	r3, [r3, #25]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0220 	bic.w	r2, r2, #32
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7edb      	ldrb	r3, [r3, #27]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0210 	bic.w	r2, r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0210 	orr.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7f1b      	ldrb	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f5b      	ldrb	r3, [r3, #29]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	@ (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff47 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff5c 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffb0 	bl	800199c <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e165      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8154 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d130      	bne.n	8001afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0201 	and.w	r2, r3, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d017      	beq.n	8001b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80ae 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bde:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a58      	ldr	r2, [pc, #352]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	@ (8001d50 <HAL_GPIO_Init+0x308>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x21a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	@ (8001d54 <HAL_GPIO_Init+0x30c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x216>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	@ (8001d58 <HAL_GPIO_Init+0x310>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x212>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	@ (8001d5c <HAL_GPIO_Init+0x314>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x20e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	@ (8001d60 <HAL_GPIO_Init+0x318>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x20a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	@ (8001d64 <HAL_GPIO_Init+0x31c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x206>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	@ (8001d68 <HAL_GPIO_Init+0x320>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x202>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a31      	ldr	r2, [pc, #196]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae96 	bls.w	8001a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e12b      	b.n	800200e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fa22 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	@ 0x24
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f001 f9f2 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a81      	ldr	r2, [pc, #516]	@ (8002018 <HAL_I2C_Init+0x274>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x84>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a80      	ldr	r2, [pc, #512]	@ (800201c <HAL_I2C_Init+0x278>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x92>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002020 <HAL_I2C_Init+0x27c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0e7      	b.n	800200e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a78      	ldr	r2, [pc, #480]	@ (8002024 <HAL_I2C_Init+0x280>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002018 <HAL_I2C_Init+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xd4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xe8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_I2C_Init+0x284>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	495c      	ldr	r1, [pc, #368]	@ (8002018 <HAL_I2C_Init+0x274>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d819      	bhi.n	8001ee0 <HAL_I2C_Init+0x13c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_I2C_Init+0x138>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e59      	subs	r1, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	e051      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e04f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_I2C_Init+0x168>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e012      	b.n	8001f32 <HAL_I2C_Init+0x18e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x196>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e022      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10e      	bne.n	8001f60 <HAL_I2C_Init+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	440b      	add	r3, r1
 8001f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f5e:	e00f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	6809      	ldr	r1, [r1, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6911      	ldr	r1, [r2, #16]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68d2      	ldr	r2, [r2, #12]
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	000186a0 	.word	0x000186a0
 800201c:	001e847f 	.word	0x001e847f
 8002020:	003d08ff 	.word	0x003d08ff
 8002024:	431bde83 	.word	0x431bde83
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff faf0 	bl	8001624 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 80e0 	bne.w	8002214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	4970      	ldr	r1, [pc, #448]	@ (8002220 <HAL_I2C_Master_Transmit+0x1f4>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fc64 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e0d3      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2C_Master_Transmit+0x50>
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2221      	movs	r2, #33	@ 0x21
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2210      	movs	r2, #16
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a50      	ldr	r2, [pc, #320]	@ (8002224 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 face 	bl	800268c <I2C_MasterRequestWrite>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08d      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002110:	e066      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fd22 	bl	8002b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	6a39      	ldr	r1, [r7, #32]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fd19 	bl	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01a      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d194      	bne.n	8002112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	@ 0x30
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff f9f2 	bl	8001624 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	f040 8217 	bne.w	800267e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2319      	movs	r3, #25
 8002256:	2201      	movs	r2, #1
 8002258:	497c      	ldr	r1, [pc, #496]	@ (800244c <HAL_I2C_Master_Receive+0x224>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fb66 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	e20a      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Master_Receive+0x50>
 8002274:	2302      	movs	r3, #2
 8002276:	e203      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d007      	beq.n	800229e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2222      	movs	r2, #34	@ 0x22
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2210      	movs	r2, #16
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002450 <HAL_I2C_Master_Receive+0x228>)
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fa52 	bl	8002790 <I2C_MasterRequestRead>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1c4      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d113      	bne.n	8002326 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e198      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232a:	2b01      	cmp	r3, #1
 800232c:	d11b      	bne.n	8002366 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e178      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	2b02      	cmp	r3, #2
 800236c:	d11b      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800238c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	e158      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023cc:	e144      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	f200 80f1 	bhi.w	80025ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d123      	bne.n	8002428 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fc4b 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e145      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002426:	e117      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	2b02      	cmp	r3, #2
 800242e:	d14e      	bne.n	80024ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	4906      	ldr	r1, [pc, #24]	@ (8002454 <HAL_I2C_Master_Receive+0x22c>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa76 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e11a      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000
 8002454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024cc:	e0c4      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	2200      	movs	r2, #0
 80024d6:	496c      	ldr	r1, [pc, #432]	@ (8002688 <HAL_I2C_Master_Receive+0x460>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa27 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0cb      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002530:	2200      	movs	r2, #0
 8002532:	4955      	ldr	r1, [pc, #340]	@ (8002688 <HAL_I2C_Master_Receive+0x460>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9f9 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e09d      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025b8:	e04e      	b.n	8002658 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fb5e 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e058      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d124      	bne.n	8002658 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002624:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f aeb6 	bne.w	80023ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	@ 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	00010004 	.word	0x00010004

0800268c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d006      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d003      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e00b      	b.n	80026e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d107      	bne.n	80026e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f91d 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002706:	d103      	bne.n	8002710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e035      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800271c:	d108      	bne.n	8002730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e01b      	b.n	8002768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	11db      	asrs	r3, r3, #7
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 0306 	and.w	r3, r3, #6
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f063 030f 	orn	r3, r3, #15
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <I2C_MasterRequestWrite+0xfc>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f966 	bl	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e010      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <I2C_MasterRequestWrite+0x100>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f956 	bl	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	00010008 	.word	0x00010008
 800278c:	00010002 	.word	0x00010002

08002790 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d006      	beq.n	80027ca <I2C_MasterRequestRead+0x3a>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d003      	beq.n	80027ca <I2C_MasterRequestRead+0x3a>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027c8:	d108      	bne.n	80027dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00b      	b.n	80027f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	2b11      	cmp	r3, #17
 80027e2:	d107      	bne.n	80027f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f893 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800281a:	d103      	bne.n	8002824 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e079      	b.n	800291c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002830:	d108      	bne.n	8002844 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	e05f      	b.n	8002904 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	11db      	asrs	r3, r3, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 030f 	orn	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4930      	ldr	r1, [pc, #192]	@ (8002924 <I2C_MasterRequestRead+0x194>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8dc 	bl	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e054      	b.n	800291c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4929      	ldr	r1, [pc, #164]	@ (8002928 <I2C_MasterRequestRead+0x198>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8cc 	bl	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e044      	b.n	800291c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f831 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028de:	d103      	bne.n	80028e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e017      	b.n	800291c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028ec:	897b      	ldrh	r3, [r7, #10]
 80028ee:	11db      	asrs	r3, r3, #7
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0306 	and.w	r3, r3, #6
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f063 030e 	orn	r3, r3, #14
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <I2C_MasterRequestRead+0x198>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f888 	bl	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	00010008 	.word	0x00010008
 8002928:	00010002 	.word	0x00010002

0800292c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800293c:	e048      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d044      	beq.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7fe fe6d 	bl	8001624 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d139      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10d      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	e00c      	b.n	800299c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d116      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e023      	b.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10d      	bne.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	e00c      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d093      	beq.n	800293e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a2e:	e071      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d123      	bne.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e067      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d041      	beq.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a90:	f7fe fdc8 	bl	8001624 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d136      	bne.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10c      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e00b      	b.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e021      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10c      	bne.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e00b      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f af6d 	bne.w	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6c:	e034      	b.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f8e3 	bl	8002d3a <I2C_IsAcknowledgeFailed>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e034      	b.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d028      	beq.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe fd4d 	bl	8001624 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11d      	bne.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b80      	cmp	r3, #128	@ 0x80
 8002ba8:	d016      	beq.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e007      	b.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b80      	cmp	r3, #128	@ 0x80
 8002be4:	d1c3      	bne.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bfc:	e034      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f89b 	bl	8002d3a <I2C_IsAcknowledgeFailed>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e034      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d028      	beq.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe fd05 	bl	8001624 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11d      	bne.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d016      	beq.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d1c3      	bne.n	8002bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8c:	e049      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d119      	bne.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e030      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fca8 	bl	8001624 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11d      	bne.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d016      	beq.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2c:	2b40      	cmp	r3, #64	@ 0x40
 8002d2e:	d1ae      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d50:	d11b      	bne.n	8002d8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e108      	b.n	8002fbc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe fab5 	bl	8001334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd8:	d102      	bne.n	8002de0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fe93 	bl	8004b10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7c1a      	ldrb	r2, [r3, #16]
 8002df2:	f88d 2000 	strb.w	r2, [sp]
 8002df6:	3304      	adds	r3, #4
 8002df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfa:	f001 fe25 	bl	8004a48 <USB_CoreInit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d5      	b.n	8002fbc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fe8b 	bl	8004b32 <USB_SetCurrentMode>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0c6      	b.n	8002fbc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e04a      	b.n	8002eca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3315      	adds	r3, #21
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3314      	adds	r3, #20
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	b298      	uxth	r0, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	332e      	adds	r3, #46	@ 0x2e
 8002e70:	4602      	mov	r2, r0
 8002e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3318      	adds	r3, #24
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331c      	adds	r3, #28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3320      	adds	r3, #32
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3324      	adds	r3, #36	@ 0x24
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3af      	bcc.n	8002e34 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e044      	b.n	8002f64 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	3301      	adds	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	791b      	ldrb	r3, [r3, #4]
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3b5      	bcc.n	8002eda <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7c1a      	ldrb	r2, [r3, #16]
 8002f76:	f88d 2000 	strb.w	r2, [sp]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	f001 fe25 	bl	8004bcc <USB_DevInit>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e013      	b.n	8002fbc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7b1b      	ldrb	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f80a 	bl	8002fc4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 ffe0 	bl	8004f7a <USB_DevDisconnect>

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	f043 0303 	orr.w	r3, r3, #3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0cc      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b68      	ldr	r3, [pc, #416]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d90c      	bls.n	8003048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b65      	ldr	r3, [pc, #404]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b63      	ldr	r3, [pc, #396]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0b8      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003060:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800306a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003078:	4b53      	ldr	r3, [pc, #332]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a52      	ldr	r2, [pc, #328]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003084:	4b50      	ldr	r3, [pc, #320]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	494d      	ldr	r1, [pc, #308]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d044      	beq.n	800312c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d119      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e07f      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	4b3f      	ldr	r3, [pc, #252]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e06f      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	4b3b      	ldr	r3, [pc, #236]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e067      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4b37      	ldr	r3, [pc, #220]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4934      	ldr	r1, [pc, #208]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030fc:	f7fe fa92 	bl	8001624 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe fa8e 	bl	8001624 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e04f      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b2b      	ldr	r3, [pc, #172]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 020c 	and.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1eb      	bne.n	8003104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d20c      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b20      	ldr	r3, [pc, #128]	@ (80031c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e032      	b.n	80031ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4916      	ldr	r1, [pc, #88]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	490e      	ldr	r1, [pc, #56]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003192:	f000 fb7f 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003196:	4602      	mov	r2, r0
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	490a      	ldr	r1, [pc, #40]	@ (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	5ccb      	ldrb	r3, [r1, r3]
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe f9f2 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00
 80031c8:	40023800 	.word	0x40023800
 80031cc:	080059ac 	.word	0x080059ac
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b03      	ldr	r3, [pc, #12]	@ (80031ec <HAL_RCC_GetHCLKFreq+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031f4:	f7ff fff0 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0a9b      	lsrs	r3, r3, #10
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	@ (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	080059bc 	.word	0x080059bc

08003218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800321c:	f7ff ffdc 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0b5b      	lsrs	r3, r3, #13
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	@ (800323c <HAL_RCC_GetPCLK2Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	080059bc 	.word	0x080059bc

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	@ 0x30
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003278:	4b6f      	ldr	r3, [pc, #444]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800327a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800327e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003286:	496c      	ldr	r1, [pc, #432]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003296:	2301      	movs	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032a6:	4b64      	ldr	r3, [pc, #400]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ac:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	4960      	ldr	r1, [pc, #384]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4955      	ldr	r1, [pc, #340]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f2:	d101      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80032f4:	2301      	movs	r3, #1
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003300:	2301      	movs	r3, #1
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003316:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331e:	4946      	ldr	r1, [pc, #280]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332e:	d101      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003330:	2301      	movs	r3, #1
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808a 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a38      	ldr	r2, [pc, #224]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800336a:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003376:	f7fe f955 	bl	8001624 <HAL_GetTick>
 800337a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fe f951 	bl	8001624 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e278      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003390:	4b2a      	ldr	r3, [pc, #168]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339c:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d028      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d114      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe f91f 	bl	8001624 <HAL_GetTick>
 80033e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe f91b 	bl	8001624 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e240      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003418:	d114      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800342a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342e:	4902      	ldr	r1, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	e00c      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470e40 	.word	0x42470e40
 8003444:	4b4a      	ldr	r3, [pc, #296]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a49      	ldr	r2, [pc, #292]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800344a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800344e:	6093      	str	r3, [r2, #8]
 8003450:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	4944      	ldr	r1, [pc, #272]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800345e:	4313      	orrs	r3, r2
 8003460:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003474:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003476:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003484:	4b3a      	ldr	r3, [pc, #232]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	4937      	ldr	r1, [pc, #220]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034a6:	4b32      	ldr	r3, [pc, #200]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b4:	492e      	ldr	r1, [pc, #184]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d011      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034c8:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ce:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	4926      	ldr	r1, [pc, #152]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e6:	d101      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80034e8:	2301      	movs	r3, #1
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	491a      	ldr	r1, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d011      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800351a:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003520:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	4911      	ldr	r1, [pc, #68]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003538:	d101      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800353a:	2301      	movs	r3, #1
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d005      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354c:	f040 80ff 	bne.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003550:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003556:	f7fe f865 	bl	8001624 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800355c:	e00e      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800355e:	f7fe f861 	bl	8001624 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d907      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e188      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003570:	40023800 	.word	0x40023800
 8003574:	424711e0 	.word	0x424711e0
 8003578:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800357c:	4b7e      	ldr	r3, [pc, #504]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ea      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d028      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d124      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035b0:	4b71      	ldr	r3, [pc, #452]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	3301      	adds	r3, #1
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	431a      	orrs	r2, r3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	071b      	lsls	r3, r3, #28
 80035f2:	4961      	ldr	r1, [pc, #388]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003618:	2b00      	cmp	r3, #0
 800361a:	d035      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003624:	d130      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003626:	4b54      	ldr	r3, [pc, #336]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003638:	4b4f      	ldr	r3, [pc, #316]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363e:	0f1b      	lsrs	r3, r3, #28
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	431a      	orrs	r2, r3
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	431a      	orrs	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	071b      	lsls	r3, r3, #28
 8003668:	4943      	ldr	r1, [pc, #268]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003670:	4b41      	ldr	r3, [pc, #260]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003676:	f023 021f 	bic.w	r2, r3, #31
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	493d      	ldr	r1, [pc, #244]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d029      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369c:	d124      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800369e:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b0:	4b31      	ldr	r3, [pc, #196]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b6:	0f1b      	lsrs	r3, r3, #28
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	019b      	lsls	r3, r3, #6
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	071b      	lsls	r3, r3, #28
 80036e0:	4925      	ldr	r1, [pc, #148]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	4917      	ldr	r1, [pc, #92]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003722:	4b16      	ldr	r3, [pc, #88]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003728:	f7fd ff7c 	bl	8001624 <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003730:	f7fd ff78 	bl	8001624 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e09f      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003742:	4b0d      	ldr	r3, [pc, #52]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 8095 	bne.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003756:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800375c:	f7fd ff62 	bl	8001624 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003762:	e00f      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003764:	f7fd ff5e 	bl	8001624 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d908      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e085      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	42470068 	.word	0x42470068
 8003780:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003784:	4b41      	ldr	r3, [pc, #260]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800378c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003790:	d0e8      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d127      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037ba:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	4928      	ldr	r1, [pc, #160]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037f0:	4b26      	ldr	r3, [pc, #152]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	3b01      	subs	r3, #1
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	4922      	ldr	r1, [pc, #136]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01d      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800381e:	d118      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	0e1b      	lsrs	r3, r3, #24
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	019b      	lsls	r3, r3, #6
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	3b01      	subs	r3, #1
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4910      	ldr	r1, [pc, #64]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003852:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003858:	f7fd fee4 	bl	8001624 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003860:	f7fd fee0 	bl	8001624 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e007      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800387a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387e:	d1ef      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3730      	adds	r7, #48	@ 0x30
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	42470070 	.word	0x42470070

08003894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003898:	b0ae      	sub	sp, #184	@ 0xb8
 800389a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ba:	4bcb      	ldr	r3, [pc, #812]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	f200 8206 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x440>
 80038c8:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003cd5 	.word	0x08003cd5
 80038d8:	08003cd5 	.word	0x08003cd5
 80038dc:	08003cd5 	.word	0x08003cd5
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	08003cd5 	.word	0x08003cd5
 80038e8:	08003cd5 	.word	0x08003cd5
 80038ec:	08003cd5 	.word	0x08003cd5
 80038f0:	08003915 	.word	0x08003915
 80038f4:	08003cd5 	.word	0x08003cd5
 80038f8:	08003cd5 	.word	0x08003cd5
 80038fc:	08003cd5 	.word	0x08003cd5
 8003900:	08003b05 	.word	0x08003b05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4bb9      	ldr	r3, [pc, #740]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800390a:	e1e7      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4bb8      	ldr	r3, [pc, #736]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003912:	e1e3      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003914:	4bb4      	ldr	r3, [pc, #720]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800391c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003920:	4bb1      	ldr	r3, [pc, #708]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d071      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392c:	4bae      	ldr	r3, [pc, #696]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003938:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800394e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	f04f 0000 	mov.w	r0, #0
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	0159      	lsls	r1, r3, #5
 8003960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003964:	0150      	lsls	r0, r2, #5
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4621      	mov	r1, r4
 800396c:	1a51      	subs	r1, r2, r1
 800396e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003970:	4629      	mov	r1, r5
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	647b      	str	r3, [r7, #68]	@ 0x44
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003984:	4649      	mov	r1, r9
 8003986:	018b      	lsls	r3, r1, #6
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398e:	4641      	mov	r1, r8
 8003990:	018a      	lsls	r2, r1, #6
 8003992:	4641      	mov	r1, r8
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003998:	4649      	mov	r1, r9
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039ac:	4649      	mov	r1, r9
 80039ae:	00cb      	lsls	r3, r1, #3
 80039b0:	4641      	mov	r1, r8
 80039b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b6:	4641      	mov	r1, r8
 80039b8:	00ca      	lsls	r2, r1, #3
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	4622      	mov	r2, r4
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c6:	462b      	mov	r3, r5
 80039c8:	460a      	mov	r2, r1
 80039ca:	eb42 0303 	adc.w	r3, r2, r3
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039dc:	4629      	mov	r1, r5
 80039de:	024b      	lsls	r3, r1, #9
 80039e0:	4621      	mov	r1, r4
 80039e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e6:	4621      	mov	r1, r4
 80039e8:	024a      	lsls	r2, r1, #9
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a00:	f7fc ff94 	bl	800092c <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a0e:	e067      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4b75      	ldr	r3, [pc, #468]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	f04f 0000 	mov.w	r0, #0
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	0159      	lsls	r1, r3, #5
 8003a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a44:	0150      	lsls	r0, r2, #5
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	1a51      	subs	r1, r2, r1
 8003a4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a50:	4629      	mov	r1, r5
 8003a52:	eb63 0301 	sbc.w	r3, r3, r1
 8003a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a64:	4649      	mov	r1, r9
 8003a66:	018b      	lsls	r3, r1, #6
 8003a68:	4641      	mov	r1, r8
 8003a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6e:	4641      	mov	r1, r8
 8003a70:	018a      	lsls	r2, r1, #6
 8003a72:	4641      	mov	r1, r8
 8003a74:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a78:	4649      	mov	r1, r9
 8003a7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a92:	4692      	mov	sl, r2
 8003a94:	469b      	mov	fp, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ac8:	2200      	movs	r2, #0
 8003aca:	673b      	str	r3, [r7, #112]	@ 0x70
 8003acc:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ad2:	f7fc ff2b 	bl	800092c <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae0:	4b41      	ldr	r3, [pc, #260]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b02:	e0eb      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b04:	4b38      	ldr	r3, [pc, #224]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b10:	4b35      	ldr	r3, [pc, #212]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d06b      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1c:	4b32      	ldr	r3, [pc, #200]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b30:	2300      	movs	r3, #0
 8003b32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0159      	lsls	r1, r3, #5
 8003b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4a:	0150      	lsls	r0, r2, #5
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4621      	mov	r1, r4
 8003b52:	1a51      	subs	r1, r2, r1
 8003b54:	61b9      	str	r1, [r7, #24]
 8003b56:	4629      	mov	r1, r5
 8003b58:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b6a:	4659      	mov	r1, fp
 8003b6c:	018b      	lsls	r3, r1, #6
 8003b6e:	4651      	mov	r1, sl
 8003b70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b74:	4651      	mov	r1, sl
 8003b76:	018a      	lsls	r2, r1, #6
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ebb2 0801 	subs.w	r8, r2, r1
 8003b7e:	4659      	mov	r1, fp
 8003b80:	eb63 0901 	sbc.w	r9, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b98:	4690      	mov	r8, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	eb18 0303 	adds.w	r3, r8, r3
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	eb49 0303 	adc.w	r3, r9, r3
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bb8:	4629      	mov	r1, r5
 8003bba:	024b      	lsls	r3, r1, #9
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	024a      	lsls	r2, r1, #9
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bce:	2200      	movs	r2, #0
 8003bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bd2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bd8:	f7fc fea8 	bl	800092c <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003be6:	e065      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x420>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x458>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4611      	mov	r1, r2
 8003c00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c06:	2300      	movs	r3, #0
 8003c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c0e:	4642      	mov	r2, r8
 8003c10:	464b      	mov	r3, r9
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4641      	mov	r1, r8
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c40:	4659      	mov	r1, fp
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4651      	mov	r1, sl
 8003c50:	1a54      	subs	r4, r2, r1
 8003c52:	4659      	mov	r1, fp
 8003c54:	eb63 0501 	sbc.w	r5, r3, r1
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	00eb      	lsls	r3, r5, #3
 8003c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c66:	00e2      	lsls	r2, r4, #3
 8003c68:	4614      	mov	r4, r2
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	18e3      	adds	r3, r4, r3
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	464b      	mov	r3, r9
 8003c74:	eb45 0303 	adc.w	r3, r5, r3
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c86:	4629      	mov	r1, r5
 8003c88:	028b      	lsls	r3, r1, #10
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c90:	4621      	mov	r1, r4
 8003c92:	028a      	lsls	r2, r1, #10
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ca2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ca6:	f7fc fe41 	bl	800092c <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4613      	mov	r3, r2
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x458>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	0f1b      	lsrs	r3, r3, #28
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	37b8      	adds	r7, #184	@ 0xb8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400

08003cf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e28d      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8083 	beq.w	8003e1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d14:	4b94      	ldr	r3, [pc, #592]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d019      	beq.n	8003d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d20:	4b91      	ldr	r3, [pc, #580]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d38:	d00c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d112      	bne.n	8003d6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b88      	ldr	r3, [pc, #544]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	4b84      	ldr	r3, [pc, #528]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05b      	beq.n	8003e18 <HAL_RCC_OscConfig+0x124>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d157      	bne.n	8003e18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e25a      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d74:	d106      	bne.n	8003d84 <HAL_RCC_OscConfig+0x90>
 8003d76:	4b7c      	ldr	r3, [pc, #496]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e01d      	b.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0xb4>
 8003d8e:	4b76      	ldr	r3, [pc, #472]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a75      	ldr	r2, [pc, #468]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b73      	ldr	r3, [pc, #460]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a72      	ldr	r2, [pc, #456]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
 8003da8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6e      	ldr	r2, [pc, #440]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b6c      	ldr	r3, [pc, #432]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fc2c 	bl	8001624 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fc28 	bl	8001624 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e21f      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b61      	ldr	r3, [pc, #388]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xdc>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fc18 	bl	8001624 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fd fc14 	bl	8001624 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	@ 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e20b      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	4b57      	ldr	r3, [pc, #348]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x104>
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d06f      	beq.n	8003f06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e26:	4b50      	ldr	r3, [pc, #320]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d017      	beq.n	8003e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e32:	4b4d      	ldr	r3, [pc, #308]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b47      	ldr	r3, [pc, #284]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d11c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b44      	ldr	r3, [pc, #272]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	4b41      	ldr	r3, [pc, #260]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x186>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e1d3      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4937      	ldr	r1, [pc, #220]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	e03a      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e98:	4b34      	ldr	r3, [pc, #208]	@ (8003f6c <HAL_RCC_OscConfig+0x278>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fbc1 	bl	8001624 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fbbd 	bl	8001624 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1b4      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b28      	ldr	r3, [pc, #160]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4925      	ldr	r1, [pc, #148]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x278>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fba0 	bl	8001624 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fd fb9c 	bl	8001624 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e193      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d036      	beq.n	8003f80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd fb80 	bl	8001624 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd fb7c 	bl	8001624 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e173      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x234>
 8003f46:	e01b      	b.n	8003f80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f48:	4b09      	ldr	r3, [pc, #36]	@ (8003f70 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fb69 	bl	8001624 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd fb65 	bl	8001624 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e15c      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	42470000 	.word	0x42470000
 8003f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4b8a      	ldr	r3, [pc, #552]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8097 	beq.w	80040bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b83      	ldr	r3, [pc, #524]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fae:	4b7c      	ldr	r3, [pc, #496]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b79      	ldr	r3, [pc, #484]	@ (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fb25 	bl	8001624 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fd fb21 	bl	8001624 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e118      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x31e>
 8004004:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x358>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x340>
 800401a:	4b61      	ldr	r3, [pc, #388]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	4a60      	ldr	r2, [pc, #384]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	@ 0x70
 8004026:	4b5e      	ldr	r3, [pc, #376]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a5d      	ldr	r2, [pc, #372]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x358>
 8004034:	4b5a      	ldr	r3, [pc, #360]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4a59      	ldr	r2, [pc, #356]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004040:	4b57      	ldr	r3, [pc, #348]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004044:	4a56      	ldr	r2, [pc, #344]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd fae6 	bl	8001624 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fae2 	bl	8001624 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0d7      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b4b      	ldr	r3, [pc, #300]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x368>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd fad0 	bl	8001624 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd facc 	bl	8001624 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0c1      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409e:	4b40      	ldr	r3, [pc, #256]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	4a3a      	ldr	r2, [pc, #232]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80ad 	beq.w	8004220 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c6:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d060      	beq.n	8004194 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d145      	bne.n	8004166 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b33      	ldr	r3, [pc, #204]	@ (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd faa0 	bl	8001624 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fa9c 	bl	8001624 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e093      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	491b      	ldr	r1, [pc, #108]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fa71 	bl	8001624 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd fa6d 	bl	8001624 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e064      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x452>
 8004164:	e05c      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b10      	ldr	r3, [pc, #64]	@ (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fa5a 	bl	8001624 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd fa56 	bl	8001624 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04d      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x480>
 8004192:	e045      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e040      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
 80041a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	@ (800422c <HAL_RCC_OscConfig+0x538>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d030      	beq.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d129      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d122      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d119      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10f      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd f824 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f973 	bl	8004560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	@ 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d175      	bne.n	80043dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Transmit+0x2c>
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e06e      	b.n	80043de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430e:	f7fd f989 	bl	8001624 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x6c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004344:	e02e      	b.n	80043a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	@ 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f848 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e03a      	b.n	80043de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e007      	b.n	8004396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1cb      	bne.n	8004346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	@ 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f814 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	e03b      	b.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d037      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fd f910 	bl	8001624 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <UART_WaitOnFlagUntilTimeout+0x30>
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e03a      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d023      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b80      	cmp	r3, #128	@ 0x80
 800442c:	d020      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d01d      	beq.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b08      	cmp	r3, #8
 8004440:	d116      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f81d 	bl	8004498 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2208      	movs	r2, #8
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e00f      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	429a      	cmp	r2, r3
 800448c:	d0b4      	beq.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b095      	sub	sp, #84	@ 0x54
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	2b01      	cmp	r3, #1
 800450e:	d119      	bne.n	8004544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0310 	bic.w	r3, r3, #16
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004530:	61ba      	str	r2, [r7, #24]
 8004532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6979      	ldr	r1, [r7, #20]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	613b      	str	r3, [r7, #16]
   return(result);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004552:	bf00      	nop
 8004554:	3754      	adds	r7, #84	@ 0x54
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b0c0      	sub	sp, #256	@ 0x100
 8004566:	af00      	add	r7, sp, #0
 8004568:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045b8:	f021 010c 	bic.w	r1, r1, #12
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	ea40 0301 	orr.w	r3, r0, r1
 80045e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8f      	ldr	r3, [pc, #572]	@ (800482c <UART_SetConfig+0x2cc>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0xa0>
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004830 <UART_SetConfig+0x2d0>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe fe0a 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8004604:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004608:	e003      	b.n	8004612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7fe fdf1 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 800460e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461c:	f040 810c 	bne.w	8004838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800462a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800462e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	1891      	adds	r1, r2, r2
 8004638:	65b9      	str	r1, [r7, #88]	@ 0x58
 800463a:	415b      	adcs	r3, r3
 800463c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004642:	4621      	mov	r1, r4
 8004644:	eb12 0801 	adds.w	r8, r2, r1
 8004648:	4629      	mov	r1, r5
 800464a:	eb43 0901 	adc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004686:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800468a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	653b      	str	r3, [r7, #80]	@ 0x50
 8004694:	4613      	mov	r3, r2
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	657b      	str	r3, [r7, #84]	@ 0x54
 800469c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a4:	f7fc f942 	bl	800092c <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	@ (8004834 <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046d0:	415b      	adcs	r3, r3
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046d8:	4641      	mov	r1, r8
 80046da:	eb12 0a01 	adds.w	sl, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0b01 	adc.w	fp, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	4692      	mov	sl, r2
 80046fa:	469b      	mov	fp, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004706:	464b      	mov	r3, r9
 8004708:	eb4b 0303 	adc.w	r3, fp, r3
 800470c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800471c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	643b      	str	r3, [r7, #64]	@ 0x40
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800473a:	f7fc f8f7 	bl	800092c <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b3b      	ldr	r3, [pc, #236]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	@ 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800475a:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <UART_SetConfig+0x2d4>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004784:	415b      	adcs	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6339      	str	r1, [r7, #48]	@ 0x30
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047e0:	460b      	mov	r3, r1
 80047e2:	18db      	adds	r3, r3, r3
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e6:	4613      	mov	r3, r2
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047f6:	f7fc f899 	bl	800092c <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	@ 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	3332      	adds	r3, #50	@ 0x32
 8004812:	4a08      	ldr	r2, [pc, #32]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4422      	add	r2, r4
 8004826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004828:	e106      	b.n	8004a38 <UART_SetConfig+0x4d8>
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004842:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	415b      	adcs	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	4641      	mov	r1, r8
 800485c:	1854      	adds	r4, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0501 	adc.w	r5, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004880:	464b      	mov	r3, r9
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048a6:	4629      	mov	r1, r5
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b0:	4621      	mov	r1, r4
 80048b2:	008a      	lsls	r2, r1, #2
 80048b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048b8:	f7fc f838 	bl	800092c <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b60      	ldr	r3, [pc, #384]	@ (8004a44 <UART_SetConfig+0x4e4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	61b9      	str	r1, [r7, #24]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6139      	str	r1, [r7, #16]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004920:	464b      	mov	r3, r9
 8004922:	460a      	mov	r2, r1
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004936:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004944:	4649      	mov	r1, r9
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494e:	4641      	mov	r1, r8
 8004950:	008a      	lsls	r2, r1, #2
 8004952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004956:	f7fb ffe9 	bl	800092c <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4611      	mov	r1, r2
 8004960:	4b38      	ldr	r3, [pc, #224]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004962:	fba3 2301 	umull	r2, r3, r3, r1
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2264      	movs	r2, #100	@ 0x64
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	1acb      	subs	r3, r1, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	@ 0x32
 8004974:	4a33      	ldr	r2, [pc, #204]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004980:	441c      	add	r4, r3
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	673b      	str	r3, [r7, #112]	@ 0x70
 800498a:	677a      	str	r2, [r7, #116]	@ 0x74
 800498c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	415b      	adcs	r3, r3
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a0:	4641      	mov	r1, r8
 80049a2:	1851      	adds	r1, r2, r1
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	4649      	mov	r1, r9
 80049a8:	414b      	adcs	r3, r1
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b8:	4659      	mov	r1, fp
 80049ba:	00cb      	lsls	r3, r1, #3
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c2:	4651      	mov	r1, sl
 80049c4:	00ca      	lsls	r2, r1, #3
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	4642      	mov	r2, r8
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d2:	464b      	mov	r3, r9
 80049d4:	460a      	mov	r2, r1
 80049d6:	eb42 0303 	adc.w	r3, r2, r3
 80049da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049f4:	4649      	mov	r1, r9
 80049f6:	008b      	lsls	r3, r1, #2
 80049f8:	4641      	mov	r1, r8
 80049fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fe:	4641      	mov	r1, r8
 8004a00:	008a      	lsls	r2, r1, #2
 8004a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a06:	f7fb ff91 	bl	800092c <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004a10:	fba3 1302 	umull	r1, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2164      	movs	r1, #100	@ 0x64
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	3332      	adds	r3, #50	@ 0x32
 8004a22:	4a08      	ldr	r2, [pc, #32]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4422      	add	r2, r4
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 001c 	add.w	r0, r7, #28
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d123      	bne.n	8004aaa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa9a 	bl	8004fd8 <USB_CoreReset>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	e01b      	b.n	8004ae2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa8e 	bl	8004fd8 <USB_CoreReset>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ac0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ad4:	e005      	b.n	8004ae2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ae2:	7fbb      	ldrb	r3, [r7, #30]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10b      	bne.n	8004b00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f043 0206 	orr.w	r2, r3, #6
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr

08004b10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 0201 	bic.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d115      	bne.n	8004b80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b60:	200a      	movs	r0, #10
 8004b62:	f7fc fd6b 	bl	800163c <HAL_Delay>
      ms += 10U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	330a      	adds	r3, #10
 8004b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa25 	bl	8004fbc <USB_GetMode>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d01e      	beq.n	8004bb6 <USB_SetCurrentMode+0x84>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b7c:	d9f0      	bls.n	8004b60 <USB_SetCurrentMode+0x2e>
 8004b7e:	e01a      	b.n	8004bb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d115      	bne.n	8004bb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b92:	200a      	movs	r0, #10
 8004b94:	f7fc fd52 	bl	800163c <HAL_Delay>
      ms += 10U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	330a      	adds	r3, #10
 8004b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa0c 	bl	8004fbc <USB_GetMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <USB_SetCurrentMode+0x84>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bae:	d9f0      	bls.n	8004b92 <USB_SetCurrentMode+0x60>
 8004bb0:	e001      	b.n	8004bb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e005      	b.n	8004bc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004bba:	d101      	bne.n	8004bc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bcc:	b084      	sub	sp, #16
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e009      	b.n	8004c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3340      	adds	r3, #64	@ 0x40
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0e      	cmp	r3, #14
 8004c04:	d9f2      	bls.n	8004bec <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d11c      	bne.n	8004c48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e005      	b.n	8004c54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10d      	bne.n	8004c84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c70:	2100      	movs	r1, #0
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f968 	bl	8004f48 <USB_SetDevSpeed>
 8004c78:	e008      	b.n	8004c8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f963 	bl	8004f48 <USB_SetDevSpeed>
 8004c82:	e003      	b.n	8004c8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c84:	2103      	movs	r1, #3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f95e 	bl	8004f48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c8c:	2110      	movs	r1, #16
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8fa 	bl	8004e88 <USB_FlushTxFifo>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f924 	bl	8004eec <USB_FlushRxFifo>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e043      	b.n	8004d60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cee:	d118      	bne.n	8004d22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d02:	461a      	mov	r2, r3
 8004d04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e013      	b.n	8004d34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e008      	b.n	8004d34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d40:	461a      	mov	r2, r3
 8004d42:	2300      	movs	r3, #0
 8004d44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d52:	461a      	mov	r2, r3
 8004d54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d64:	461a      	mov	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d3b5      	bcc.n	8004cd8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e043      	b.n	8004dfa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d88:	d118      	bne.n	8004dbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e013      	b.n	8004dce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e008      	b.n	8004dce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3301      	adds	r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004dfe:	461a      	mov	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d3b5      	bcc.n	8004d72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f043 0210 	orr.w	r2, r3, #16
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <USB_DevInit+0x2b8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f043 0208 	orr.w	r2, r3, #8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e80:	b004      	add	sp, #16
 8004e82:	4770      	bx	lr
 8004e84:	803c3800 	.word	0x803c3800

08004e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ea2:	d901      	bls.n	8004ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e01b      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	daf2      	bge.n	8004e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ecc:	d901      	bls.n	8004ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e006      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d0f0      	beq.n	8004ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f04:	d901      	bls.n	8004f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e018      	b.n	8004f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	daf2      	bge.n	8004ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2210      	movs	r2, #16
 8004f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f28:	d901      	bls.n	8004f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e006      	b.n	8004f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d0f0      	beq.n	8004f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f94:	f023 0303 	bic.w	r3, r3, #3
 8004f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff0:	d901      	bls.n	8004ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e01b      	b.n	800502e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	daf2      	bge.n	8004fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800501a:	d901      	bls.n	8005020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e006      	b.n	800502e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d0f0      	beq.n	800500e <USB_CoreReset+0x36>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <siprintf>:
 800503c:	b40e      	push	{r1, r2, r3}
 800503e:	b500      	push	{lr}
 8005040:	b09c      	sub	sp, #112	@ 0x70
 8005042:	ab1d      	add	r3, sp, #116	@ 0x74
 8005044:	9002      	str	r0, [sp, #8]
 8005046:	9006      	str	r0, [sp, #24]
 8005048:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800504c:	4809      	ldr	r0, [pc, #36]	@ (8005074 <siprintf+0x38>)
 800504e:	9107      	str	r1, [sp, #28]
 8005050:	9104      	str	r1, [sp, #16]
 8005052:	4909      	ldr	r1, [pc, #36]	@ (8005078 <siprintf+0x3c>)
 8005054:	f853 2b04 	ldr.w	r2, [r3], #4
 8005058:	9105      	str	r1, [sp, #20]
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	a902      	add	r1, sp, #8
 8005060:	f000 f994 	bl	800538c <_svfiprintf_r>
 8005064:	9b02      	ldr	r3, [sp, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	b01c      	add	sp, #112	@ 0x70
 800506c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005070:	b003      	add	sp, #12
 8005072:	4770      	bx	lr
 8005074:	2000000c 	.word	0x2000000c
 8005078:	ffff0208 	.word	0xffff0208

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <__errno>:
 800508c:	4b01      	ldr	r3, [pc, #4]	@ (8005094 <__errno+0x8>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	@ (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	@ (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	@ (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	@ (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 fc66 	bl	800597c <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	08005a00 	.word	0x08005a00
 80050d4:	08005a00 	.word	0x08005a00
 80050d8:	08005a00 	.word	0x08005a00
 80050dc:	08005a04 	.word	0x08005a04

080050e0 <__retarget_lock_acquire_recursive>:
 80050e0:	4770      	bx	lr

080050e2 <__retarget_lock_release_recursive>:
 80050e2:	4770      	bx	lr

080050e4 <_free_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4605      	mov	r5, r0
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d041      	beq.n	8005170 <_free_r+0x8c>
 80050ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f0:	1f0c      	subs	r4, r1, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfb8      	it	lt
 80050f6:	18e4      	addlt	r4, r4, r3
 80050f8:	f000 f8e0 	bl	80052bc <__malloc_lock>
 80050fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005174 <_free_r+0x90>)
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	b933      	cbnz	r3, 8005110 <_free_r+0x2c>
 8005102:	6063      	str	r3, [r4, #4]
 8005104:	6014      	str	r4, [r2, #0]
 8005106:	4628      	mov	r0, r5
 8005108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800510c:	f000 b8dc 	b.w	80052c8 <__malloc_unlock>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d908      	bls.n	8005126 <_free_r+0x42>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	1821      	adds	r1, r4, r0
 8005118:	428b      	cmp	r3, r1
 800511a:	bf01      	itttt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	1809      	addeq	r1, r1, r0
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	e7ed      	b.n	8005102 <_free_r+0x1e>
 8005126:	461a      	mov	r2, r3
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b10b      	cbz	r3, 8005130 <_free_r+0x4c>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x42>
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	1850      	adds	r0, r2, r1
 8005134:	42a0      	cmp	r0, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x6c>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	4401      	add	r1, r0
 800513c:	1850      	adds	r0, r2, r1
 800513e:	4283      	cmp	r3, r0
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	d1e0      	bne.n	8005106 <_free_r+0x22>
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	6053      	str	r3, [r2, #4]
 800514a:	4408      	add	r0, r1
 800514c:	6010      	str	r0, [r2, #0]
 800514e:	e7da      	b.n	8005106 <_free_r+0x22>
 8005150:	d902      	bls.n	8005158 <_free_r+0x74>
 8005152:	230c      	movs	r3, #12
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	e7d6      	b.n	8005106 <_free_r+0x22>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	1821      	adds	r1, r4, r0
 800515c:	428b      	cmp	r3, r1
 800515e:	bf04      	itt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	6063      	str	r3, [r4, #4]
 8005166:	bf04      	itt	eq
 8005168:	1809      	addeq	r1, r1, r0
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	6054      	str	r4, [r2, #4]
 800516e:	e7ca      	b.n	8005106 <_free_r+0x22>
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	2000076c 	.word	0x2000076c

08005178 <sbrk_aligned>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	4e0f      	ldr	r6, [pc, #60]	@ (80051b8 <sbrk_aligned+0x40>)
 800517c:	460c      	mov	r4, r1
 800517e:	6831      	ldr	r1, [r6, #0]
 8005180:	4605      	mov	r5, r0
 8005182:	b911      	cbnz	r1, 800518a <sbrk_aligned+0x12>
 8005184:	f000 fba6 	bl	80058d4 <_sbrk_r>
 8005188:	6030      	str	r0, [r6, #0]
 800518a:	4621      	mov	r1, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f000 fba1 	bl	80058d4 <_sbrk_r>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d103      	bne.n	800519e <sbrk_aligned+0x26>
 8005196:	f04f 34ff 	mov.w	r4, #4294967295
 800519a:	4620      	mov	r0, r4
 800519c:	bd70      	pop	{r4, r5, r6, pc}
 800519e:	1cc4      	adds	r4, r0, #3
 80051a0:	f024 0403 	bic.w	r4, r4, #3
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d0f8      	beq.n	800519a <sbrk_aligned+0x22>
 80051a8:	1a21      	subs	r1, r4, r0
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fb92 	bl	80058d4 <_sbrk_r>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d1f2      	bne.n	800519a <sbrk_aligned+0x22>
 80051b4:	e7ef      	b.n	8005196 <sbrk_aligned+0x1e>
 80051b6:	bf00      	nop
 80051b8:	20000768 	.word	0x20000768

080051bc <_malloc_r>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	1ccd      	adds	r5, r1, #3
 80051c2:	f025 0503 	bic.w	r5, r5, #3
 80051c6:	3508      	adds	r5, #8
 80051c8:	2d0c      	cmp	r5, #12
 80051ca:	bf38      	it	cc
 80051cc:	250c      	movcc	r5, #12
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	4606      	mov	r6, r0
 80051d2:	db01      	blt.n	80051d8 <_malloc_r+0x1c>
 80051d4:	42a9      	cmp	r1, r5
 80051d6:	d904      	bls.n	80051e2 <_malloc_r+0x26>
 80051d8:	230c      	movs	r3, #12
 80051da:	6033      	str	r3, [r6, #0]
 80051dc:	2000      	movs	r0, #0
 80051de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b8 <_malloc_r+0xfc>
 80051e6:	f000 f869 	bl	80052bc <__malloc_lock>
 80051ea:	f8d8 3000 	ldr.w	r3, [r8]
 80051ee:	461c      	mov	r4, r3
 80051f0:	bb44      	cbnz	r4, 8005244 <_malloc_r+0x88>
 80051f2:	4629      	mov	r1, r5
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7ff ffbf 	bl	8005178 <sbrk_aligned>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	4604      	mov	r4, r0
 80051fe:	d158      	bne.n	80052b2 <_malloc_r+0xf6>
 8005200:	f8d8 4000 	ldr.w	r4, [r8]
 8005204:	4627      	mov	r7, r4
 8005206:	2f00      	cmp	r7, #0
 8005208:	d143      	bne.n	8005292 <_malloc_r+0xd6>
 800520a:	2c00      	cmp	r4, #0
 800520c:	d04b      	beq.n	80052a6 <_malloc_r+0xea>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4639      	mov	r1, r7
 8005212:	4630      	mov	r0, r6
 8005214:	eb04 0903 	add.w	r9, r4, r3
 8005218:	f000 fb5c 	bl	80058d4 <_sbrk_r>
 800521c:	4581      	cmp	r9, r0
 800521e:	d142      	bne.n	80052a6 <_malloc_r+0xea>
 8005220:	6821      	ldr	r1, [r4, #0]
 8005222:	1a6d      	subs	r5, r5, r1
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff ffa6 	bl	8005178 <sbrk_aligned>
 800522c:	3001      	adds	r0, #1
 800522e:	d03a      	beq.n	80052a6 <_malloc_r+0xea>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	442b      	add	r3, r5
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	f8d8 3000 	ldr.w	r3, [r8]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	bb62      	cbnz	r2, 8005298 <_malloc_r+0xdc>
 800523e:	f8c8 7000 	str.w	r7, [r8]
 8005242:	e00f      	b.n	8005264 <_malloc_r+0xa8>
 8005244:	6822      	ldr	r2, [r4, #0]
 8005246:	1b52      	subs	r2, r2, r5
 8005248:	d420      	bmi.n	800528c <_malloc_r+0xd0>
 800524a:	2a0b      	cmp	r2, #11
 800524c:	d917      	bls.n	800527e <_malloc_r+0xc2>
 800524e:	1961      	adds	r1, r4, r5
 8005250:	42a3      	cmp	r3, r4
 8005252:	6025      	str	r5, [r4, #0]
 8005254:	bf18      	it	ne
 8005256:	6059      	strne	r1, [r3, #4]
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	bf08      	it	eq
 800525c:	f8c8 1000 	streq.w	r1, [r8]
 8005260:	5162      	str	r2, [r4, r5]
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	4630      	mov	r0, r6
 8005266:	f000 f82f 	bl	80052c8 <__malloc_unlock>
 800526a:	f104 000b 	add.w	r0, r4, #11
 800526e:	1d23      	adds	r3, r4, #4
 8005270:	f020 0007 	bic.w	r0, r0, #7
 8005274:	1ac2      	subs	r2, r0, r3
 8005276:	bf1c      	itt	ne
 8005278:	1a1b      	subne	r3, r3, r0
 800527a:	50a3      	strne	r3, [r4, r2]
 800527c:	e7af      	b.n	80051de <_malloc_r+0x22>
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	bf0c      	ite	eq
 8005284:	f8c8 2000 	streq.w	r2, [r8]
 8005288:	605a      	strne	r2, [r3, #4]
 800528a:	e7eb      	b.n	8005264 <_malloc_r+0xa8>
 800528c:	4623      	mov	r3, r4
 800528e:	6864      	ldr	r4, [r4, #4]
 8005290:	e7ae      	b.n	80051f0 <_malloc_r+0x34>
 8005292:	463c      	mov	r4, r7
 8005294:	687f      	ldr	r7, [r7, #4]
 8005296:	e7b6      	b.n	8005206 <_malloc_r+0x4a>
 8005298:	461a      	mov	r2, r3
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	42a3      	cmp	r3, r4
 800529e:	d1fb      	bne.n	8005298 <_malloc_r+0xdc>
 80052a0:	2300      	movs	r3, #0
 80052a2:	6053      	str	r3, [r2, #4]
 80052a4:	e7de      	b.n	8005264 <_malloc_r+0xa8>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 f80c 	bl	80052c8 <__malloc_unlock>
 80052b0:	e794      	b.n	80051dc <_malloc_r+0x20>
 80052b2:	6005      	str	r5, [r0, #0]
 80052b4:	e7d6      	b.n	8005264 <_malloc_r+0xa8>
 80052b6:	bf00      	nop
 80052b8:	2000076c 	.word	0x2000076c

080052bc <__malloc_lock>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__malloc_lock+0x8>)
 80052be:	f7ff bf0f 	b.w	80050e0 <__retarget_lock_acquire_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000764 	.word	0x20000764

080052c8 <__malloc_unlock>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__malloc_unlock+0x8>)
 80052ca:	f7ff bf0a 	b.w	80050e2 <__retarget_lock_release_recursive>
 80052ce:	bf00      	nop
 80052d0:	20000764 	.word	0x20000764

080052d4 <__ssputs_r>:
 80052d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d8:	688e      	ldr	r6, [r1, #8]
 80052da:	461f      	mov	r7, r3
 80052dc:	42be      	cmp	r6, r7
 80052de:	680b      	ldr	r3, [r1, #0]
 80052e0:	4682      	mov	sl, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	4690      	mov	r8, r2
 80052e6:	d82d      	bhi.n	8005344 <__ssputs_r+0x70>
 80052e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052f0:	d026      	beq.n	8005340 <__ssputs_r+0x6c>
 80052f2:	6965      	ldr	r5, [r4, #20]
 80052f4:	6909      	ldr	r1, [r1, #16]
 80052f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052fa:	eba3 0901 	sub.w	r9, r3, r1
 80052fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005302:	1c7b      	adds	r3, r7, #1
 8005304:	444b      	add	r3, r9
 8005306:	106d      	asrs	r5, r5, #1
 8005308:	429d      	cmp	r5, r3
 800530a:	bf38      	it	cc
 800530c:	461d      	movcc	r5, r3
 800530e:	0553      	lsls	r3, r2, #21
 8005310:	d527      	bpl.n	8005362 <__ssputs_r+0x8e>
 8005312:	4629      	mov	r1, r5
 8005314:	f7ff ff52 	bl	80051bc <_malloc_r>
 8005318:	4606      	mov	r6, r0
 800531a:	b360      	cbz	r0, 8005376 <__ssputs_r+0xa2>
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	464a      	mov	r2, r9
 8005320:	f000 fae8 	bl	80058f4 <memcpy>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800532a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	6126      	str	r6, [r4, #16]
 8005332:	6165      	str	r5, [r4, #20]
 8005334:	444e      	add	r6, r9
 8005336:	eba5 0509 	sub.w	r5, r5, r9
 800533a:	6026      	str	r6, [r4, #0]
 800533c:	60a5      	str	r5, [r4, #8]
 800533e:	463e      	mov	r6, r7
 8005340:	42be      	cmp	r6, r7
 8005342:	d900      	bls.n	8005346 <__ssputs_r+0x72>
 8005344:	463e      	mov	r6, r7
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	4632      	mov	r2, r6
 800534a:	4641      	mov	r1, r8
 800534c:	f000 faa8 	bl	80058a0 <memmove>
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	1b9b      	subs	r3, r3, r6
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	4433      	add	r3, r6
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	2000      	movs	r0, #0
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	462a      	mov	r2, r5
 8005364:	f000 fad4 	bl	8005910 <_realloc_r>
 8005368:	4606      	mov	r6, r0
 800536a:	2800      	cmp	r0, #0
 800536c:	d1e0      	bne.n	8005330 <__ssputs_r+0x5c>
 800536e:	6921      	ldr	r1, [r4, #16]
 8005370:	4650      	mov	r0, sl
 8005372:	f7ff feb7 	bl	80050e4 <_free_r>
 8005376:	230c      	movs	r3, #12
 8005378:	f8ca 3000 	str.w	r3, [sl]
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	e7e9      	b.n	800535e <__ssputs_r+0x8a>
	...

0800538c <_svfiprintf_r>:
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	4698      	mov	r8, r3
 8005392:	898b      	ldrh	r3, [r1, #12]
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	b09d      	sub	sp, #116	@ 0x74
 8005398:	4607      	mov	r7, r0
 800539a:	460d      	mov	r5, r1
 800539c:	4614      	mov	r4, r2
 800539e:	d510      	bpl.n	80053c2 <_svfiprintf_r+0x36>
 80053a0:	690b      	ldr	r3, [r1, #16]
 80053a2:	b973      	cbnz	r3, 80053c2 <_svfiprintf_r+0x36>
 80053a4:	2140      	movs	r1, #64	@ 0x40
 80053a6:	f7ff ff09 	bl	80051bc <_malloc_r>
 80053aa:	6028      	str	r0, [r5, #0]
 80053ac:	6128      	str	r0, [r5, #16]
 80053ae:	b930      	cbnz	r0, 80053be <_svfiprintf_r+0x32>
 80053b0:	230c      	movs	r3, #12
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	b01d      	add	sp, #116	@ 0x74
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	2340      	movs	r3, #64	@ 0x40
 80053c0:	616b      	str	r3, [r5, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c6:	2320      	movs	r3, #32
 80053c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d0:	2330      	movs	r3, #48	@ 0x30
 80053d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005570 <_svfiprintf_r+0x1e4>
 80053d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053da:	f04f 0901 	mov.w	r9, #1
 80053de:	4623      	mov	r3, r4
 80053e0:	469a      	mov	sl, r3
 80053e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e6:	b10a      	cbz	r2, 80053ec <_svfiprintf_r+0x60>
 80053e8:	2a25      	cmp	r2, #37	@ 0x25
 80053ea:	d1f9      	bne.n	80053e0 <_svfiprintf_r+0x54>
 80053ec:	ebba 0b04 	subs.w	fp, sl, r4
 80053f0:	d00b      	beq.n	800540a <_svfiprintf_r+0x7e>
 80053f2:	465b      	mov	r3, fp
 80053f4:	4622      	mov	r2, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff ff6b 	bl	80052d4 <__ssputs_r>
 80053fe:	3001      	adds	r0, #1
 8005400:	f000 80a7 	beq.w	8005552 <_svfiprintf_r+0x1c6>
 8005404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005406:	445a      	add	r2, fp
 8005408:	9209      	str	r2, [sp, #36]	@ 0x24
 800540a:	f89a 3000 	ldrb.w	r3, [sl]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 809f 	beq.w	8005552 <_svfiprintf_r+0x1c6>
 8005414:	2300      	movs	r3, #0
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541e:	f10a 0a01 	add.w	sl, sl, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	9307      	str	r3, [sp, #28]
 8005426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800542a:	931a      	str	r3, [sp, #104]	@ 0x68
 800542c:	4654      	mov	r4, sl
 800542e:	2205      	movs	r2, #5
 8005430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005434:	484e      	ldr	r0, [pc, #312]	@ (8005570 <_svfiprintf_r+0x1e4>)
 8005436:	f7fa fef3 	bl	8000220 <memchr>
 800543a:	9a04      	ldr	r2, [sp, #16]
 800543c:	b9d8      	cbnz	r0, 8005476 <_svfiprintf_r+0xea>
 800543e:	06d0      	lsls	r0, r2, #27
 8005440:	bf44      	itt	mi
 8005442:	2320      	movmi	r3, #32
 8005444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005448:	0711      	lsls	r1, r2, #28
 800544a:	bf44      	itt	mi
 800544c:	232b      	movmi	r3, #43	@ 0x2b
 800544e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005452:	f89a 3000 	ldrb.w	r3, [sl]
 8005456:	2b2a      	cmp	r3, #42	@ 0x2a
 8005458:	d015      	beq.n	8005486 <_svfiprintf_r+0xfa>
 800545a:	9a07      	ldr	r2, [sp, #28]
 800545c:	4654      	mov	r4, sl
 800545e:	2000      	movs	r0, #0
 8005460:	f04f 0c0a 	mov.w	ip, #10
 8005464:	4621      	mov	r1, r4
 8005466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546a:	3b30      	subs	r3, #48	@ 0x30
 800546c:	2b09      	cmp	r3, #9
 800546e:	d94b      	bls.n	8005508 <_svfiprintf_r+0x17c>
 8005470:	b1b0      	cbz	r0, 80054a0 <_svfiprintf_r+0x114>
 8005472:	9207      	str	r2, [sp, #28]
 8005474:	e014      	b.n	80054a0 <_svfiprintf_r+0x114>
 8005476:	eba0 0308 	sub.w	r3, r0, r8
 800547a:	fa09 f303 	lsl.w	r3, r9, r3
 800547e:	4313      	orrs	r3, r2
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	46a2      	mov	sl, r4
 8005484:	e7d2      	b.n	800542c <_svfiprintf_r+0xa0>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9103      	str	r1, [sp, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbb      	ittet	lt
 8005492:	425b      	neglt	r3, r3
 8005494:	f042 0202 	orrlt.w	r2, r2, #2
 8005498:	9307      	strge	r3, [sp, #28]
 800549a:	9307      	strlt	r3, [sp, #28]
 800549c:	bfb8      	it	lt
 800549e:	9204      	strlt	r2, [sp, #16]
 80054a0:	7823      	ldrb	r3, [r4, #0]
 80054a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80054a4:	d10a      	bne.n	80054bc <_svfiprintf_r+0x130>
 80054a6:	7863      	ldrb	r3, [r4, #1]
 80054a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054aa:	d132      	bne.n	8005512 <_svfiprintf_r+0x186>
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054b8:	3402      	adds	r4, #2
 80054ba:	9305      	str	r3, [sp, #20]
 80054bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005580 <_svfiprintf_r+0x1f4>
 80054c0:	7821      	ldrb	r1, [r4, #0]
 80054c2:	2203      	movs	r2, #3
 80054c4:	4650      	mov	r0, sl
 80054c6:	f7fa feab 	bl	8000220 <memchr>
 80054ca:	b138      	cbz	r0, 80054dc <_svfiprintf_r+0x150>
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	eba0 000a 	sub.w	r0, r0, sl
 80054d2:	2240      	movs	r2, #64	@ 0x40
 80054d4:	4082      	lsls	r2, r0
 80054d6:	4313      	orrs	r3, r2
 80054d8:	3401      	adds	r4, #1
 80054da:	9304      	str	r3, [sp, #16]
 80054dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e0:	4824      	ldr	r0, [pc, #144]	@ (8005574 <_svfiprintf_r+0x1e8>)
 80054e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054e6:	2206      	movs	r2, #6
 80054e8:	f7fa fe9a 	bl	8000220 <memchr>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d036      	beq.n	800555e <_svfiprintf_r+0x1d2>
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <_svfiprintf_r+0x1ec>)
 80054f2:	bb1b      	cbnz	r3, 800553c <_svfiprintf_r+0x1b0>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	3307      	adds	r3, #7
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	3308      	adds	r3, #8
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005502:	4433      	add	r3, r6
 8005504:	9309      	str	r3, [sp, #36]	@ 0x24
 8005506:	e76a      	b.n	80053de <_svfiprintf_r+0x52>
 8005508:	fb0c 3202 	mla	r2, ip, r2, r3
 800550c:	460c      	mov	r4, r1
 800550e:	2001      	movs	r0, #1
 8005510:	e7a8      	b.n	8005464 <_svfiprintf_r+0xd8>
 8005512:	2300      	movs	r3, #0
 8005514:	3401      	adds	r4, #1
 8005516:	9305      	str	r3, [sp, #20]
 8005518:	4619      	mov	r1, r3
 800551a:	f04f 0c0a 	mov.w	ip, #10
 800551e:	4620      	mov	r0, r4
 8005520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005524:	3a30      	subs	r2, #48	@ 0x30
 8005526:	2a09      	cmp	r2, #9
 8005528:	d903      	bls.n	8005532 <_svfiprintf_r+0x1a6>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0c6      	beq.n	80054bc <_svfiprintf_r+0x130>
 800552e:	9105      	str	r1, [sp, #20]
 8005530:	e7c4      	b.n	80054bc <_svfiprintf_r+0x130>
 8005532:	fb0c 2101 	mla	r1, ip, r1, r2
 8005536:	4604      	mov	r4, r0
 8005538:	2301      	movs	r3, #1
 800553a:	e7f0      	b.n	800551e <_svfiprintf_r+0x192>
 800553c:	ab03      	add	r3, sp, #12
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	462a      	mov	r2, r5
 8005542:	4b0e      	ldr	r3, [pc, #56]	@ (800557c <_svfiprintf_r+0x1f0>)
 8005544:	a904      	add	r1, sp, #16
 8005546:	4638      	mov	r0, r7
 8005548:	f3af 8000 	nop.w
 800554c:	1c42      	adds	r2, r0, #1
 800554e:	4606      	mov	r6, r0
 8005550:	d1d6      	bne.n	8005500 <_svfiprintf_r+0x174>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	065b      	lsls	r3, r3, #25
 8005556:	f53f af2d 	bmi.w	80053b4 <_svfiprintf_r+0x28>
 800555a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800555c:	e72c      	b.n	80053b8 <_svfiprintf_r+0x2c>
 800555e:	ab03      	add	r3, sp, #12
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	462a      	mov	r2, r5
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <_svfiprintf_r+0x1f0>)
 8005566:	a904      	add	r1, sp, #16
 8005568:	4638      	mov	r0, r7
 800556a:	f000 f879 	bl	8005660 <_printf_i>
 800556e:	e7ed      	b.n	800554c <_svfiprintf_r+0x1c0>
 8005570:	080059c4 	.word	0x080059c4
 8005574:	080059ce 	.word	0x080059ce
 8005578:	00000000 	.word	0x00000000
 800557c:	080052d5 	.word	0x080052d5
 8005580:	080059ca 	.word	0x080059ca

08005584 <_printf_common>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	4616      	mov	r6, r2
 800558a:	4698      	mov	r8, r3
 800558c:	688a      	ldr	r2, [r1, #8]
 800558e:	690b      	ldr	r3, [r1, #16]
 8005590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005594:	4293      	cmp	r3, r2
 8005596:	bfb8      	it	lt
 8005598:	4613      	movlt	r3, r2
 800559a:	6033      	str	r3, [r6, #0]
 800559c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055a0:	4607      	mov	r7, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	b10a      	cbz	r2, 80055aa <_printf_common+0x26>
 80055a6:	3301      	adds	r3, #1
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	0699      	lsls	r1, r3, #26
 80055ae:	bf42      	ittt	mi
 80055b0:	6833      	ldrmi	r3, [r6, #0]
 80055b2:	3302      	addmi	r3, #2
 80055b4:	6033      	strmi	r3, [r6, #0]
 80055b6:	6825      	ldr	r5, [r4, #0]
 80055b8:	f015 0506 	ands.w	r5, r5, #6
 80055bc:	d106      	bne.n	80055cc <_printf_common+0x48>
 80055be:	f104 0a19 	add.w	sl, r4, #25
 80055c2:	68e3      	ldr	r3, [r4, #12]
 80055c4:	6832      	ldr	r2, [r6, #0]
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dc26      	bgt.n	800561a <_printf_common+0x96>
 80055cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055d0:	6822      	ldr	r2, [r4, #0]
 80055d2:	3b00      	subs	r3, #0
 80055d4:	bf18      	it	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	0692      	lsls	r2, r2, #26
 80055da:	d42b      	bmi.n	8005634 <_printf_common+0xb0>
 80055dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055e0:	4641      	mov	r1, r8
 80055e2:	4638      	mov	r0, r7
 80055e4:	47c8      	blx	r9
 80055e6:	3001      	adds	r0, #1
 80055e8:	d01e      	beq.n	8005628 <_printf_common+0xa4>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	6922      	ldr	r2, [r4, #16]
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	bf02      	ittt	eq
 80055f6:	68e5      	ldreq	r5, [r4, #12]
 80055f8:	6833      	ldreq	r3, [r6, #0]
 80055fa:	1aed      	subeq	r5, r5, r3
 80055fc:	68a3      	ldr	r3, [r4, #8]
 80055fe:	bf0c      	ite	eq
 8005600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005604:	2500      	movne	r5, #0
 8005606:	4293      	cmp	r3, r2
 8005608:	bfc4      	itt	gt
 800560a:	1a9b      	subgt	r3, r3, r2
 800560c:	18ed      	addgt	r5, r5, r3
 800560e:	2600      	movs	r6, #0
 8005610:	341a      	adds	r4, #26
 8005612:	42b5      	cmp	r5, r6
 8005614:	d11a      	bne.n	800564c <_printf_common+0xc8>
 8005616:	2000      	movs	r0, #0
 8005618:	e008      	b.n	800562c <_printf_common+0xa8>
 800561a:	2301      	movs	r3, #1
 800561c:	4652      	mov	r2, sl
 800561e:	4641      	mov	r1, r8
 8005620:	4638      	mov	r0, r7
 8005622:	47c8      	blx	r9
 8005624:	3001      	adds	r0, #1
 8005626:	d103      	bne.n	8005630 <_printf_common+0xac>
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005630:	3501      	adds	r5, #1
 8005632:	e7c6      	b.n	80055c2 <_printf_common+0x3e>
 8005634:	18e1      	adds	r1, r4, r3
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	2030      	movs	r0, #48	@ 0x30
 800563a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800563e:	4422      	add	r2, r4
 8005640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005648:	3302      	adds	r3, #2
 800564a:	e7c7      	b.n	80055dc <_printf_common+0x58>
 800564c:	2301      	movs	r3, #1
 800564e:	4622      	mov	r2, r4
 8005650:	4641      	mov	r1, r8
 8005652:	4638      	mov	r0, r7
 8005654:	47c8      	blx	r9
 8005656:	3001      	adds	r0, #1
 8005658:	d0e6      	beq.n	8005628 <_printf_common+0xa4>
 800565a:	3601      	adds	r6, #1
 800565c:	e7d9      	b.n	8005612 <_printf_common+0x8e>
	...

08005660 <_printf_i>:
 8005660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	7e0f      	ldrb	r7, [r1, #24]
 8005666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005668:	2f78      	cmp	r7, #120	@ 0x78
 800566a:	4691      	mov	r9, r2
 800566c:	4680      	mov	r8, r0
 800566e:	460c      	mov	r4, r1
 8005670:	469a      	mov	sl, r3
 8005672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005676:	d807      	bhi.n	8005688 <_printf_i+0x28>
 8005678:	2f62      	cmp	r7, #98	@ 0x62
 800567a:	d80a      	bhi.n	8005692 <_printf_i+0x32>
 800567c:	2f00      	cmp	r7, #0
 800567e:	f000 80d2 	beq.w	8005826 <_printf_i+0x1c6>
 8005682:	2f58      	cmp	r7, #88	@ 0x58
 8005684:	f000 80b9 	beq.w	80057fa <_printf_i+0x19a>
 8005688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800568c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005690:	e03a      	b.n	8005708 <_printf_i+0xa8>
 8005692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005696:	2b15      	cmp	r3, #21
 8005698:	d8f6      	bhi.n	8005688 <_printf_i+0x28>
 800569a:	a101      	add	r1, pc, #4	@ (adr r1, 80056a0 <_printf_i+0x40>)
 800569c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056a0:	080056f9 	.word	0x080056f9
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	08005689 	.word	0x08005689
 80056ac:	08005689 	.word	0x08005689
 80056b0:	08005689 	.word	0x08005689
 80056b4:	08005689 	.word	0x08005689
 80056b8:	0800570d 	.word	0x0800570d
 80056bc:	08005689 	.word	0x08005689
 80056c0:	08005689 	.word	0x08005689
 80056c4:	08005689 	.word	0x08005689
 80056c8:	08005689 	.word	0x08005689
 80056cc:	0800580d 	.word	0x0800580d
 80056d0:	08005737 	.word	0x08005737
 80056d4:	080057c7 	.word	0x080057c7
 80056d8:	08005689 	.word	0x08005689
 80056dc:	08005689 	.word	0x08005689
 80056e0:	0800582f 	.word	0x0800582f
 80056e4:	08005689 	.word	0x08005689
 80056e8:	08005737 	.word	0x08005737
 80056ec:	08005689 	.word	0x08005689
 80056f0:	08005689 	.word	0x08005689
 80056f4:	080057cf 	.word	0x080057cf
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	1d1a      	adds	r2, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6032      	str	r2, [r6, #0]
 8005700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005708:	2301      	movs	r3, #1
 800570a:	e09d      	b.n	8005848 <_printf_i+0x1e8>
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	6031      	str	r1, [r6, #0]
 8005714:	0606      	lsls	r6, r0, #24
 8005716:	d501      	bpl.n	800571c <_printf_i+0xbc>
 8005718:	681d      	ldr	r5, [r3, #0]
 800571a:	e003      	b.n	8005724 <_printf_i+0xc4>
 800571c:	0645      	lsls	r5, r0, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0xb8>
 8005720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005724:	2d00      	cmp	r5, #0
 8005726:	da03      	bge.n	8005730 <_printf_i+0xd0>
 8005728:	232d      	movs	r3, #45	@ 0x2d
 800572a:	426d      	negs	r5, r5
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005730:	4859      	ldr	r0, [pc, #356]	@ (8005898 <_printf_i+0x238>)
 8005732:	230a      	movs	r3, #10
 8005734:	e011      	b.n	800575a <_printf_i+0xfa>
 8005736:	6821      	ldr	r1, [r4, #0]
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	0608      	lsls	r0, r1, #24
 800573c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005740:	d402      	bmi.n	8005748 <_printf_i+0xe8>
 8005742:	0649      	lsls	r1, r1, #25
 8005744:	bf48      	it	mi
 8005746:	b2ad      	uxthmi	r5, r5
 8005748:	2f6f      	cmp	r7, #111	@ 0x6f
 800574a:	4853      	ldr	r0, [pc, #332]	@ (8005898 <_printf_i+0x238>)
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	bf14      	ite	ne
 8005750:	230a      	movne	r3, #10
 8005752:	2308      	moveq	r3, #8
 8005754:	2100      	movs	r1, #0
 8005756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800575a:	6866      	ldr	r6, [r4, #4]
 800575c:	60a6      	str	r6, [r4, #8]
 800575e:	2e00      	cmp	r6, #0
 8005760:	bfa2      	ittt	ge
 8005762:	6821      	ldrge	r1, [r4, #0]
 8005764:	f021 0104 	bicge.w	r1, r1, #4
 8005768:	6021      	strge	r1, [r4, #0]
 800576a:	b90d      	cbnz	r5, 8005770 <_printf_i+0x110>
 800576c:	2e00      	cmp	r6, #0
 800576e:	d04b      	beq.n	8005808 <_printf_i+0x1a8>
 8005770:	4616      	mov	r6, r2
 8005772:	fbb5 f1f3 	udiv	r1, r5, r3
 8005776:	fb03 5711 	mls	r7, r3, r1, r5
 800577a:	5dc7      	ldrb	r7, [r0, r7]
 800577c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005780:	462f      	mov	r7, r5
 8005782:	42bb      	cmp	r3, r7
 8005784:	460d      	mov	r5, r1
 8005786:	d9f4      	bls.n	8005772 <_printf_i+0x112>
 8005788:	2b08      	cmp	r3, #8
 800578a:	d10b      	bne.n	80057a4 <_printf_i+0x144>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	07df      	lsls	r7, r3, #31
 8005790:	d508      	bpl.n	80057a4 <_printf_i+0x144>
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6861      	ldr	r1, [r4, #4]
 8005796:	4299      	cmp	r1, r3
 8005798:	bfde      	ittt	le
 800579a:	2330      	movle	r3, #48	@ 0x30
 800579c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057a4:	1b92      	subs	r2, r2, r6
 80057a6:	6122      	str	r2, [r4, #16]
 80057a8:	f8cd a000 	str.w	sl, [sp]
 80057ac:	464b      	mov	r3, r9
 80057ae:	aa03      	add	r2, sp, #12
 80057b0:	4621      	mov	r1, r4
 80057b2:	4640      	mov	r0, r8
 80057b4:	f7ff fee6 	bl	8005584 <_printf_common>
 80057b8:	3001      	adds	r0, #1
 80057ba:	d14a      	bne.n	8005852 <_printf_i+0x1f2>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	b004      	add	sp, #16
 80057c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	f043 0320 	orr.w	r3, r3, #32
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	4833      	ldr	r0, [pc, #204]	@ (800589c <_printf_i+0x23c>)
 80057d0:	2778      	movs	r7, #120	@ 0x78
 80057d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6831      	ldr	r1, [r6, #0]
 80057da:	061f      	lsls	r7, r3, #24
 80057dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80057e0:	d402      	bmi.n	80057e8 <_printf_i+0x188>
 80057e2:	065f      	lsls	r7, r3, #25
 80057e4:	bf48      	it	mi
 80057e6:	b2ad      	uxthmi	r5, r5
 80057e8:	6031      	str	r1, [r6, #0]
 80057ea:	07d9      	lsls	r1, r3, #31
 80057ec:	bf44      	itt	mi
 80057ee:	f043 0320 	orrmi.w	r3, r3, #32
 80057f2:	6023      	strmi	r3, [r4, #0]
 80057f4:	b11d      	cbz	r5, 80057fe <_printf_i+0x19e>
 80057f6:	2310      	movs	r3, #16
 80057f8:	e7ac      	b.n	8005754 <_printf_i+0xf4>
 80057fa:	4827      	ldr	r0, [pc, #156]	@ (8005898 <_printf_i+0x238>)
 80057fc:	e7e9      	b.n	80057d2 <_printf_i+0x172>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f023 0320 	bic.w	r3, r3, #32
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	e7f6      	b.n	80057f6 <_printf_i+0x196>
 8005808:	4616      	mov	r6, r2
 800580a:	e7bd      	b.n	8005788 <_printf_i+0x128>
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	6825      	ldr	r5, [r4, #0]
 8005810:	6961      	ldr	r1, [r4, #20]
 8005812:	1d18      	adds	r0, r3, #4
 8005814:	6030      	str	r0, [r6, #0]
 8005816:	062e      	lsls	r6, r5, #24
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	d501      	bpl.n	8005820 <_printf_i+0x1c0>
 800581c:	6019      	str	r1, [r3, #0]
 800581e:	e002      	b.n	8005826 <_printf_i+0x1c6>
 8005820:	0668      	lsls	r0, r5, #25
 8005822:	d5fb      	bpl.n	800581c <_printf_i+0x1bc>
 8005824:	8019      	strh	r1, [r3, #0]
 8005826:	2300      	movs	r3, #0
 8005828:	6123      	str	r3, [r4, #16]
 800582a:	4616      	mov	r6, r2
 800582c:	e7bc      	b.n	80057a8 <_printf_i+0x148>
 800582e:	6833      	ldr	r3, [r6, #0]
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	6032      	str	r2, [r6, #0]
 8005834:	681e      	ldr	r6, [r3, #0]
 8005836:	6862      	ldr	r2, [r4, #4]
 8005838:	2100      	movs	r1, #0
 800583a:	4630      	mov	r0, r6
 800583c:	f7fa fcf0 	bl	8000220 <memchr>
 8005840:	b108      	cbz	r0, 8005846 <_printf_i+0x1e6>
 8005842:	1b80      	subs	r0, r0, r6
 8005844:	6060      	str	r0, [r4, #4]
 8005846:	6863      	ldr	r3, [r4, #4]
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	2300      	movs	r3, #0
 800584c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005850:	e7aa      	b.n	80057a8 <_printf_i+0x148>
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	4632      	mov	r2, r6
 8005856:	4649      	mov	r1, r9
 8005858:	4640      	mov	r0, r8
 800585a:	47d0      	blx	sl
 800585c:	3001      	adds	r0, #1
 800585e:	d0ad      	beq.n	80057bc <_printf_i+0x15c>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	079b      	lsls	r3, r3, #30
 8005864:	d413      	bmi.n	800588e <_printf_i+0x22e>
 8005866:	68e0      	ldr	r0, [r4, #12]
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	4298      	cmp	r0, r3
 800586c:	bfb8      	it	lt
 800586e:	4618      	movlt	r0, r3
 8005870:	e7a6      	b.n	80057c0 <_printf_i+0x160>
 8005872:	2301      	movs	r3, #1
 8005874:	4632      	mov	r2, r6
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	47d0      	blx	sl
 800587c:	3001      	adds	r0, #1
 800587e:	d09d      	beq.n	80057bc <_printf_i+0x15c>
 8005880:	3501      	adds	r5, #1
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	9903      	ldr	r1, [sp, #12]
 8005886:	1a5b      	subs	r3, r3, r1
 8005888:	42ab      	cmp	r3, r5
 800588a:	dcf2      	bgt.n	8005872 <_printf_i+0x212>
 800588c:	e7eb      	b.n	8005866 <_printf_i+0x206>
 800588e:	2500      	movs	r5, #0
 8005890:	f104 0619 	add.w	r6, r4, #25
 8005894:	e7f5      	b.n	8005882 <_printf_i+0x222>
 8005896:	bf00      	nop
 8005898:	080059d5 	.word	0x080059d5
 800589c:	080059e6 	.word	0x080059e6

080058a0 <memmove>:
 80058a0:	4288      	cmp	r0, r1
 80058a2:	b510      	push	{r4, lr}
 80058a4:	eb01 0402 	add.w	r4, r1, r2
 80058a8:	d902      	bls.n	80058b0 <memmove+0x10>
 80058aa:	4284      	cmp	r4, r0
 80058ac:	4623      	mov	r3, r4
 80058ae:	d807      	bhi.n	80058c0 <memmove+0x20>
 80058b0:	1e43      	subs	r3, r0, #1
 80058b2:	42a1      	cmp	r1, r4
 80058b4:	d008      	beq.n	80058c8 <memmove+0x28>
 80058b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058be:	e7f8      	b.n	80058b2 <memmove+0x12>
 80058c0:	4402      	add	r2, r0
 80058c2:	4601      	mov	r1, r0
 80058c4:	428a      	cmp	r2, r1
 80058c6:	d100      	bne.n	80058ca <memmove+0x2a>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058d2:	e7f7      	b.n	80058c4 <memmove+0x24>

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d06      	ldr	r5, [pc, #24]	@ (80058f0 <_sbrk_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fdc8 	bl	8001474 <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000760 	.word	0x20000760

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_realloc_r>:
 8005910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005914:	4680      	mov	r8, r0
 8005916:	4615      	mov	r5, r2
 8005918:	460c      	mov	r4, r1
 800591a:	b921      	cbnz	r1, 8005926 <_realloc_r+0x16>
 800591c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005920:	4611      	mov	r1, r2
 8005922:	f7ff bc4b 	b.w	80051bc <_malloc_r>
 8005926:	b92a      	cbnz	r2, 8005934 <_realloc_r+0x24>
 8005928:	f7ff fbdc 	bl	80050e4 <_free_r>
 800592c:	2400      	movs	r4, #0
 800592e:	4620      	mov	r0, r4
 8005930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005934:	f000 f81a 	bl	800596c <_malloc_usable_size_r>
 8005938:	4285      	cmp	r5, r0
 800593a:	4606      	mov	r6, r0
 800593c:	d802      	bhi.n	8005944 <_realloc_r+0x34>
 800593e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005942:	d8f4      	bhi.n	800592e <_realloc_r+0x1e>
 8005944:	4629      	mov	r1, r5
 8005946:	4640      	mov	r0, r8
 8005948:	f7ff fc38 	bl	80051bc <_malloc_r>
 800594c:	4607      	mov	r7, r0
 800594e:	2800      	cmp	r0, #0
 8005950:	d0ec      	beq.n	800592c <_realloc_r+0x1c>
 8005952:	42b5      	cmp	r5, r6
 8005954:	462a      	mov	r2, r5
 8005956:	4621      	mov	r1, r4
 8005958:	bf28      	it	cs
 800595a:	4632      	movcs	r2, r6
 800595c:	f7ff ffca 	bl	80058f4 <memcpy>
 8005960:	4621      	mov	r1, r4
 8005962:	4640      	mov	r0, r8
 8005964:	f7ff fbbe 	bl	80050e4 <_free_r>
 8005968:	463c      	mov	r4, r7
 800596a:	e7e0      	b.n	800592e <_realloc_r+0x1e>

0800596c <_malloc_usable_size_r>:
 800596c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005970:	1f18      	subs	r0, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	bfbc      	itt	lt
 8005976:	580b      	ldrlt	r3, [r1, r0]
 8005978:	18c0      	addlt	r0, r0, r3
 800597a:	4770      	bx	lr

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
