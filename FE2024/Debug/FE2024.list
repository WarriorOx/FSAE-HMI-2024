
FE2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800361c  0800361c  0000461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003644  08003644  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003644  08003644  00004644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800364c  0800364c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800364c  0800364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003650  08003650  00004650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003654  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000068  080036bc  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080036bc  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f343  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e8  00000000  00000000  000143db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000166c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b15  00000000  00000000  00017508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ff1  00000000  00000000  0001801d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1b  00000000  00000000  0003b00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d50ed  00000000  00000000  0004bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  00120c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00124ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003604 	.word	0x08003604

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08003604 	.word	0x08003604

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_write>:



int _write(int le, char *ptr, int len)

{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]

int DataIdx;

for(DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>

{

ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffc9 	bl	80004f4 <ITM_SendChar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>

}

return len;
 8000570:	687b      	ldr	r3, [r7, #4]

}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb78 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f81a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8f4 	bl	8000774 <MX_GPIO_Init>
  MX_CAN1_Init();
 800058c:	f000 f876 	bl	800067c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f8c6 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000594:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <main+0x38>)
 8000596:	f000 fdaf 	bl	80010f8 <HAL_CAN_Start>

    // Activate the notification
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800059a:	2102      	movs	r1, #2
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <main+0x38>)
 800059e:	f000 fdef 	bl	8001180 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World \n");
 80005a2:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <main+0x3c>)
 80005a4:	f002 fc9a 	bl	8002edc <puts>
	  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f000 fba4 	bl	8000cf8 <HAL_Delay>
  {
 80005b0:	bf00      	nop
 80005b2:	e7f6      	b.n	80005a2 <main+0x26>
 80005b4:	20000084 	.word	0x20000084
 80005b8:	0800361c 	.word	0x0800361c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	@ 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fd66 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xb8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <SystemClock_Config+0xb8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <SystemClock_Config+0xbc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fb37 	bl	8001ca4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800063c:	f000 f8e2 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f82c 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000666:	f000 f8cd 	bl	8000804 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000682:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <MX_CAN1_Init+0x9c>)
 8000684:	4a25      	ldr	r2, [pc, #148]	@ (800071c <MX_CAN1_Init+0xa0>)
 8000686:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_CAN1_Init+0x9c>)
 800068a:	2208      	movs	r2, #8
 800068c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068e:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_CAN1_Init+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_CAN1_Init+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_CAN1_Init+0x9c>)
 800069c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006cc:	4812      	ldr	r0, [pc, #72]	@ (8000718 <MX_CAN1_Init+0x9c>)
 80006ce:	f000 fb37 	bl	8000d40 <HAL_CAN_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f894 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006e0:	2312      	movs	r3, #18
 80006e2:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x000;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x000;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x000;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000700:	2314      	movs	r3, #20
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <MX_CAN1_Init+0x9c>)
 800070a:	f000 fc15 	bl	8000f38 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	40006400 	.word	0x40006400

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 ffe4 	bl	8002724 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f84f 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000ac 	.word	0x200000ac
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_GPIO_Init+0x68>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <MX_GPIO_Init+0x68>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_GPIO_Init+0x68>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a0f      	ldr	r2, [pc, #60]	@ (80007dc <MX_GPIO_Init+0x68>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <MX_GPIO_Init+0x68>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 fa61 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40001000 	.word	0x40001000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	@ (80008e4 <HAL_CAN_MspInit+0x84>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12c      	bne.n	80008dc <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 800088c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_CAN_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008cc:	2309      	movs	r3, #9
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_CAN_MspInit+0x8c>)
 80008d8:	f000 fd5a 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40006400 	.word	0x40006400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000966:	f000 fd13 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	@ 0x38
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <HAL_InitTick+0xe4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a32      	ldr	r2, [pc, #200]	@ (8000a64 <HAL_InitTick+0xe4>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <HAL_InitTick+0xe4>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 ff98 	bl	80018ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c6:	f000 ff69 	bl	800189c <HAL_RCC_GetPCLK1Freq>
 80009ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80009cc:	e004      	b.n	80009d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ce:	f000 ff65 	bl	800189c <HAL_RCC_GetPCLK1Freq>
 80009d2:	4603      	mov	r3, r0
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009da:	4a23      	ldr	r2, [pc, #140]	@ (8000a68 <HAL_InitTick+0xe8>)
 80009dc:	fba2 2303 	umull	r2, r3, r2, r3
 80009e0:	0c9b      	lsrs	r3, r3, #18
 80009e2:	3b01      	subs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_InitTick+0xec>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <HAL_InitTick+0xf0>)
 80009ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <HAL_InitTick+0xec>)
 80009ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <HAL_InitTick+0xec>)
 80009f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_InitTick+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_InitTick+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_InitTick+0xec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a0c:	4817      	ldr	r0, [pc, #92]	@ (8000a6c <HAL_InitTick+0xec>)
 8000a0e:	f001 fbe7 	bl	80021e0 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d11b      	bne.n	8000a58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a20:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <HAL_InitTick+0xec>)
 8000a22:	f001 fc37 	bl	8002294 <HAL_TIM_Base_Start_IT>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d111      	bne.n	8000a58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a34:	2036      	movs	r0, #54	@ 0x36
 8000a36:	f000 fc9d 	bl	8001374 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d808      	bhi.n	8000a52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	2036      	movs	r0, #54	@ 0x36
 8000a46:	f000 fc79 	bl	800133c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_InitTick+0xf4>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	e002      	b.n	8000a58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3738      	adds	r7, #56	@ 0x38
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	431bde83 	.word	0x431bde83
 8000a6c:	200000f4 	.word	0x200000f4
 8000a70:	40001000 	.word	0x40001000
 8000a74:	20000004 	.word	0x20000004

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <TIM6_DAC_IRQHandler+0x10>)
 8000ade:	f001 fc49 	bl	8002374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 faba 	bl	8003138 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	2000013c 	.word	0x2000013c
 8000bf8:	20000290 	.word	0x20000290

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 fa79 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc93 	bl	800057c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c64:	08003654 	.word	0x08003654
  ldr r2, =_sbss
 8000c68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c6c:	20000290 	.word	0x20000290

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 fb42 	bl	8001326 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f7ff fe6c 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fdb2 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000140 	.word	0x20000140

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000140 	.word	0x20000140

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0ed      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fd7e 	bl	8000860 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ffb4 	bl	8000ce0 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ffb0 	bl	8000ce0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0c5      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0e5      	beq.n	8000d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0202 	bic.w	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ff8e 	bl	8000ce0 <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ff8a 	bl	8000ce0 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e09f      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e1b      	ldrb	r3, [r3, #24]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7e5b      	ldrb	r3, [r3, #25]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7e9b      	ldrb	r3, [r3, #26]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0220 	bic.w	r2, r2, #32
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7edb      	ldrb	r3, [r3, #27]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0210 	bic.w	r2, r2, #16
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7f1b      	ldrb	r3, [r3, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0208 	orr.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f5b      	ldrb	r3, [r3, #29]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0204 	bic.w	r2, r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	ea42 0103 	orr.w	r1, r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f50:	7cfb      	ldrb	r3, [r7, #19]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d003      	beq.n	8000f5e <HAL_CAN_ConfigFilter+0x26>
 8000f56:	7cfb      	ldrb	r3, [r7, #19]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	f040 80be 	bne.w	80010da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f5e:	4b65      	ldr	r3, [pc, #404]	@ (80010f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d123      	bne.n	8001008 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3248      	adds	r2, #72	@ 0x48
 8000fe8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ffe:	6979      	ldr	r1, [r7, #20]
 8001000:	3348      	adds	r3, #72	@ 0x48
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d122      	bne.n	8001056 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001030:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3248      	adds	r2, #72	@ 0x48
 8001036:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	3348      	adds	r3, #72	@ 0x48
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	440b      	add	r3, r1
 8001054:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001070:	e007      	b.n	8001082 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	431a      	orrs	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	401a      	ands	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800109c:	e007      	b.n	80010ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d107      	bne.n	80010c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	431a      	orrs	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010cc:	f023 0201 	bic.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e006      	b.n	80010e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
  }
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40006400 	.word	0x40006400

080010f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d12e      	bne.n	800116a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001124:	f7ff fddc 	bl	8000ce0 <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800112a:	e012      	b.n	8001152 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800112c:	f7ff fdd8 	bl	8000ce0 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b0a      	cmp	r3, #10
 8001138:	d90b      	bls.n	8001152 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e012      	b.n	8001178 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e5      	bne.n	800112c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e006      	b.n	8001178 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
  }
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001190:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <HAL_CAN_ActivateNotification+0x1e>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d109      	bne.n	80011b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6959      	ldr	r1, [r3, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e006      	b.n	80011c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
  }
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff4c 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134e:	f7ff ff61 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001352:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff ffb1 	bl	80012c0 <NVIC_EncodePriority>
 800135e:	4602      	mov	r2, r0
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff80 	bl	800126c <__NVIC_SetPriority>
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff54 	bl	8001230 <__NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e165      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8154 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80ae 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <HAL_GPIO_Init+0x300>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a5c      	ldr	r2, [pc, #368]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	@ (8001698 <HAL_GPIO_Init+0x308>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x21a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4e      	ldr	r2, [pc, #312]	@ (800169c <HAL_GPIO_Init+0x30c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x216>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4d      	ldr	r2, [pc, #308]	@ (80016a0 <HAL_GPIO_Init+0x310>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x212>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4c      	ldr	r2, [pc, #304]	@ (80016a4 <HAL_GPIO_Init+0x314>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4b      	ldr	r2, [pc, #300]	@ (80016a8 <HAL_GPIO_Init+0x318>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x20a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4a      	ldr	r2, [pc, #296]	@ (80016ac <HAL_GPIO_Init+0x31c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x206>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a49      	ldr	r2, [pc, #292]	@ (80016b0 <HAL_GPIO_Init+0x320>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x202>
 800158e:	2306      	movs	r3, #6
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001592:	2307      	movs	r3, #7
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4935      	ldr	r1, [pc, #212]	@ (8001694 <HAL_GPIO_Init+0x304>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ee:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001618:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166c:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae96 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0cc      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d90c      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b63      	ldr	r3, [pc, #396]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b8      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a52      	ldr	r2, [pc, #328]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800172e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494d      	ldr	r1, [pc, #308]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d044      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e067      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4934      	ldr	r1, [pc, #208]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa9a 	bl	8000ce0 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff fa96 	bl	8000ce0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20c      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e032      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4916      	ldr	r1, [pc, #88]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490e      	ldr	r1, [pc, #56]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f887 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	490a      	ldr	r1, [pc, #40]	@ (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	5ccb      	ldrb	r3, [r1, r3]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f88e 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00
 8001874:	40023800 	.word	0x40023800
 8001878:	0800362c 	.word	0x0800362c
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_RCC_GetHCLKFreq+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018a0:	f7ff fff0 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	@ (80018c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	0800363c 	.word	0x0800363c

080018c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018c8:	f7ff ffdc 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0b5b      	lsrs	r3, r3, #13
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	@ (80018e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	0800363c 	.word	0x0800363c

080018ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	220f      	movs	r2, #15
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800192e:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_RCC_GetClockConfig+0x60>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 020f 	and.w	r2, r3, #15
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40023c00 	.word	0x40023c00

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001954:	b0a6      	sub	sp, #152	@ 0x98
 8001956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001976:	4bc8      	ldr	r3, [pc, #800]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b0c      	cmp	r3, #12
 8001980:	f200 817e 	bhi.w	8001c80 <HAL_RCC_GetSysClockFreq+0x330>
 8001984:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019c1 	.word	0x080019c1
 8001990:	08001c81 	.word	0x08001c81
 8001994:	08001c81 	.word	0x08001c81
 8001998:	08001c81 	.word	0x08001c81
 800199c:	080019c9 	.word	0x080019c9
 80019a0:	08001c81 	.word	0x08001c81
 80019a4:	08001c81 	.word	0x08001c81
 80019a8:	08001c81 	.word	0x08001c81
 80019ac:	080019d1 	.word	0x080019d1
 80019b0:	08001c81 	.word	0x08001c81
 80019b4:	08001c81 	.word	0x08001c81
 80019b8:	08001c81 	.word	0x08001c81
 80019bc:	08001b3b 	.word	0x08001b3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4bb6      	ldr	r3, [pc, #728]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x34c>)
 80019c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80019c6:	e15f      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c8:	4bb5      	ldr	r3, [pc, #724]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x350>)
 80019ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019ce:	e15b      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019dc:	4bae      	ldr	r3, [pc, #696]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d031      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4bab      	ldr	r3, [pc, #684]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80019fc:	2300      	movs	r3, #0
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a00:	4ba7      	ldr	r3, [pc, #668]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a06:	462a      	mov	r2, r5
 8001a08:	fb03 f202 	mul.w	r2, r3, r2
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4621      	mov	r1, r4
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	4aa2      	ldr	r2, [pc, #648]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a18:	4621      	mov	r1, r4
 8001a1a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a20:	460a      	mov	r2, r1
 8001a22:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a26:	4413      	add	r3, r2
 8001a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a38:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a3c:	f7fe fbe2 	bl	8000204 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a4a:	e064      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a56:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a64:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a68:	4622      	mov	r2, r4
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4621      	mov	r1, r4
 8001a82:	1a51      	subs	r1, r2, r1
 8001a84:	6139      	str	r1, [r7, #16]
 8001a86:	4629      	mov	r1, r5
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a9a:	4659      	mov	r1, fp
 8001a9c:	018b      	lsls	r3, r1, #6
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	018a      	lsls	r2, r1, #6
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	ebb2 0801 	subs.w	r8, r2, r1
 8001aae:	4659      	mov	r1, fp
 8001ab0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac8:	4690      	mov	r8, r2
 8001aca:	4699      	mov	r9, r3
 8001acc:	4623      	mov	r3, r4
 8001ace:	eb18 0303 	adds.w	r3, r8, r3
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	eb49 0303 	adc.w	r3, r9, r3
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	028b      	lsls	r3, r1, #10
 8001aec:	4621      	mov	r1, r4
 8001aee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af2:	4621      	mov	r1, r4
 8001af4:	028a      	lsls	r2, r1, #10
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001afe:	2200      	movs	r2, #0
 8001b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b02:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b08:	f7fe fb7c 	bl	8000204 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b16:	4b60      	ldr	r3, [pc, #384]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	3301      	adds	r3, #1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001b28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b38:	e0a6      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b46:	4b54      	ldr	r3, [pc, #336]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02a      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b51      	ldr	r3, [pc, #324]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b64:	2100      	movs	r1, #0
 8001b66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b68:	fb03 f201 	mul.w	r2, r3, r1
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	fb00 f303 	mul.w	r3, r0, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b76:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b82:	4413      	add	r3, r2
 8001b84:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b8e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b94:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b98:	f7fe fb34 	bl	8000204 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ba6:	e05b      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	61fa      	str	r2, [r7, #28]
 8001c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c52:	f7fe fad7 	bl	8000204 <__aeabi_uldivmod>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0f1b      	lsrs	r3, r3, #28
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c7e:	e003      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3798      	adds	r7, #152	@ 0x98
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	017d7840 	.word	0x017d7840

08001ca4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e28d      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8083 	beq.w	8001dca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cc4:	4b94      	ldr	r3, [pc, #592]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d019      	beq.n	8001d04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cd0:	4b91      	ldr	r3, [pc, #580]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce8:	d00c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b8b      	ldr	r3, [pc, #556]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf6:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	4b84      	ldr	r3, [pc, #528]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d05b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x124>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d157      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e25a      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x90>
 8001d26:	4b7c      	ldr	r3, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xcc>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xb4>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a72      	ldr	r2, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xcc>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ffb2 	bl	8000ce0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe ffae 	bl	8000ce0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e21f      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xdc>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe ff9e 	bl	8000ce0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe ff9a 	bl	8000ce0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e20b      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x104>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d06f      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dd6:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d017      	beq.n	8001e12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x186>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1d3      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe ff47 	bl	8000ce0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e56:	f7fe ff43 	bl	8000ce0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1b4      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff26 	bl	8000ce0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7fe ff22 	bl	8000ce0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e193      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7fe ff06 	bl	8000ce0 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe ff02 	bl	8000ce0 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e173      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x234>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7fe feef 	bl	8000ce0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f06:	f7fe feeb 	bl	8000ce0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e15c      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b83      	ldr	r3, [pc, #524]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a7e      	ldr	r2, [pc, #504]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe feab 	bl	8000ce0 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fea7 	bl	8000ce0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e118      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x31e>
 8001fb4:	4b66      	ldr	r3, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a65      	ldr	r2, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x358>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x340>
 8001fca:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a60      	ldr	r2, [pc, #384]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5d      	ldr	r2, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x358>
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a59      	ldr	r2, [pc, #356]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b57      	ldr	r3, [pc, #348]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a56      	ldr	r2, [pc, #344]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fe6c 	bl	8000ce0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe fe68 	bl	8000ce0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0d7      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x368>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe fe56 	bl	8000ce0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe fe52 	bl	8000ce0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0c1      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80ad 	beq.w	80021d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d060      	beq.n	8002144 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d145      	bne.n	8002116 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fe26 	bl	8000ce0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fe22 	bl	8000ce0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e093      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	071b      	lsls	r3, r3, #28
 80020e2:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fdf7 	bl	8000ce0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe fdf3 	bl	8000ce0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e064      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x452>
 8002114:	e05c      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fde0 	bl	8000ce0 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fddc 	bl	8000ce0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04d      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x480>
 8002142:	e045      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e040      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000
 8002158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <HAL_RCC_OscConfig+0x538>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d030      	beq.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d129      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d122      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002194:	4293      	cmp	r3, r2
 8002196:	d119      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10f      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f839 	bl	800227e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 f9c0 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e04e      	b.n	800234a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a23      	ldr	r2, [pc, #140]	@ (8002358 <HAL_TIM_Base_Start_IT+0xc4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d6:	d01d      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_TIM_Base_Start_IT+0xc8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002360 <HAL_TIM_Base_Start_IT+0xcc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_TIM_Base_Start_IT+0xd0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_TIM_Base_Start_IT+0xd4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	@ (800236c <HAL_TIM_Base_Start_IT+0xd8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x80>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a18      	ldr	r2, [pc, #96]	@ (8002370 <HAL_TIM_Base_Start_IT+0xdc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d010      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	e007      	b.n	8002348 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800
 8002364:	40000c00 	.word	0x40000c00
 8002368:	40010400 	.word	0x40010400
 800236c:	40014000 	.word	0x40014000
 8002370:	40001800 	.word	0x40001800

08002374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d020      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0202 	mvn.w	r2, #2
 80023a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8d2 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8c4 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8d5 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8ac 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f89e 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f8af 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0208 	mvn.w	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f886 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f878 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f889 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0210 	mvn.w	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2208      	movs	r2, #8
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f860 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f852 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f863 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0201 	mvn.w	r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe f980 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f906 	bl	8002710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f834 	bl	8002590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0220 	mvn.w	r2, #32
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8d8 	bl	80026fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a46      	ldr	r2, [pc, #280]	@ (80026d0 <TIM_Base_SetConfig+0x12c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c2:	d00f      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a43      	ldr	r2, [pc, #268]	@ (80026d4 <TIM_Base_SetConfig+0x130>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a42      	ldr	r2, [pc, #264]	@ (80026d8 <TIM_Base_SetConfig+0x134>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a41      	ldr	r2, [pc, #260]	@ (80026dc <TIM_Base_SetConfig+0x138>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a40      	ldr	r2, [pc, #256]	@ (80026e0 <TIM_Base_SetConfig+0x13c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a35      	ldr	r2, [pc, #212]	@ (80026d0 <TIM_Base_SetConfig+0x12c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002604:	d027      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a32      	ldr	r2, [pc, #200]	@ (80026d4 <TIM_Base_SetConfig+0x130>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d023      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a31      	ldr	r2, [pc, #196]	@ (80026d8 <TIM_Base_SetConfig+0x134>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a30      	ldr	r2, [pc, #192]	@ (80026dc <TIM_Base_SetConfig+0x138>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2f      	ldr	r2, [pc, #188]	@ (80026e0 <TIM_Base_SetConfig+0x13c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d017      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <TIM_Base_SetConfig+0x140>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <TIM_Base_SetConfig+0x144>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <TIM_Base_SetConfig+0x148>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <TIM_Base_SetConfig+0x14c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2a      	ldr	r2, [pc, #168]	@ (80026f4 <TIM_Base_SetConfig+0x150>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a29      	ldr	r2, [pc, #164]	@ (80026f8 <TIM_Base_SetConfig+0x154>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <TIM_Base_SetConfig+0x12c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0xf8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <TIM_Base_SetConfig+0x13c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f023 0201 	bic.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
  }
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40000c00 	.word	0x40000c00
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800
 80026f0:	40001800 	.word	0x40001800
 80026f4:	40001c00 	.word	0x40001c00
 80026f8:	40002000 	.word	0x40002000

080026fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f8d0 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f82b 	bl	80027c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b0c0      	sub	sp, #256	@ 0x100
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	ea40 0301 	orr.w	r3, r0, r1
 80027ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800281c:	f021 010c 	bic.w	r1, r1, #12
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800282a:	430b      	orrs	r3, r1
 800282c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	6999      	ldr	r1, [r3, #24]
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	ea40 0301 	orr.w	r3, r0, r1
 800284a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b8f      	ldr	r3, [pc, #572]	@ (8002a90 <UART_SetConfig+0x2cc>)
 8002854:	429a      	cmp	r2, r3
 8002856:	d005      	beq.n	8002864 <UART_SetConfig+0xa0>
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a94 <UART_SetConfig+0x2d0>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d104      	bne.n	800286e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff f82e 	bl	80018c4 <HAL_RCC_GetPCLK2Freq>
 8002868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800286c:	e003      	b.n	8002876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800286e:	f7ff f815 	bl	800189c <HAL_RCC_GetPCLK1Freq>
 8002872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002880:	f040 810c 	bne.w	8002a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002888:	2200      	movs	r2, #0
 800288a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800288e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002896:	4622      	mov	r2, r4
 8002898:	462b      	mov	r3, r5
 800289a:	1891      	adds	r1, r2, r2
 800289c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800289e:	415b      	adcs	r3, r3
 80028a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028a6:	4621      	mov	r1, r4
 80028a8:	eb12 0801 	adds.w	r8, r2, r1
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb43 0901 	adc.w	r9, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb18 0303 	adds.w	r3, r8, r3
 80028d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028d4:	462b      	mov	r3, r5
 80028d6:	eb49 0303 	adc.w	r3, r9, r3
 80028da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028f2:	460b      	mov	r3, r1
 80028f4:	18db      	adds	r3, r3, r3
 80028f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028f8:	4613      	mov	r3, r2
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002908:	f7fd fc7c 	bl	8000204 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011c      	lsls	r4, r3, #4
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002934:	415b      	adcs	r3, r3
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800293c:	4641      	mov	r1, r8
 800293e:	eb12 0a01 	adds.w	sl, r2, r1
 8002942:	4649      	mov	r1, r9
 8002944:	eb43 0b01 	adc.w	fp, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295c:	4692      	mov	sl, r2
 800295e:	469b      	mov	fp, r3
 8002960:	4643      	mov	r3, r8
 8002962:	eb1a 0303 	adds.w	r3, sl, r3
 8002966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800296a:	464b      	mov	r3, r9
 800296c:	eb4b 0303 	adc.w	r3, fp, r3
 8002970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002988:	460b      	mov	r3, r1
 800298a:	18db      	adds	r3, r3, r3
 800298c:	643b      	str	r3, [r7, #64]	@ 0x40
 800298e:	4613      	mov	r3, r2
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	647b      	str	r3, [r7, #68]	@ 0x44
 8002996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800299e:	f7fd fc31 	bl	8000204 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <UART_SetConfig+0x2d4>)
 80029aa:	fba3 2301 	umull	r2, r3, r3, r1
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	@ 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1acb      	subs	r3, r1, r3
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029be:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <UART_SetConfig+0x2d4>)
 80029c0:	fba3 2302 	umull	r2, r3, r3, r2
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029cc:	441c      	add	r4, r3
 80029ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	1891      	adds	r1, r2, r2
 80029e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029e8:	415b      	adcs	r3, r3
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029f0:	4641      	mov	r1, r8
 80029f2:	1851      	adds	r1, r2, r1
 80029f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80029f6:	4649      	mov	r1, r9
 80029f8:	414b      	adcs	r3, r1
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a08:	4659      	mov	r1, fp
 8002a0a:	00cb      	lsls	r3, r1, #3
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a12:	4651      	mov	r1, sl
 8002a14:	00ca      	lsls	r2, r1, #3
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a24:	464b      	mov	r3, r9
 8002a26:	460a      	mov	r2, r1
 8002a28:	eb42 0303 	adc.w	r3, r2, r3
 8002a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a44:	460b      	mov	r3, r1
 8002a46:	18db      	adds	r3, r3, r3
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a5a:	f7fd fbd3 	bl	8000204 <__aeabi_uldivmod>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002a64:	fba3 1302 	umull	r1, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	2164      	movs	r1, #100	@ 0x64
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	3332      	adds	r3, #50	@ 0x32
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	f003 0207 	and.w	r2, r3, #7
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4422      	add	r2, r4
 8002a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a8c:	e106      	b.n	8002c9c <UART_SetConfig+0x4d8>
 8002a8e:	bf00      	nop
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40011400 	.word	0x40011400
 8002a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002aae:	4642      	mov	r2, r8
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	1891      	adds	r1, r2, r2
 8002ab4:	6239      	str	r1, [r7, #32]
 8002ab6:	415b      	adcs	r3, r3
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002abe:	4641      	mov	r1, r8
 8002ac0:	1854      	adds	r4, r2, r1
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	eb43 0501 	adc.w	r5, r3, r1
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	00eb      	lsls	r3, r5, #3
 8002ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad6:	00e2      	lsls	r2, r4, #3
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4643      	mov	r3, r8
 8002ade:	18e3      	adds	r3, r4, r3
 8002ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	eb45 0303 	adc.w	r3, r5, r3
 8002aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	008b      	lsls	r3, r1, #2
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b14:	4621      	mov	r1, r4
 8002b16:	008a      	lsls	r2, r1, #2
 8002b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b1c:	f7fd fb72 	bl	8000204 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002b26:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	011c      	lsls	r4, r3, #4
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	61b9      	str	r1, [r7, #24]
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	6139      	str	r1, [r7, #16]
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b84:	464b      	mov	r3, r9
 8002b86:	460a      	mov	r2, r1
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ba8:	4649      	mov	r1, r9
 8002baa:	008b      	lsls	r3, r1, #2
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	008a      	lsls	r2, r1, #2
 8002bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bba:	f7fd fb23 	bl	8000204 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2264      	movs	r2, #100	@ 0x64
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	1acb      	subs	r3, r1, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	@ 0x32
 8002bd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be4:	441c      	add	r4, r3
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1891      	adds	r1, r2, r2
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	415b      	adcs	r3, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c04:	4641      	mov	r1, r8
 8002c06:	1851      	adds	r1, r2, r1
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4651      	mov	r1, sl
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4651      	mov	r1, sl
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4642      	mov	r2, r8
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c36:	464b      	mov	r3, r9
 8002c38:	460a      	mov	r2, r1
 8002c3a:	eb42 0303 	adc.w	r3, r2, r3
 8002c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c58:	4649      	mov	r1, r9
 8002c5a:	008b      	lsls	r3, r1, #2
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c62:	4641      	mov	r1, r8
 8002c64:	008a      	lsls	r2, r1, #2
 8002c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c6a:	f7fd facb 	bl	8000204 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002c74:	fba3 1302 	umull	r1, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2164      	movs	r1, #100	@ 0x64
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	3332      	adds	r3, #50	@ 0x32
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4422      	add	r2, r4
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca8:	51eb851f 	.word	0x51eb851f

08002cac <std>:
 8002cac:	2300      	movs	r3, #0
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8002cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cba:	6083      	str	r3, [r0, #8]
 8002cbc:	8181      	strh	r1, [r0, #12]
 8002cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cc0:	81c2      	strh	r2, [r0, #14]
 8002cc2:	6183      	str	r3, [r0, #24]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	305c      	adds	r0, #92	@ 0x5c
 8002cca:	f000 f9e7 	bl	800309c <memset>
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <std+0x58>)
 8002cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <std+0x5c>)
 8002cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <std+0x60>)
 8002cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <std+0x64>)
 8002cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <std+0x68>)
 8002ce0:	6224      	str	r4, [r4, #32]
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d006      	beq.n	8002cf4 <std+0x48>
 8002ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002cea:	4294      	cmp	r4, r2
 8002cec:	d002      	beq.n	8002cf4 <std+0x48>
 8002cee:	33d0      	adds	r3, #208	@ 0xd0
 8002cf0:	429c      	cmp	r4, r3
 8002cf2:	d105      	bne.n	8002d00 <std+0x54>
 8002cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	f000 ba46 	b.w	800318c <__retarget_lock_init_recursive>
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	08002eed 	.word	0x08002eed
 8002d08:	08002f0f 	.word	0x08002f0f
 8002d0c:	08002f47 	.word	0x08002f47
 8002d10:	08002f6b 	.word	0x08002f6b
 8002d14:	20000144 	.word	0x20000144

08002d18 <stdio_exit_handler>:
 8002d18:	4a02      	ldr	r2, [pc, #8]	@ (8002d24 <stdio_exit_handler+0xc>)
 8002d1a:	4903      	ldr	r1, [pc, #12]	@ (8002d28 <stdio_exit_handler+0x10>)
 8002d1c:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <stdio_exit_handler+0x14>)
 8002d1e:	f000 b869 	b.w	8002df4 <_fwalk_sglue>
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	0800348d 	.word	0x0800348d
 8002d2c:	2000001c 	.word	0x2000001c

08002d30 <cleanup_stdio>:
 8002d30:	6841      	ldr	r1, [r0, #4]
 8002d32:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <cleanup_stdio+0x34>)
 8002d34:	4299      	cmp	r1, r3
 8002d36:	b510      	push	{r4, lr}
 8002d38:	4604      	mov	r4, r0
 8002d3a:	d001      	beq.n	8002d40 <cleanup_stdio+0x10>
 8002d3c:	f000 fba6 	bl	800348c <_fflush_r>
 8002d40:	68a1      	ldr	r1, [r4, #8]
 8002d42:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <cleanup_stdio+0x38>)
 8002d44:	4299      	cmp	r1, r3
 8002d46:	d002      	beq.n	8002d4e <cleanup_stdio+0x1e>
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f000 fb9f 	bl	800348c <_fflush_r>
 8002d4e:	68e1      	ldr	r1, [r4, #12]
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <cleanup_stdio+0x3c>)
 8002d52:	4299      	cmp	r1, r3
 8002d54:	d004      	beq.n	8002d60 <cleanup_stdio+0x30>
 8002d56:	4620      	mov	r0, r4
 8002d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d5c:	f000 bb96 	b.w	800348c <_fflush_r>
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	bf00      	nop
 8002d64:	20000144 	.word	0x20000144
 8002d68:	200001ac 	.word	0x200001ac
 8002d6c:	20000214 	.word	0x20000214

08002d70 <global_stdio_init.part.0>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <global_stdio_init.part.0+0x30>)
 8002d74:	4c0b      	ldr	r4, [pc, #44]	@ (8002da4 <global_stdio_init.part.0+0x34>)
 8002d76:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <global_stdio_init.part.0+0x38>)
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2104      	movs	r1, #4
 8002d80:	f7ff ff94 	bl	8002cac <std>
 8002d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2109      	movs	r1, #9
 8002d8c:	f7ff ff8e 	bl	8002cac <std>
 8002d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d94:	2202      	movs	r2, #2
 8002d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d9a:	2112      	movs	r1, #18
 8002d9c:	f7ff bf86 	b.w	8002cac <std>
 8002da0:	2000027c 	.word	0x2000027c
 8002da4:	20000144 	.word	0x20000144
 8002da8:	08002d19 	.word	0x08002d19

08002dac <__sfp_lock_acquire>:
 8002dac:	4801      	ldr	r0, [pc, #4]	@ (8002db4 <__sfp_lock_acquire+0x8>)
 8002dae:	f000 b9ee 	b.w	800318e <__retarget_lock_acquire_recursive>
 8002db2:	bf00      	nop
 8002db4:	20000285 	.word	0x20000285

08002db8 <__sfp_lock_release>:
 8002db8:	4801      	ldr	r0, [pc, #4]	@ (8002dc0 <__sfp_lock_release+0x8>)
 8002dba:	f000 b9e9 	b.w	8003190 <__retarget_lock_release_recursive>
 8002dbe:	bf00      	nop
 8002dc0:	20000285 	.word	0x20000285

08002dc4 <__sinit>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	f7ff fff0 	bl	8002dac <__sfp_lock_acquire>
 8002dcc:	6a23      	ldr	r3, [r4, #32]
 8002dce:	b11b      	cbz	r3, 8002dd8 <__sinit+0x14>
 8002dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dd4:	f7ff bff0 	b.w	8002db8 <__sfp_lock_release>
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <__sinit+0x28>)
 8002dda:	6223      	str	r3, [r4, #32]
 8002ddc:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <__sinit+0x2c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f5      	bne.n	8002dd0 <__sinit+0xc>
 8002de4:	f7ff ffc4 	bl	8002d70 <global_stdio_init.part.0>
 8002de8:	e7f2      	b.n	8002dd0 <__sinit+0xc>
 8002dea:	bf00      	nop
 8002dec:	08002d31 	.word	0x08002d31
 8002df0:	2000027c 	.word	0x2000027c

08002df4 <_fwalk_sglue>:
 8002df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df8:	4607      	mov	r7, r0
 8002dfa:	4688      	mov	r8, r1
 8002dfc:	4614      	mov	r4, r2
 8002dfe:	2600      	movs	r6, #0
 8002e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e04:	f1b9 0901 	subs.w	r9, r9, #1
 8002e08:	d505      	bpl.n	8002e16 <_fwalk_sglue+0x22>
 8002e0a:	6824      	ldr	r4, [r4, #0]
 8002e0c:	2c00      	cmp	r4, #0
 8002e0e:	d1f7      	bne.n	8002e00 <_fwalk_sglue+0xc>
 8002e10:	4630      	mov	r0, r6
 8002e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e16:	89ab      	ldrh	r3, [r5, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d907      	bls.n	8002e2c <_fwalk_sglue+0x38>
 8002e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d003      	beq.n	8002e2c <_fwalk_sglue+0x38>
 8002e24:	4629      	mov	r1, r5
 8002e26:	4638      	mov	r0, r7
 8002e28:	47c0      	blx	r8
 8002e2a:	4306      	orrs	r6, r0
 8002e2c:	3568      	adds	r5, #104	@ 0x68
 8002e2e:	e7e9      	b.n	8002e04 <_fwalk_sglue+0x10>

08002e30 <_puts_r>:
 8002e30:	6a03      	ldr	r3, [r0, #32]
 8002e32:	b570      	push	{r4, r5, r6, lr}
 8002e34:	6884      	ldr	r4, [r0, #8]
 8002e36:	4605      	mov	r5, r0
 8002e38:	460e      	mov	r6, r1
 8002e3a:	b90b      	cbnz	r3, 8002e40 <_puts_r+0x10>
 8002e3c:	f7ff ffc2 	bl	8002dc4 <__sinit>
 8002e40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e42:	07db      	lsls	r3, r3, #31
 8002e44:	d405      	bmi.n	8002e52 <_puts_r+0x22>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	0598      	lsls	r0, r3, #22
 8002e4a:	d402      	bmi.n	8002e52 <_puts_r+0x22>
 8002e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e4e:	f000 f99e 	bl	800318e <__retarget_lock_acquire_recursive>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	0719      	lsls	r1, r3, #28
 8002e56:	d502      	bpl.n	8002e5e <_puts_r+0x2e>
 8002e58:	6923      	ldr	r3, [r4, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d135      	bne.n	8002eca <_puts_r+0x9a>
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f8c5 	bl	8002ff0 <__swsetup_r>
 8002e66:	b380      	cbz	r0, 8002eca <_puts_r+0x9a>
 8002e68:	f04f 35ff 	mov.w	r5, #4294967295
 8002e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e6e:	07da      	lsls	r2, r3, #31
 8002e70:	d405      	bmi.n	8002e7e <_puts_r+0x4e>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	059b      	lsls	r3, r3, #22
 8002e76:	d402      	bmi.n	8002e7e <_puts_r+0x4e>
 8002e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e7a:	f000 f989 	bl	8003190 <__retarget_lock_release_recursive>
 8002e7e:	4628      	mov	r0, r5
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da04      	bge.n	8002e90 <_puts_r+0x60>
 8002e86:	69a2      	ldr	r2, [r4, #24]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	dc17      	bgt.n	8002ebc <_puts_r+0x8c>
 8002e8c:	290a      	cmp	r1, #10
 8002e8e:	d015      	beq.n	8002ebc <_puts_r+0x8c>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	6022      	str	r2, [r4, #0]
 8002e96:	7019      	strb	r1, [r3, #0]
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60a3      	str	r3, [r4, #8]
 8002ea2:	2900      	cmp	r1, #0
 8002ea4:	d1ed      	bne.n	8002e82 <_puts_r+0x52>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da11      	bge.n	8002ece <_puts_r+0x9e>
 8002eaa:	4622      	mov	r2, r4
 8002eac:	210a      	movs	r1, #10
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 f85f 	bl	8002f72 <__swbuf_r>
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d0d7      	beq.n	8002e68 <_puts_r+0x38>
 8002eb8:	250a      	movs	r5, #10
 8002eba:	e7d7      	b.n	8002e6c <_puts_r+0x3c>
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f000 f857 	bl	8002f72 <__swbuf_r>
 8002ec4:	3001      	adds	r0, #1
 8002ec6:	d1e7      	bne.n	8002e98 <_puts_r+0x68>
 8002ec8:	e7ce      	b.n	8002e68 <_puts_r+0x38>
 8002eca:	3e01      	subs	r6, #1
 8002ecc:	e7e4      	b.n	8002e98 <_puts_r+0x68>
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	6022      	str	r2, [r4, #0]
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e7ee      	b.n	8002eb8 <_puts_r+0x88>
	...

08002edc <puts>:
 8002edc:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <puts+0xc>)
 8002ede:	4601      	mov	r1, r0
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	f7ff bfa5 	b.w	8002e30 <_puts_r>
 8002ee6:	bf00      	nop
 8002ee8:	20000018 	.word	0x20000018

08002eec <__sread>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	460c      	mov	r4, r1
 8002ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef4:	f000 f8fc 	bl	80030f0 <_read_r>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	bfab      	itete	ge
 8002efc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002efe:	89a3      	ldrhlt	r3, [r4, #12]
 8002f00:	181b      	addge	r3, r3, r0
 8002f02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f06:	bfac      	ite	ge
 8002f08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f0a:	81a3      	strhlt	r3, [r4, #12]
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <__swrite>:
 8002f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f12:	461f      	mov	r7, r3
 8002f14:	898b      	ldrh	r3, [r1, #12]
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	4605      	mov	r5, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4616      	mov	r6, r2
 8002f1e:	d505      	bpl.n	8002f2c <__swrite+0x1e>
 8002f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f24:	2302      	movs	r3, #2
 8002f26:	2200      	movs	r2, #0
 8002f28:	f000 f8d0 	bl	80030cc <_lseek_r>
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f36:	81a3      	strh	r3, [r4, #12]
 8002f38:	4632      	mov	r2, r6
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f42:	f000 b8e7 	b.w	8003114 <_write_r>

08002f46 <__sseek>:
 8002f46:	b510      	push	{r4, lr}
 8002f48:	460c      	mov	r4, r1
 8002f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4e:	f000 f8bd 	bl	80030cc <_lseek_r>
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	bf15      	itete	ne
 8002f58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f62:	81a3      	strheq	r3, [r4, #12]
 8002f64:	bf18      	it	ne
 8002f66:	81a3      	strhne	r3, [r4, #12]
 8002f68:	bd10      	pop	{r4, pc}

08002f6a <__sclose>:
 8002f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6e:	f000 b89d 	b.w	80030ac <_close_r>

08002f72 <__swbuf_r>:
 8002f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f74:	460e      	mov	r6, r1
 8002f76:	4614      	mov	r4, r2
 8002f78:	4605      	mov	r5, r0
 8002f7a:	b118      	cbz	r0, 8002f84 <__swbuf_r+0x12>
 8002f7c:	6a03      	ldr	r3, [r0, #32]
 8002f7e:	b90b      	cbnz	r3, 8002f84 <__swbuf_r+0x12>
 8002f80:	f7ff ff20 	bl	8002dc4 <__sinit>
 8002f84:	69a3      	ldr	r3, [r4, #24]
 8002f86:	60a3      	str	r3, [r4, #8]
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	071a      	lsls	r2, r3, #28
 8002f8c:	d501      	bpl.n	8002f92 <__swbuf_r+0x20>
 8002f8e:	6923      	ldr	r3, [r4, #16]
 8002f90:	b943      	cbnz	r3, 8002fa4 <__swbuf_r+0x32>
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 f82b 	bl	8002ff0 <__swsetup_r>
 8002f9a:	b118      	cbz	r0, 8002fa4 <__swbuf_r+0x32>
 8002f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	6922      	ldr	r2, [r4, #16]
 8002fa8:	1a98      	subs	r0, r3, r2
 8002faa:	6963      	ldr	r3, [r4, #20]
 8002fac:	b2f6      	uxtb	r6, r6
 8002fae:	4283      	cmp	r3, r0
 8002fb0:	4637      	mov	r7, r6
 8002fb2:	dc05      	bgt.n	8002fc0 <__swbuf_r+0x4e>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 fa68 	bl	800348c <_fflush_r>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1ed      	bne.n	8002f9c <__swbuf_r+0x2a>
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60a3      	str	r3, [r4, #8]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	6022      	str	r2, [r4, #0]
 8002fcc:	701e      	strb	r6, [r3, #0]
 8002fce:	6962      	ldr	r2, [r4, #20]
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d004      	beq.n	8002fe0 <__swbuf_r+0x6e>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	07db      	lsls	r3, r3, #31
 8002fda:	d5e1      	bpl.n	8002fa0 <__swbuf_r+0x2e>
 8002fdc:	2e0a      	cmp	r6, #10
 8002fde:	d1df      	bne.n	8002fa0 <__swbuf_r+0x2e>
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 fa52 	bl	800348c <_fflush_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d0d9      	beq.n	8002fa0 <__swbuf_r+0x2e>
 8002fec:	e7d6      	b.n	8002f9c <__swbuf_r+0x2a>
	...

08002ff0 <__swsetup_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <__swsetup_r+0xa8>)
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	b118      	cbz	r0, 8003004 <__swsetup_r+0x14>
 8002ffc:	6a03      	ldr	r3, [r0, #32]
 8002ffe:	b90b      	cbnz	r3, 8003004 <__swsetup_r+0x14>
 8003000:	f7ff fee0 	bl	8002dc4 <__sinit>
 8003004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003008:	0719      	lsls	r1, r3, #28
 800300a:	d422      	bmi.n	8003052 <__swsetup_r+0x62>
 800300c:	06da      	lsls	r2, r3, #27
 800300e:	d407      	bmi.n	8003020 <__swsetup_r+0x30>
 8003010:	2209      	movs	r2, #9
 8003012:	602a      	str	r2, [r5, #0]
 8003014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	e033      	b.n	8003088 <__swsetup_r+0x98>
 8003020:	0758      	lsls	r0, r3, #29
 8003022:	d512      	bpl.n	800304a <__swsetup_r+0x5a>
 8003024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003026:	b141      	cbz	r1, 800303a <__swsetup_r+0x4a>
 8003028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800302c:	4299      	cmp	r1, r3
 800302e:	d002      	beq.n	8003036 <__swsetup_r+0x46>
 8003030:	4628      	mov	r0, r5
 8003032:	f000 f8af 	bl	8003194 <_free_r>
 8003036:	2300      	movs	r3, #0
 8003038:	6363      	str	r3, [r4, #52]	@ 0x34
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	6923      	ldr	r3, [r4, #16]
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	b94b      	cbnz	r3, 800306a <__swsetup_r+0x7a>
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800305c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003060:	d003      	beq.n	800306a <__swsetup_r+0x7a>
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 fa5f 	bl	8003528 <__smakebuf_r>
 800306a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800306e:	f013 0201 	ands.w	r2, r3, #1
 8003072:	d00a      	beq.n	800308a <__swsetup_r+0x9a>
 8003074:	2200      	movs	r2, #0
 8003076:	60a2      	str	r2, [r4, #8]
 8003078:	6962      	ldr	r2, [r4, #20]
 800307a:	4252      	negs	r2, r2
 800307c:	61a2      	str	r2, [r4, #24]
 800307e:	6922      	ldr	r2, [r4, #16]
 8003080:	b942      	cbnz	r2, 8003094 <__swsetup_r+0xa4>
 8003082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003086:	d1c5      	bne.n	8003014 <__swsetup_r+0x24>
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	0799      	lsls	r1, r3, #30
 800308c:	bf58      	it	pl
 800308e:	6962      	ldrpl	r2, [r4, #20]
 8003090:	60a2      	str	r2, [r4, #8]
 8003092:	e7f4      	b.n	800307e <__swsetup_r+0x8e>
 8003094:	2000      	movs	r0, #0
 8003096:	e7f7      	b.n	8003088 <__swsetup_r+0x98>
 8003098:	20000018 	.word	0x20000018

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <_close_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d06      	ldr	r5, [pc, #24]	@ (80030c8 <_close_r+0x1c>)
 80030b0:	2300      	movs	r3, #0
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	f7fd fd35 	bl	8000b26 <_close>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d102      	bne.n	80030c6 <_close_r+0x1a>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	b103      	cbz	r3, 80030c6 <_close_r+0x1a>
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	20000280 	.word	0x20000280

080030cc <_lseek_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4d07      	ldr	r5, [pc, #28]	@ (80030ec <_lseek_r+0x20>)
 80030d0:	4604      	mov	r4, r0
 80030d2:	4608      	mov	r0, r1
 80030d4:	4611      	mov	r1, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	602a      	str	r2, [r5, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	f7fd fd4a 	bl	8000b74 <_lseek>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_lseek_r+0x1e>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_lseek_r+0x1e>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20000280 	.word	0x20000280

080030f0 <_read_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d07      	ldr	r5, [pc, #28]	@ (8003110 <_read_r+0x20>)
 80030f4:	4604      	mov	r4, r0
 80030f6:	4608      	mov	r0, r1
 80030f8:	4611      	mov	r1, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	602a      	str	r2, [r5, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	f7fd fcf4 	bl	8000aec <_read>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d102      	bne.n	800310e <_read_r+0x1e>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	b103      	cbz	r3, 800310e <_read_r+0x1e>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	20000280 	.word	0x20000280

08003114 <_write_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4d07      	ldr	r5, [pc, #28]	@ (8003134 <_write_r+0x20>)
 8003118:	4604      	mov	r4, r0
 800311a:	4608      	mov	r0, r1
 800311c:	4611      	mov	r1, r2
 800311e:	2200      	movs	r2, #0
 8003120:	602a      	str	r2, [r5, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	f7fd fa0d 	bl	8000542 <_write>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_write_r+0x1e>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	b103      	cbz	r3, 8003132 <_write_r+0x1e>
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	20000280 	.word	0x20000280

08003138 <__errno>:
 8003138:	4b01      	ldr	r3, [pc, #4]	@ (8003140 <__errno+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000018 	.word	0x20000018

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4d0d      	ldr	r5, [pc, #52]	@ (800317c <__libc_init_array+0x38>)
 8003148:	4c0d      	ldr	r4, [pc, #52]	@ (8003180 <__libc_init_array+0x3c>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	2600      	movs	r6, #0
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	4d0b      	ldr	r5, [pc, #44]	@ (8003184 <__libc_init_array+0x40>)
 8003156:	4c0c      	ldr	r4, [pc, #48]	@ (8003188 <__libc_init_array+0x44>)
 8003158:	f000 fa54 	bl	8003604 <_init>
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	2600      	movs	r6, #0
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	0800364c 	.word	0x0800364c
 8003180:	0800364c 	.word	0x0800364c
 8003184:	0800364c 	.word	0x0800364c
 8003188:	08003650 	.word	0x08003650

0800318c <__retarget_lock_init_recursive>:
 800318c:	4770      	bx	lr

0800318e <__retarget_lock_acquire_recursive>:
 800318e:	4770      	bx	lr

08003190 <__retarget_lock_release_recursive>:
 8003190:	4770      	bx	lr
	...

08003194 <_free_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4605      	mov	r5, r0
 8003198:	2900      	cmp	r1, #0
 800319a:	d041      	beq.n	8003220 <_free_r+0x8c>
 800319c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a0:	1f0c      	subs	r4, r1, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfb8      	it	lt
 80031a6:	18e4      	addlt	r4, r4, r3
 80031a8:	f000 f8e0 	bl	800336c <__malloc_lock>
 80031ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <_free_r+0x90>)
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	b933      	cbnz	r3, 80031c0 <_free_r+0x2c>
 80031b2:	6063      	str	r3, [r4, #4]
 80031b4:	6014      	str	r4, [r2, #0]
 80031b6:	4628      	mov	r0, r5
 80031b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031bc:	f000 b8dc 	b.w	8003378 <__malloc_unlock>
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	d908      	bls.n	80031d6 <_free_r+0x42>
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	1821      	adds	r1, r4, r0
 80031c8:	428b      	cmp	r3, r1
 80031ca:	bf01      	itttt	eq
 80031cc:	6819      	ldreq	r1, [r3, #0]
 80031ce:	685b      	ldreq	r3, [r3, #4]
 80031d0:	1809      	addeq	r1, r1, r0
 80031d2:	6021      	streq	r1, [r4, #0]
 80031d4:	e7ed      	b.n	80031b2 <_free_r+0x1e>
 80031d6:	461a      	mov	r2, r3
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b10b      	cbz	r3, 80031e0 <_free_r+0x4c>
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d9fa      	bls.n	80031d6 <_free_r+0x42>
 80031e0:	6811      	ldr	r1, [r2, #0]
 80031e2:	1850      	adds	r0, r2, r1
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d10b      	bne.n	8003200 <_free_r+0x6c>
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	4401      	add	r1, r0
 80031ec:	1850      	adds	r0, r2, r1
 80031ee:	4283      	cmp	r3, r0
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	d1e0      	bne.n	80031b6 <_free_r+0x22>
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	6053      	str	r3, [r2, #4]
 80031fa:	4408      	add	r0, r1
 80031fc:	6010      	str	r0, [r2, #0]
 80031fe:	e7da      	b.n	80031b6 <_free_r+0x22>
 8003200:	d902      	bls.n	8003208 <_free_r+0x74>
 8003202:	230c      	movs	r3, #12
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	e7d6      	b.n	80031b6 <_free_r+0x22>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	1821      	adds	r1, r4, r0
 800320c:	428b      	cmp	r3, r1
 800320e:	bf04      	itt	eq
 8003210:	6819      	ldreq	r1, [r3, #0]
 8003212:	685b      	ldreq	r3, [r3, #4]
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	bf04      	itt	eq
 8003218:	1809      	addeq	r1, r1, r0
 800321a:	6021      	streq	r1, [r4, #0]
 800321c:	6054      	str	r4, [r2, #4]
 800321e:	e7ca      	b.n	80031b6 <_free_r+0x22>
 8003220:	bd38      	pop	{r3, r4, r5, pc}
 8003222:	bf00      	nop
 8003224:	2000028c 	.word	0x2000028c

08003228 <sbrk_aligned>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4e0f      	ldr	r6, [pc, #60]	@ (8003268 <sbrk_aligned+0x40>)
 800322c:	460c      	mov	r4, r1
 800322e:	6831      	ldr	r1, [r6, #0]
 8003230:	4605      	mov	r5, r0
 8003232:	b911      	cbnz	r1, 800323a <sbrk_aligned+0x12>
 8003234:	f000 f9d6 	bl	80035e4 <_sbrk_r>
 8003238:	6030      	str	r0, [r6, #0]
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	f000 f9d1 	bl	80035e4 <_sbrk_r>
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	d103      	bne.n	800324e <sbrk_aligned+0x26>
 8003246:	f04f 34ff 	mov.w	r4, #4294967295
 800324a:	4620      	mov	r0, r4
 800324c:	bd70      	pop	{r4, r5, r6, pc}
 800324e:	1cc4      	adds	r4, r0, #3
 8003250:	f024 0403 	bic.w	r4, r4, #3
 8003254:	42a0      	cmp	r0, r4
 8003256:	d0f8      	beq.n	800324a <sbrk_aligned+0x22>
 8003258:	1a21      	subs	r1, r4, r0
 800325a:	4628      	mov	r0, r5
 800325c:	f000 f9c2 	bl	80035e4 <_sbrk_r>
 8003260:	3001      	adds	r0, #1
 8003262:	d1f2      	bne.n	800324a <sbrk_aligned+0x22>
 8003264:	e7ef      	b.n	8003246 <sbrk_aligned+0x1e>
 8003266:	bf00      	nop
 8003268:	20000288 	.word	0x20000288

0800326c <_malloc_r>:
 800326c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003270:	1ccd      	adds	r5, r1, #3
 8003272:	f025 0503 	bic.w	r5, r5, #3
 8003276:	3508      	adds	r5, #8
 8003278:	2d0c      	cmp	r5, #12
 800327a:	bf38      	it	cc
 800327c:	250c      	movcc	r5, #12
 800327e:	2d00      	cmp	r5, #0
 8003280:	4606      	mov	r6, r0
 8003282:	db01      	blt.n	8003288 <_malloc_r+0x1c>
 8003284:	42a9      	cmp	r1, r5
 8003286:	d904      	bls.n	8003292 <_malloc_r+0x26>
 8003288:	230c      	movs	r3, #12
 800328a:	6033      	str	r3, [r6, #0]
 800328c:	2000      	movs	r0, #0
 800328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003368 <_malloc_r+0xfc>
 8003296:	f000 f869 	bl	800336c <__malloc_lock>
 800329a:	f8d8 3000 	ldr.w	r3, [r8]
 800329e:	461c      	mov	r4, r3
 80032a0:	bb44      	cbnz	r4, 80032f4 <_malloc_r+0x88>
 80032a2:	4629      	mov	r1, r5
 80032a4:	4630      	mov	r0, r6
 80032a6:	f7ff ffbf 	bl	8003228 <sbrk_aligned>
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	4604      	mov	r4, r0
 80032ae:	d158      	bne.n	8003362 <_malloc_r+0xf6>
 80032b0:	f8d8 4000 	ldr.w	r4, [r8]
 80032b4:	4627      	mov	r7, r4
 80032b6:	2f00      	cmp	r7, #0
 80032b8:	d143      	bne.n	8003342 <_malloc_r+0xd6>
 80032ba:	2c00      	cmp	r4, #0
 80032bc:	d04b      	beq.n	8003356 <_malloc_r+0xea>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	4639      	mov	r1, r7
 80032c2:	4630      	mov	r0, r6
 80032c4:	eb04 0903 	add.w	r9, r4, r3
 80032c8:	f000 f98c 	bl	80035e4 <_sbrk_r>
 80032cc:	4581      	cmp	r9, r0
 80032ce:	d142      	bne.n	8003356 <_malloc_r+0xea>
 80032d0:	6821      	ldr	r1, [r4, #0]
 80032d2:	1a6d      	subs	r5, r5, r1
 80032d4:	4629      	mov	r1, r5
 80032d6:	4630      	mov	r0, r6
 80032d8:	f7ff ffa6 	bl	8003228 <sbrk_aligned>
 80032dc:	3001      	adds	r0, #1
 80032de:	d03a      	beq.n	8003356 <_malloc_r+0xea>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	442b      	add	r3, r5
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	bb62      	cbnz	r2, 8003348 <_malloc_r+0xdc>
 80032ee:	f8c8 7000 	str.w	r7, [r8]
 80032f2:	e00f      	b.n	8003314 <_malloc_r+0xa8>
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	1b52      	subs	r2, r2, r5
 80032f8:	d420      	bmi.n	800333c <_malloc_r+0xd0>
 80032fa:	2a0b      	cmp	r2, #11
 80032fc:	d917      	bls.n	800332e <_malloc_r+0xc2>
 80032fe:	1961      	adds	r1, r4, r5
 8003300:	42a3      	cmp	r3, r4
 8003302:	6025      	str	r5, [r4, #0]
 8003304:	bf18      	it	ne
 8003306:	6059      	strne	r1, [r3, #4]
 8003308:	6863      	ldr	r3, [r4, #4]
 800330a:	bf08      	it	eq
 800330c:	f8c8 1000 	streq.w	r1, [r8]
 8003310:	5162      	str	r2, [r4, r5]
 8003312:	604b      	str	r3, [r1, #4]
 8003314:	4630      	mov	r0, r6
 8003316:	f000 f82f 	bl	8003378 <__malloc_unlock>
 800331a:	f104 000b 	add.w	r0, r4, #11
 800331e:	1d23      	adds	r3, r4, #4
 8003320:	f020 0007 	bic.w	r0, r0, #7
 8003324:	1ac2      	subs	r2, r0, r3
 8003326:	bf1c      	itt	ne
 8003328:	1a1b      	subne	r3, r3, r0
 800332a:	50a3      	strne	r3, [r4, r2]
 800332c:	e7af      	b.n	800328e <_malloc_r+0x22>
 800332e:	6862      	ldr	r2, [r4, #4]
 8003330:	42a3      	cmp	r3, r4
 8003332:	bf0c      	ite	eq
 8003334:	f8c8 2000 	streq.w	r2, [r8]
 8003338:	605a      	strne	r2, [r3, #4]
 800333a:	e7eb      	b.n	8003314 <_malloc_r+0xa8>
 800333c:	4623      	mov	r3, r4
 800333e:	6864      	ldr	r4, [r4, #4]
 8003340:	e7ae      	b.n	80032a0 <_malloc_r+0x34>
 8003342:	463c      	mov	r4, r7
 8003344:	687f      	ldr	r7, [r7, #4]
 8003346:	e7b6      	b.n	80032b6 <_malloc_r+0x4a>
 8003348:	461a      	mov	r2, r3
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	42a3      	cmp	r3, r4
 800334e:	d1fb      	bne.n	8003348 <_malloc_r+0xdc>
 8003350:	2300      	movs	r3, #0
 8003352:	6053      	str	r3, [r2, #4]
 8003354:	e7de      	b.n	8003314 <_malloc_r+0xa8>
 8003356:	230c      	movs	r3, #12
 8003358:	6033      	str	r3, [r6, #0]
 800335a:	4630      	mov	r0, r6
 800335c:	f000 f80c 	bl	8003378 <__malloc_unlock>
 8003360:	e794      	b.n	800328c <_malloc_r+0x20>
 8003362:	6005      	str	r5, [r0, #0]
 8003364:	e7d6      	b.n	8003314 <_malloc_r+0xa8>
 8003366:	bf00      	nop
 8003368:	2000028c 	.word	0x2000028c

0800336c <__malloc_lock>:
 800336c:	4801      	ldr	r0, [pc, #4]	@ (8003374 <__malloc_lock+0x8>)
 800336e:	f7ff bf0e 	b.w	800318e <__retarget_lock_acquire_recursive>
 8003372:	bf00      	nop
 8003374:	20000284 	.word	0x20000284

08003378 <__malloc_unlock>:
 8003378:	4801      	ldr	r0, [pc, #4]	@ (8003380 <__malloc_unlock+0x8>)
 800337a:	f7ff bf09 	b.w	8003190 <__retarget_lock_release_recursive>
 800337e:	bf00      	nop
 8003380:	20000284 	.word	0x20000284

08003384 <__sflush_r>:
 8003384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338c:	0716      	lsls	r6, r2, #28
 800338e:	4605      	mov	r5, r0
 8003390:	460c      	mov	r4, r1
 8003392:	d454      	bmi.n	800343e <__sflush_r+0xba>
 8003394:	684b      	ldr	r3, [r1, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	dc02      	bgt.n	80033a0 <__sflush_r+0x1c>
 800339a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd48      	ble.n	8003432 <__sflush_r+0xae>
 80033a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033a2:	2e00      	cmp	r6, #0
 80033a4:	d045      	beq.n	8003432 <__sflush_r+0xae>
 80033a6:	2300      	movs	r3, #0
 80033a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80033ac:	682f      	ldr	r7, [r5, #0]
 80033ae:	6a21      	ldr	r1, [r4, #32]
 80033b0:	602b      	str	r3, [r5, #0]
 80033b2:	d030      	beq.n	8003416 <__sflush_r+0x92>
 80033b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	0759      	lsls	r1, r3, #29
 80033ba:	d505      	bpl.n	80033c8 <__sflush_r+0x44>
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033c2:	b10b      	cbz	r3, 80033c8 <__sflush_r+0x44>
 80033c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	2300      	movs	r3, #0
 80033ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033cc:	6a21      	ldr	r1, [r4, #32]
 80033ce:	4628      	mov	r0, r5
 80033d0:	47b0      	blx	r6
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	d106      	bne.n	80033e6 <__sflush_r+0x62>
 80033d8:	6829      	ldr	r1, [r5, #0]
 80033da:	291d      	cmp	r1, #29
 80033dc:	d82b      	bhi.n	8003436 <__sflush_r+0xb2>
 80033de:	4a2a      	ldr	r2, [pc, #168]	@ (8003488 <__sflush_r+0x104>)
 80033e0:	410a      	asrs	r2, r1
 80033e2:	07d6      	lsls	r6, r2, #31
 80033e4:	d427      	bmi.n	8003436 <__sflush_r+0xb2>
 80033e6:	2200      	movs	r2, #0
 80033e8:	6062      	str	r2, [r4, #4]
 80033ea:	04d9      	lsls	r1, r3, #19
 80033ec:	6922      	ldr	r2, [r4, #16]
 80033ee:	6022      	str	r2, [r4, #0]
 80033f0:	d504      	bpl.n	80033fc <__sflush_r+0x78>
 80033f2:	1c42      	adds	r2, r0, #1
 80033f4:	d101      	bne.n	80033fa <__sflush_r+0x76>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	b903      	cbnz	r3, 80033fc <__sflush_r+0x78>
 80033fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80033fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033fe:	602f      	str	r7, [r5, #0]
 8003400:	b1b9      	cbz	r1, 8003432 <__sflush_r+0xae>
 8003402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003406:	4299      	cmp	r1, r3
 8003408:	d002      	beq.n	8003410 <__sflush_r+0x8c>
 800340a:	4628      	mov	r0, r5
 800340c:	f7ff fec2 	bl	8003194 <_free_r>
 8003410:	2300      	movs	r3, #0
 8003412:	6363      	str	r3, [r4, #52]	@ 0x34
 8003414:	e00d      	b.n	8003432 <__sflush_r+0xae>
 8003416:	2301      	movs	r3, #1
 8003418:	4628      	mov	r0, r5
 800341a:	47b0      	blx	r6
 800341c:	4602      	mov	r2, r0
 800341e:	1c50      	adds	r0, r2, #1
 8003420:	d1c9      	bne.n	80033b6 <__sflush_r+0x32>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0c6      	beq.n	80033b6 <__sflush_r+0x32>
 8003428:	2b1d      	cmp	r3, #29
 800342a:	d001      	beq.n	8003430 <__sflush_r+0xac>
 800342c:	2b16      	cmp	r3, #22
 800342e:	d11e      	bne.n	800346e <__sflush_r+0xea>
 8003430:	602f      	str	r7, [r5, #0]
 8003432:	2000      	movs	r0, #0
 8003434:	e022      	b.n	800347c <__sflush_r+0xf8>
 8003436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800343a:	b21b      	sxth	r3, r3
 800343c:	e01b      	b.n	8003476 <__sflush_r+0xf2>
 800343e:	690f      	ldr	r7, [r1, #16]
 8003440:	2f00      	cmp	r7, #0
 8003442:	d0f6      	beq.n	8003432 <__sflush_r+0xae>
 8003444:	0793      	lsls	r3, r2, #30
 8003446:	680e      	ldr	r6, [r1, #0]
 8003448:	bf08      	it	eq
 800344a:	694b      	ldreq	r3, [r1, #20]
 800344c:	600f      	str	r7, [r1, #0]
 800344e:	bf18      	it	ne
 8003450:	2300      	movne	r3, #0
 8003452:	eba6 0807 	sub.w	r8, r6, r7
 8003456:	608b      	str	r3, [r1, #8]
 8003458:	f1b8 0f00 	cmp.w	r8, #0
 800345c:	dde9      	ble.n	8003432 <__sflush_r+0xae>
 800345e:	6a21      	ldr	r1, [r4, #32]
 8003460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003462:	4643      	mov	r3, r8
 8003464:	463a      	mov	r2, r7
 8003466:	4628      	mov	r0, r5
 8003468:	47b0      	blx	r6
 800346a:	2800      	cmp	r0, #0
 800346c:	dc08      	bgt.n	8003480 <__sflush_r+0xfc>
 800346e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003480:	4407      	add	r7, r0
 8003482:	eba8 0800 	sub.w	r8, r8, r0
 8003486:	e7e7      	b.n	8003458 <__sflush_r+0xd4>
 8003488:	dfbffffe 	.word	0xdfbffffe

0800348c <_fflush_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	4605      	mov	r5, r0
 8003492:	460c      	mov	r4, r1
 8003494:	b913      	cbnz	r3, 800349c <_fflush_r+0x10>
 8003496:	2500      	movs	r5, #0
 8003498:	4628      	mov	r0, r5
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	b118      	cbz	r0, 80034a6 <_fflush_r+0x1a>
 800349e:	6a03      	ldr	r3, [r0, #32]
 80034a0:	b90b      	cbnz	r3, 80034a6 <_fflush_r+0x1a>
 80034a2:	f7ff fc8f 	bl	8002dc4 <__sinit>
 80034a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f3      	beq.n	8003496 <_fflush_r+0xa>
 80034ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034b0:	07d0      	lsls	r0, r2, #31
 80034b2:	d404      	bmi.n	80034be <_fflush_r+0x32>
 80034b4:	0599      	lsls	r1, r3, #22
 80034b6:	d402      	bmi.n	80034be <_fflush_r+0x32>
 80034b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ba:	f7ff fe68 	bl	800318e <__retarget_lock_acquire_recursive>
 80034be:	4628      	mov	r0, r5
 80034c0:	4621      	mov	r1, r4
 80034c2:	f7ff ff5f 	bl	8003384 <__sflush_r>
 80034c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034c8:	07da      	lsls	r2, r3, #31
 80034ca:	4605      	mov	r5, r0
 80034cc:	d4e4      	bmi.n	8003498 <_fflush_r+0xc>
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	059b      	lsls	r3, r3, #22
 80034d2:	d4e1      	bmi.n	8003498 <_fflush_r+0xc>
 80034d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034d6:	f7ff fe5b 	bl	8003190 <__retarget_lock_release_recursive>
 80034da:	e7dd      	b.n	8003498 <_fflush_r+0xc>

080034dc <__swhatbuf_r>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	460c      	mov	r4, r1
 80034e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e4:	2900      	cmp	r1, #0
 80034e6:	b096      	sub	sp, #88	@ 0x58
 80034e8:	4615      	mov	r5, r2
 80034ea:	461e      	mov	r6, r3
 80034ec:	da0d      	bge.n	800350a <__swhatbuf_r+0x2e>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2340      	movne	r3, #64	@ 0x40
 80034fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003500:	2000      	movs	r0, #0
 8003502:	6031      	str	r1, [r6, #0]
 8003504:	602b      	str	r3, [r5, #0]
 8003506:	b016      	add	sp, #88	@ 0x58
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	466a      	mov	r2, sp
 800350c:	f000 f848 	bl	80035a0 <_fstat_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	dbec      	blt.n	80034ee <__swhatbuf_r+0x12>
 8003514:	9901      	ldr	r1, [sp, #4]
 8003516:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800351a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800351e:	4259      	negs	r1, r3
 8003520:	4159      	adcs	r1, r3
 8003522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003526:	e7eb      	b.n	8003500 <__swhatbuf_r+0x24>

08003528 <__smakebuf_r>:
 8003528:	898b      	ldrh	r3, [r1, #12]
 800352a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800352c:	079d      	lsls	r5, r3, #30
 800352e:	4606      	mov	r6, r0
 8003530:	460c      	mov	r4, r1
 8003532:	d507      	bpl.n	8003544 <__smakebuf_r+0x1c>
 8003534:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	6123      	str	r3, [r4, #16]
 800353c:	2301      	movs	r3, #1
 800353e:	6163      	str	r3, [r4, #20]
 8003540:	b003      	add	sp, #12
 8003542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003544:	ab01      	add	r3, sp, #4
 8003546:	466a      	mov	r2, sp
 8003548:	f7ff ffc8 	bl	80034dc <__swhatbuf_r>
 800354c:	9f00      	ldr	r7, [sp, #0]
 800354e:	4605      	mov	r5, r0
 8003550:	4639      	mov	r1, r7
 8003552:	4630      	mov	r0, r6
 8003554:	f7ff fe8a 	bl	800326c <_malloc_r>
 8003558:	b948      	cbnz	r0, 800356e <__smakebuf_r+0x46>
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	059a      	lsls	r2, r3, #22
 8003560:	d4ee      	bmi.n	8003540 <__smakebuf_r+0x18>
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	f043 0302 	orr.w	r3, r3, #2
 800356a:	81a3      	strh	r3, [r4, #12]
 800356c:	e7e2      	b.n	8003534 <__smakebuf_r+0xc>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	6020      	str	r0, [r4, #0]
 8003572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	9b01      	ldr	r3, [sp, #4]
 800357a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800357e:	b15b      	cbz	r3, 8003598 <__smakebuf_r+0x70>
 8003580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f81d 	bl	80035c4 <_isatty_r>
 800358a:	b128      	cbz	r0, 8003598 <__smakebuf_r+0x70>
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	431d      	orrs	r5, r3
 800359c:	81a5      	strh	r5, [r4, #12]
 800359e:	e7cf      	b.n	8003540 <__smakebuf_r+0x18>

080035a0 <_fstat_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4d07      	ldr	r5, [pc, #28]	@ (80035c0 <_fstat_r+0x20>)
 80035a4:	2300      	movs	r3, #0
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	f7fd fac6 	bl	8000b3e <_fstat>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d102      	bne.n	80035bc <_fstat_r+0x1c>
 80035b6:	682b      	ldr	r3, [r5, #0]
 80035b8:	b103      	cbz	r3, 80035bc <_fstat_r+0x1c>
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	bd38      	pop	{r3, r4, r5, pc}
 80035be:	bf00      	nop
 80035c0:	20000280 	.word	0x20000280

080035c4 <_isatty_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d06      	ldr	r5, [pc, #24]	@ (80035e0 <_isatty_r+0x1c>)
 80035c8:	2300      	movs	r3, #0
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	f7fd fac5 	bl	8000b5e <_isatty>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_isatty_r+0x1a>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	b103      	cbz	r3, 80035de <_isatty_r+0x1a>
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	20000280 	.word	0x20000280

080035e4 <_sbrk_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	4d06      	ldr	r5, [pc, #24]	@ (8003600 <_sbrk_r+0x1c>)
 80035e8:	2300      	movs	r3, #0
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	f7fd face 	bl	8000b90 <_sbrk>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_sbrk_r+0x1a>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_sbrk_r+0x1a>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000280 	.word	0x20000280

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
